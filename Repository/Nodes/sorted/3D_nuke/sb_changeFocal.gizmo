#! C:/Program Files/Nuke8.0v1/nuke-8.0.v1.dll -nx
version 8.0 v1
Gizmo {
name sb_ChangeFocal
inputs 2
help "Simon Bjork\nAugust 2013\nVersion 1.5\nwww.bjorkvisuals.com"
knobChanged "\n\nfrom __future__ import with_statement\n\nn = nuke.thisNode()\nk = nuke.thisKnob()\n\nif k.name() == \"method\":\n\n    if n\[\"method\"].value() == \"set new focal length\":\n        n\[\"new_focal\"].setVisible(True)\n        n\[\"focal_from_camera\"].setVisible(True)\n        n\[\"add_to_focal_percentage\"].setVisible(False)\n        n\[\"add_to_focal_mm\"].setVisible(False)\n\n    elif n\[\"method\"].value() == \"add to current focal length (%)\":\n        n\[\"add_to_focal_percentage\"].setVisible(True)\n        n\[\"add_to_focal_mm\"].setVisible(False)\n        n\[\"new_focal\"].setVisible(False)\n        n\[\"focal_from_camera\"].setVisible(False)\n\n    elif n\[\"method\"].value() == \"add to current focal length (mm)\":\n        n\[\"add_to_focal_mm\"].setVisible(True)\n        n\[\"add_to_focal_percentage\"].setVisible(False)\n        n\[\"new_focal\"].setVisible(False)\n        n\[\"focal_from_camera\"].setVisible(False)\n\n"
tile_color 0xffff
note_font Verdana
mapsize {0.15 0.15}
addUserKnob {20 controls}
addUserKnob {26 info l "" +STARTLINE T "Set new focal length and adjust nodal pan/tilt/roll."}
addUserKnob {26 divider1 l "" +STARTLINE}
addUserKnob {4 method t "If the camera's focal length is animated you might want to use \"add to focal length\", which will add the current value to the focal length." M {"set new focal length" "add to current focal length (%)" "add to current focal length (mm)" "" ""}}
method "add to current focal length (%)"
addUserKnob {26 divider2 l "" +STARTLINE}
addUserKnob {7 new_focal l "new focal length" +HIDDEN}
new_focal 50
addUserKnob {22 focal_from_camera l "get focal from camera" +HIDDEN T "from __future__ import with_statement\n\ndef getFocalFromCamera():\n\n    n = nuke.thisNode()\n    \n    with n:\n        orig_cam_name = nuke.toNode(\"camera\")\[\"label\"].evaluate()\n    \n    with nuke.root():\n        orig_cam = nuke.toNode(orig_cam_name)\n        \n\n        # Make sure a camera is connected.\n        if orig_cam_name == 'Nothing is named \"input1\"':\n            nuke.message(\"Connect a camera.\")\n            return\n\n        if orig_cam.Class() == \"Camera2\":\n            print \"A camera is connected.\"\n        else:\n            nuke.message(\"Connect a camera to the camera input. Make sure no other nodes are connected in between.\")\n            return\n\n        orig_focal = orig_cam\[\"focal\"]\n\n        if orig_focal.isAnimated() == True:\n            n\[\"new_focal\"].copyAnimations(orig_focal.animations())\n        else:\n            n\[\"new_focal\"].setValue(orig_focal.value())\n\ngetFocalFromCamera()" +STARTLINE}
addUserKnob {7 add_to_focal_percentage l "add to focal length (%)"}
add_to_focal_percentage 100
addUserKnob {7 add_to_focal_mm l "add to focal length (mm)" +HIDDEN}
addUserKnob {26 divider3 l "" +STARTLINE}
addUserKnob {13 add_to_rotate l pan/tilt/roll}
addUserKnob {26 divider4 l "" +STARTLINE}
addUserKnob {41 filter T ScanlineRender1.filter}
addUserKnob {41 samples T ScanlineRender1.samples}
addUserKnob {7 card_overscan l "card overscan (extra scale)"}
card_overscan 1
addUserKnob {41 overscan l "scanline-renderer overscan" T ScanlineRender1.overscan}
addUserKnob {41 format l "output format" T Reformat1.format}
addUserKnob {26 divider5 l "" +STARTLINE}
addUserKnob {22 create_camera l "create new camera" T "from __future__ import with_statement\n\ndef create_new_camera():\n\n    n = nuke.thisNode()\n\n    # Get the connected camera.\n    with n:\n        orig_cam_name = nuke.toNode(\"camera\")\[\"label\"].evaluate()\n\n    with nuke.root():\n        orig_cam = nuke.toNode(orig_cam_name)\n\n        # Make sure a camera is connected.\n        if orig_cam_name == 'Nothing is named \"input1\"':\n            nuke.message(\"Connect a camera.\")\n            return\n\n        if orig_cam.Class() == \"Camera2\":\n            print \"A camera is connected.\"\n        else:\n            nuke.message(\"Connect a camera to the camera input. Make sure no other nodes are connected in between.\")\n            return\n\n    p=nuke.Panel ('Set range')    \n    _first = int(nuke.root().knob(\"first_frame\").value())\n    _last = int(nuke.root().knob(\"last_frame\").value()) \n    \n    p.addSingleLineInput('first frame',_first)\n    p.addSingleLineInput('last frame',_last)\n    \n    result=p.show()\n        \n    if result:\n    \n        ff=int(p.value('first frame'))\n        lf=int(p.value('last frame'))\n\n        if ff == lf:\n            nuke.message(\"You must set a range of at least one frame.\")\n            return\n\n        # Get the camera nodes inside the group.\n        with n:\n\n            if n\[\"method\"].value() == \"set new focal length\":\n                oc = nuke.toNode(\"set_focal_camera\")\n            elif n\[\"method\"].value() == \"add to current focal length (mm)\":\n                oc = nuke.toNode(\"add_focal_mm_camera\")\n            elif n\[\"method\"].value() == \"add to current focal length (%)\":\n                oc = nuke.toNode(\"add_focal_percentage_camera\")\n            else:\n                print \"What option are you using!\"\n                return\n\n            oc_translate = oc\[\"translate\"]\n            oc_rotate = oc\[\"rotate\"]\n            oc_scale = oc\[\"scaling\"]\n            oc_uniform_scale = oc\[\"uniform_scale\"]\n            oc_skew = oc\[\"skew\"]\n            oc_pivot = oc\[\"pivot\"]\n            oc_vaperture = oc\[\"vaperture\"]\n            oc_haperture = oc\[\"haperture\"]\n            oc_focal = oc\[\"focal\"]\n            oc_near = oc\[\"near\"]\n            oc_far = oc\[\"far\"]\n            oc_focal_point = oc\[\"focal_point\"]\n            oc_fstop = oc\[\"fstop\"]\n\n        # Create the new camera.\n        # Not every parameter of the camera is copied. If you need them, look at the code below and add it. Make sure you remove the property from the static values at the bottom.\n        with nuke.root():\n\n            c = nuke.createNode(\"Camera2\")\n            c\[\"xpos\"].setValue( n\[\"xpos\"].value() )\n            c\[\"ypos\"].setValue( n\[\"ypos\"].value() + 60 )\n\n            # Set focal length values.\n            if n\[\"method\"].value() == \"set new focal length\":\n   \n                for i in range(ff,lf + 1):\n                    if orig_cam\[\"focal\"].isAnimated() == True or n\[\"new_focal\"].isAnimated() == True:\n                        c\[\"focal\"].setAnimated()\n                        c\[\"focal\"].setValueAt(oc_focal.valueAt(i), i)\n                        c\[\"focal\"].setValueAt(oc_focal.valueAt(i), i)\n                        c\[\"focal\"].setValueAt(oc_focal.valueAt(i), i)\n                    else:\n                        c\[\"focal\"].setValueAt(oc_focal.valueAt(i), i)\n                        c\[\"focal\"].setValueAt(oc_focal.valueAt(i), i)\n                        c\[\"focal\"].setValueAt(oc_focal.valueAt(i), i)\n                        break\n\n            elif n\[\"method\"].value() == \"add to current focal length (%)\":\n\n                for i in range(ff,lf+1):\n                    if orig_cam\[\"focal\"].isAnimated() == True or n\[\"add_to_focal_percentage\"].isAnimated() == True:\n                        c\[\"focal\"].setAnimated()\n                        c\[\"focal\"].setValueAt(oc_focal.valueAt(i), i)\n                        c\[\"focal\"].setValueAt(oc_focal.valueAt(i), i)\n                        c\[\"focal\"].setValueAt(oc_focal.valueAt(i), i)\n                    else:\n                        c\[\"focal\"].setValueAt(oc_focal.valueAt(i), i)\n                        c\[\"focal\"].setValueAt(oc_focal.valueAt(i), i)\n                        c\[\"focal\"].setValueAt(oc_focal.valueAt(i), i)\n                        break\n\n            elif n\[\"method\"].value() == \"add to current focal length (mm)\":\n\n                for i in range(ff,lf+1):\n                    if orig_cam\[\"focal\"].isAnimated() == True or n\[\"add_to_focal_mm\"].isAnimated() == True:\n                        c\[\"focal\"].setAnimated()\n                        c\[\"focal\"].setValueAt(oc_focal.valueAt(i), i)\n                        c\[\"focal\"].setValueAt(oc_focal.valueAt(i), i)\n                        c\[\"focal\"].setValueAt(oc_focal.valueAt(i), i)\n                    else:\n                        c\[\"focal\"].setValueAt(oc_focal.valueAt(i), i)\n                        c\[\"focal\"].setValueAt(oc_focal.valueAt(i), i)\n                        c\[\"focal\"].setValueAt(oc_focal.valueAt(i), i)\n                        break\n\n            # Set translation values.\n            for i in range(ff,lf+1):\n                if orig_cam\[\"translate\"].isAnimated() == True:\n                    c\[\"translate\"].setAnimated()\n                    c\[\"translate\"].setValueAt(oc_translate.valueAt(i)\[0], i, 0)\n                    c\[\"translate\"].setValueAt(oc_translate.valueAt(i)\[1], i, 1)\n                    c\[\"translate\"].setValueAt(oc_translate.valueAt(i)\[2], i, 2)\n                else:\n                    c\[\"translate\"].setValueAt(oc_translate.valueAt(i)\[0], i, 0)\n                    c\[\"translate\"].setValueAt(oc_translate.valueAt(i)\[1], i, 1)\n                    c\[\"translate\"].setValueAt(oc_translate.valueAt(i)\[2], i, 2)\n                    break\n\n            # Set rotation values.\n            for i in range(ff,lf+1):\n                if orig_cam\[\"rotate\"].isAnimated() == True or n\[\"add_to_rotate\"].isAnimated == True:\n                    c\[\"rotate\"].setAnimated()\n                    c\[\"rotate\"].setValueAt(oc_rotate.valueAt(i)\[0], i, 0)\n                    c\[\"rotate\"].setValueAt(oc_rotate.valueAt(i)\[1], i, 1)\n                    c\[\"rotate\"].setValueAt(oc_rotate.valueAt(i)\[2], i, 2)\n                else:\n                    c\[\"rotate\"].setValueAt(oc_rotate.valueAt(i)\[0], i, 0)\n                    c\[\"rotate\"].setValueAt(oc_rotate.valueAt(i)\[1], i, 1)\n                    c\[\"rotate\"].setValueAt(oc_rotate.valueAt(i)\[2], i, 2)\n                    break\n\n            # Set uniform scale values.\n            for i in range(ff,lf+1):\n                if orig_cam\[\"uniform_scale\"].isAnimated() == True:\n                    c\[\"uniform_scale\"].setAnimated()\n                    c\[\"uniform_scale\"].setValueAt( oc_uniform_scale.valueAt(i), i )\n                else:\n                    c\[\"uniform_scale\"].setValueAt( oc_uniform_scale.valueAt(i), i )\n                    break\n\n            for i in range(ff,lf+1):\n                # Set pivot values.\n                if orig_cam\[\"pivot\"].isAnimated() == True:\n                    c\[\"pivot\"].setAnimated()\n                    c\[\"pivot\"].setValueAt(oc_pivot.valueAt(i)\[0], i, 0)\n                    c\[\"pivot\"].setValueAt(oc_pivot.valueAt(i)\[1], i, 1)\n                    c\[\"pivot\"].setValueAt(oc_pivot.valueAt(i)\[2], i, 2)\n                else:\n                    c\[\"pivot\"].setValueAt(oc_pivot.valueAt(i)\[0], i, 0)\n                    c\[\"pivot\"].setValueAt(oc_pivot.valueAt(i)\[1], i, 1)\n                    c\[\"pivot\"].setValueAt(oc_pivot.valueAt(i)\[2], i, 2)\n                    break\n\n            # Set focal distance values.\n            for i in range(ff,lf+1):\n                if orig_cam\[\"focal_point\"].isAnimated() == True:\n                    c\[\"focal_point\"].setAnimated()\n                    c\[\"focal_point\"].setValueAt(oc_focal_point.valueAt(i), i)\n                    c\[\"focal_point\"].setValueAt(oc_focal_point.valueAt(i), i)\n                    c\[\"focal_point\"].setValueAt(oc_focal_point.valueAt(i), i)\n                else:\n                    c\[\"focal_point\"].setValueAt(oc_focal_point.valueAt(i), i)\n                    c\[\"focal_point\"].setValueAt(oc_focal_point.valueAt(i), i)\n                    c\[\"focal_point\"].setValueAt(oc_focal_point.valueAt(i), i)\n                    break\n\n            # Set static values.\n            c\[\"rot_order\"].setValue(\"XYZ\")\n            c\[\"haperture\"].setValue(oc_haperture.value())\n            c\[\"vaperture\"].setValue(oc_vaperture.value())\n            c\[\"near\"].setValue(oc_near.value())\n            c\[\"far\"].setValue(oc_far.value())\n            c\[\"fstop\"].setValue(oc_fstop.value())\n\ncreate_new_camera()" +STARTLINE}
addUserKnob {26 divider6 l "" +STARTLINE}
}
Camera2 {
inputs 0
rot_order XYZ
translate {{"\[exists parent.input1] ? parent.input1.translate : 0"} {"\[exists parent.input1] ? parent.input1.translate : 0"} {"\[exists parent.input1] ? parent.input1.translate : 0"}}
rotate {{"\[exists parent.input1] ? parent.input1.rotate + add_to_rotate : 0"} {"\[exists parent.input1] ? parent.input1.rotate + add_to_rotate : 0"} {"\[exists parent.input1] ? parent.input1.rotate + add_to_rotate : 0"}}
scaling {{"\[exists parent.input1] ? parent.input1.scaling : 0"} {"\[exists parent.input1] ? parent.input1.scaling : 0"} {"\[exists parent.input1] ? parent.input1.scaling : 0"}}
uniform_scale {{"\[exists parent.input1] ? parent.input1.uniform_scale : 0"}}
skew {{"\[exists parent.input1] ? parent.input1.skew : 0"} {"\[exists parent.input1] ? parent.input1.skew : 0"} {"\[exists parent.input1] ? parent.input1.skew : 0"}}
pivot {{"\[exists parent.input1] ? parent.input1.pivot : 0"} {"\[exists parent.input1] ? parent.input1.pivot : 0"} {"\[exists parent.input1] ? parent.input1.pivot : 0"}}
focal {{"\[exists parent.input1] ? parent.input1.focal + add_to_focal_mm : 0"}}
haperture {{"\[exists parent.input1] ? parent.input1.haperture : 0"}}
vaperture {{"\[exists parent.input1] ? parent.input1.vaperture : 0"}}
near {{"\[exists parent.input1] ? parent.input1.near : 0"}}
far {{"\[exists parent.input1] ? parent.input1.far : 0"}}
focal_point {{"\[exists parent.input1] ? parent.input1.focal_point : 0"}}
fstop {{"\[exists parent.input1] ? parent.input1.fstop : 0"}}
name add_focal_mm_camera
xpos -1808
ypos -456
}
Camera2 {
inputs 0
rot_order XYZ
translate {{"\[exists parent.input1] ? parent.input1.translate : 0"} {"\[exists parent.input1] ? parent.input1.translate : 0"} {"\[exists parent.input1] ? parent.input1.translate : 0"}}
rotate {{"\[exists parent.input1] ? parent.input1.rotate + add_to_rotate : 0"} {"\[exists parent.input1] ? parent.input1.rotate + add_to_rotate : 0"} {"\[exists parent.input1] ? parent.input1.rotate + add_to_rotate : 0"}}
scaling {{"\[exists parent.input1] ? parent.input1.scaling : 0"} {"\[exists parent.input1] ? parent.input1.scaling : 0"} {"\[exists parent.input1] ? parent.input1.scaling : 0"}}
uniform_scale {{"\[exists parent.input1] ? parent.input1.uniform_scale : 0"}}
skew {{"\[exists parent.input1] ? parent.input1.skew : 0"} {"\[exists parent.input1] ? parent.input1.skew : 0"} {"\[exists parent.input1] ? parent.input1.skew : 0"}}
pivot {{"\[exists parent.input1] ? parent.input1.pivot : 0"} {"\[exists parent.input1] ? parent.input1.pivot : 0"} {"\[exists parent.input1] ? parent.input1.pivot : 0"}}
focal {{"\[exists parent.input1] ? (parent.input1.focal * add_to_focal_percentage)/100 : 0"}}
haperture {{"\[exists parent.input1] ? parent.input1.haperture : 0"}}
vaperture {{"\[exists parent.input1] ? parent.input1.vaperture : 0"}}
near {{"\[exists parent.input1] ? parent.input1.near : 0"}}
far {{"\[exists parent.input1] ? parent.input1.far : 0"}}
focal_point {{"\[exists parent.input1] ? parent.input1.focal_point : 0"}}
fstop {{"\[exists parent.input1] ? parent.input1.fstop : 0"}}
name add_focal_percentage_camera
xpos -1650
ypos -459
}
Camera2 {
inputs 0
rot_order XYZ
translate {{"\[exists parent.input1] ? parent.input1.translate : 0"} {"\[exists parent.input1] ? parent.input1.translate : 0"} {"\[exists parent.input1] ? parent.input1.translate : 0"}}
rotate {{"\[exists parent.input1] ? parent.input1.rotate + add_to_rotate : 0"} {"\[exists parent.input1] ? parent.input1.rotate + add_to_rotate : 0"} {"\[exists parent.input1] ? parent.input1.rotate + add_to_rotate : 0"}}
scaling {{"\[exists parent.input1] ? parent.input1.scaling : 0"} {"\[exists parent.input1] ? parent.input1.scaling : 0"} {"\[exists parent.input1] ? parent.input1.scaling : 0"}}
uniform_scale {{"\[exists parent.input1] ? parent.input1.uniform_scale : 0"}}
skew {{"\[exists parent.input1] ? parent.input1.skew : 0"} {"\[exists parent.input1] ? parent.input1.skew : 0"} {"\[exists parent.input1] ? parent.input1.skew : 0"}}
pivot {{"\[exists parent.input1] ? parent.input1.pivot : 0"} {"\[exists parent.input1] ? parent.input1.pivot : 0"} {"\[exists parent.input1] ? parent.input1.pivot : 0"}}
focal {{new_focal}}
haperture {{"\[exists parent.input1] ? parent.input1.haperture : 0"}}
vaperture {{"\[exists parent.input1] ? parent.input1.vaperture : 0"}}
near {{"\[exists parent.input1] ? parent.input1.near : 0"}}
far {{"\[exists parent.input1] ? parent.input1.far : 0"}}
focal_point {{"\[exists parent.input1] ? parent.input1.focal_point : 0"}}
fstop {{"\[exists parent.input1] ? parent.input1.fstop : 0"}}
name set_focal_camera
xpos -1504
ypos -457
}
Switch {
inputs 3
which {{method}}
name method_switch
xpos -1655
ypos -234
}
Dot {
name Dot1
xpos -1621
ypos -116
}
Input {
inputs 0
name camera
label "\[value input1.name]"
xpos -1220
ypos -467
number 1
}
Input {
inputs 0
name img
xpos -929
ypos -685
}
Project3D {
inputs 2
crop false
name Project3D1
xpos -929
ypos -461
}
Card2 {
z 8000
lens_in_focal {{"\[exists parent.input1] ? parent.input1.focal : 0"}}
lens_in_haperture {{"\[exists parent.input1] ? parent.input1.haperture : 0"}}
rot_order XYZ
translate {{"\[exists parent.input1] ? parent.input1.translate : 0"} {"\[exists parent.input1] ? parent.input1.translate : 0"} {"\[exists parent.input1] ? parent.input1.translate : 0"}}
rotate {{"\[exists parent.input1] ? parent.input1.rotate : 0"} {"\[exists parent.input1] ? parent.input1.rotate : 0"} {"\[exists parent.input1] ? parent.input1.rotate : 0"}}
scaling {{card_overscan} {card_overscan} 1}
control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
name Card1
xpos -929
ypos -272
}
Reformat {
inputs 0
box_width 1920
box_height 1080
box_fixed true
name Reformat1
xpos -716
ypos -183
}
ScanlineRender {
inputs 3
motion_vectors_type distance
name ScanlineRender1
xpos -929
ypos -119
}
Output {
name Output1
xpos -929
ypos -7
}
end_group
