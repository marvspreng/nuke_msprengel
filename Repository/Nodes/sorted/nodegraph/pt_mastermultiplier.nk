set cut_paste_input [stack 0]
version 11.0 v1
push $cut_paste_input
NoOp {
 name pt_MasterMultiplier
 tile_color 0xff82ff
 label "value : \[value multiplier]\nknob : \[value  knobName]"
 note_font_size 12
 selected true
 xpos 131
 ypos -239
 hide_input true
 addUserKnob {20 User}
 addUserKnob {26 title l "" +STARTLINE T "Master Multiplier"}
 addUserKnob {26 ""}
 addUserKnob {7 multiplier}
 multiplier 0.5
 addUserKnob {1 knobName t "a = nuke.selectedNodes()\nb = nuke.toNode('MasterMultiplier')  #<-for diagnostic in script editor\n#b = nuke.thisNode() \nc = b\['knobName'].getValue()\nd = b\['name'].getValue()\ne = '.multiplier'\nexp = d+e\n\n\nfor o in a:\n    try:\n        o\[c].clearAnimated()\n    except:\n        pass\n"}
 knobName mix
 addUserKnob {22 link l "Link Node" T "a = nuke.selectedNodes()\n#b = nuke.toNode('MasterMultiplier') <-for diagnostic in script editor\nb = nuke.thisNode() \nc = b\['knobName'].getValue()\nd = b\['name'].getValue()\ne = '.multiplier'\nexp = d+e\n\nfor o in a:\n    try:\n        o\[c].setExpression(exp,0)\n    except:\n        pass" +STARTLINE}
 addUserKnob {22 UnlinkAll l "Unlink All" -STARTLINE T "import nuke\n\na = nuke.selectedNodes()\n#b = nuke.toNode('MasterMultiplier') #<-for diagnostic in script editor\nb = nuke.thisNode() \nc = b\['knobName'].getValue()\nd = b\['name'].getValue()\ne = '.multiplier'\nexp = d+e\n\n\nfor node in a:\n    for knob in node.knobs():\n        if node\[knob].hasExpression():\n            if exp in node\[knob].toScript():\n                node\[knob].clearAnimated()"}
 addUserKnob {22 multiply l "Link as Multiplier" T "a = nuke.selectedNodes()\n#b = nuke.toNode('MasterMultiplier') #<-for diagnostic in script editor\nb = nuke.thisNode() \nc = b\['knobName'].getValue()\nd = b\['name'].getValue()\ne = '.multiplier'\nexp = d+e\n\n\n\nfor node in a:\n#selecting each node\n\n    for knob in node.knobs():\n#selecting each knob\n\n        if node\[knob].isAnimated() == True:\n#finding if knob have expression/animation\n\n            double = str(node\[knob].toScript()).find(exp)\n            if double < 0: \n                #print 'yes double' \n\n###################################################\n\n#nuke.selectedNodes will detect same node/knob twice, this will search if the multiplier has been applied and if it has, it wont apply it again\n\n###################################################\n                animated = str(node\[knob].toScript()).find('curve ') #condition 'curve ' determine that knob only have animation\n                #print animated\n\n                p = str(node\[knob].toScript())\n                head, sep, tail = p.partition(' ')\n                q = head\n                head, sep, tail = q.partition('curve')\n                r = tail\n                #print p #<-full expression on the knob\n                #print q #<-removed keyframes in the expression script\n                #print r #<-removed the curve\n                #print len(r) #<-length of exression on the knob\n\n#setting variable for if node is animated elif animated and have expression or else have only expression      \n####################################################      \n    \n                if animated == 1:\n                    #print 'yes only animated'\n                    animated = '(' + 'curve' + ')' + '*' + str(exp)\n                    node\[knob].setExpression(animated,0)\n\n#this will determine if knob is animated instead of expression, and it will multiply value to the animation curve value \n\n\n                elif len(r) > 0:\n                    #print 'animated and expression'\n                    print q.replace('\{','') + '*' + str(exp)\n                    animatedExpression = '(' +  q.replace('\{','') + ')'  + '*' + str(exp)\n                    node\[knob].setExpression(animatedExpression,0)\n\n#this will determine if knob is animated and have expression, and it will multiply value to everything on the knob \n\n\n                else:\n                    expression = '(' + p.replace('\{','').replace('\}','') + ')' + '*' + str(exp)\n                    #print expression    \n                    node\[knob].setExpression(expression,0)\n\n#this will determine that knob only have expression, and it will multiply value to the expression \n\n\n        \n        elif str(knob) == c:\n            nonAnimated = str(node\[knob].getValue()) + '*' + exp\n            #print nonAnimated\n            node\[knob].setExpression(nonAnimated,0)\n            #print node\[knob].getValue()\n            #print knob\n\n        else:\n            pass" +STARTLINE}
 addUserKnob {22 UnlinkMultiply l "Unlink Multiplier" -STARTLINE T "a = nuke.selectedNodes()\n#b = nuke.toNode('MasterMultiplier') #<-for diagnostic in script editor\nb = nuke.thisNode() \nc = b\['knobName'].getValue()\nd = b\['name'].getValue()\ne = '.multiplier'\nexp = d+e\n\nfor node in a:\n    for knob in node.knobs():\n        if exp in str(node\[knob].toScript()):\n            x = node\[knob].toScript().replace(exp,'1').replace('\{','').replace('\}','')\n            #print x\n            z = b\['multiplier'].getValue()\n            if 'parent' in x:\n                node\[knob].clearAnimated()\n            \n            else:\n                p = str(node\[knob].toScript())\n                head, sep, tail = p.partition(' ')\n                print p\n                q = head.replace('*'+exp,'').replace('\{','').replace('\}','')#.replace(exp,'1')\n                print q\n                if '(' in q:\n                    r = q\[1:-1]\n                    print r\n                    node\[knob].setExpression(r,0)\n                else:\n                    node\[knob].clearAnimated()\n                    node\[knob].setValue(float(q),0)"}
}
