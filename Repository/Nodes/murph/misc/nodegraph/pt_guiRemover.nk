set cut_paste_input [stack 0]
version 11.0 v1
push $cut_paste_input
NoOp {
 name pt_guiRemover
 tile_color 0xffec28ff
 gl_color 0x26a808ff
 selected true
 xpos 1669
 ypos 121
 addUserKnob {20 pt_guiRemover}
 addUserKnob {26 div_nodeOp l "node operation"}
 addUserKnob {22 guiSelNodes l "select nodes with gui" T "a = nuke.allNodes()\nb = '\$gui?'\nc = '\$gui'\n\n\nnuke.thisNode().setSelected(False)\n\nfor node in a:\n    for knob in node.knobs():\n        if node\[knob].hasExpression():\n            if c in node\[knob].toScript():\n                node.setSelected(True)\n            else:\n                node.setSelected(False)" +STARTLINE}
 addUserKnob {22 guitolabel l "set label on selected nodes that have gui expression" -STARTLINE T "\na = nuke.selectedNodes()\nb = '\$gui?'\nc = '\$gui'\n\n\n\nfor node in a:\n    for knob in node.knobs():\n        if node\[knob].hasExpression():\n            #print knob\n            if c in node\[knob].toScript():\n                print 'yes' #detecting if theres \$gui with assigned value\n                print knob #detect which knob have the expression\n                \n                expression = str(node\[knob].toScript())\n                \n                print expression\n                head, sep, tail = expression.partition(' ')\n                print head\n                #getting the full expression from the knob with \$gui\n                label = head.replace('\{','').replace('\}','').replace('\\\"','').replace('\\\\\$','')\n                print label\n                node\['label'].setValue(str(label))"}
 addUserKnob {26 div_keep l "gui removal"}
 addUserKnob {22 guiSelKeepVal l "gui remover (selected nodes)" T "a = nuke.selectedNodes()\nb = '\$gui?'\nc = '\$gui'\n\nfor node in a:\n    for knob in node.knobs():\n        if b in node\[knob].toScript():\n            node\['label'].setValue('')\n            if'curve' in node\[knob].toScript():\n                #print 'yes' #detecting if theres \$gui with assigned value\n                #print knob #detect which knob have the expression\n                expression = str(node\[knob].toScript())\n                #print expression\n                #getting the full expression from the knob with \$gui\n                head, sep, tail = expression.partition(':')\n                #following the normal way of assigned value \$gui?1:100, we will take the number behind this -> :\n                value =  tail.replace('\{','').replace('\}','').replace('\\\"','') \n                #print value\n                head, sep, tail = value.partition(' ')\n                #print head\n                #getting the value from assigned \$gui value without un neccesary symbols thats not usable when making expression\n                node\[knob].setExpression(str(head))\n            else:\n                expression = str(node\[knob].toScript())\n                head, sep, tail = expression.partition(':')\n                value =  tail.replace('\{','').replace('\}','').replace('\\\"','') \n                #print value\n                node\[knob].clearAnimated()\n                node\[knob].setValue(float(value))\n\n        elif c in node\[knob].toScript():\n            node\['label'].setValue('')\n            #print 'yes'\n            #print knob\n            node\[knob].clearAnimated()\n            node\[knob].setValue(0)" +STARTLINE}
 addUserKnob {22 guiAllKeepVal l "gui remover(all nodes)" -STARTLINE T "a = nuke.allNodes()\nb = '\$gui?'\nc = '\$gui'\n\n\nfor node in a:\n    for knob in node.knobs():\n        if b in node\[knob].toScript():\n            node\['label'].setValue('')\n            if'curve' in node\[knob].toScript():\n                #print 'yes' #detecting if theres \$gui with assigned value\n                #print knob #detect which knob have the expression\n                expression = str(node\[knob].toScript())\n                #print expression\n                #getting the full expression from the knob with \$gui\n                head, sep, tail = expression.partition(':')\n                #following the normal way of assigned value \$gui?1:100, we will take the number behind this -> :\n                value =  tail.replace('\{','').replace('\}','').replace('\\\"','') \n                #print value\n                head, sep, tail = value.partition(' ')\n                #print head\n                #getting the value from assigned \$gui value without un neccesary symbols thats not usable when making expression\n                node\[knob].setExpression(str(head))\n            else:\n                expression = str(node\[knob].toScript())\n                head, sep, tail = expression.partition(':')\n                value =  tail.replace('\{','').replace('\}','').replace('\\\"','') \n                #print value\n                node\[knob].clearAnimated()\n                node\[knob].setValue(float(value))\n\n        elif c in node\[knob].toScript():\n            node\['label'].setValue('')\n            #print 'yes'\n            #print knob\n            node\[knob].clearAnimated()\n            node\[knob].setValue(0)"}
}
