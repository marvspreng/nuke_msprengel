#! C:/Program Files/Nuke12.0v2/nuke-12.0.2.dll -nx
version 12.0 v2
Gizmo {
 help "This bilateral filter allows to blur an image while trying to preserve edges.\nIt is much faster than Nuke original one\n\n\nThis gizmo is based on Blinkscript and may not render correctly on your renderfarm. Please consider rendering locally"
 addUserKnob {20 User l Bilateral}
 addUserKnob {14 size t "radius in pixels of the blur kernel.\nbigger values blur more\n\n(High values>100 may be slow to compute)" R 0 100}
 size 40
 addUserKnob {6 linorbox_spatial l "linear spatial filter" t "toggle between linear and box spatial filtering\n(use box for stronger blur)" +STARTLINE}
 addUserKnob {7 color_diff l "color difference" t "maximum color difference for a pixel to be used in the blur\nbigger values keep less details"}
 color_diff 0.32
 addUserKnob {6 linorbox_col l "linear color filter" t "toggle between linear and box color importance\n(use box for stronger blur)\n\nin linear mode the pixel influence goes from 1 to 0 as color difference increase to \"color difference\"" +STARTLINE}
 linorbox_col true
 addUserKnob {6 add_mul_dif l "absolute color compare" t "absolute or proportional compare of the color values\nproportional will keep more details in the darks" +STARTLINE}
 add_mul_dif true
 addUserKnob {6 luma709 l "luma Rec709" t "Math used for evaluating color difference.\nRec 709 or RawRGB\n\nRec709 is closer to eye perception of detail" +STARTLINE}
 luma709 true
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "<p><b>Bilateral filter\n</b>\n</p><p>\nEdge preserving blur \nby Alexandre Bon (c)2020\n</p><p>\n<i>\nread tooltips and (?) for help\n</i>\n</p>"}
 addUserKnob {26 ""}
 addUserKnob {41 useGPUIfAvailable l "Use GPU if available" t "BlinkScript setting" T BlinkScript2.useGPUIfAvailable}
 addUserKnob {41 vectorize l "Vectorize on CPU" t "BlinkScript setting" T BlinkScript2.vectorize}
 addUserKnob {41 maxGPUMemory l "Percentage of GPU memory to use" t "BlinkScript setting" T BlinkScript2.maxGPUMemory}
}
 Input {
  inputs 0
  name Input1
  selected true
  xpos 60
  ypos -34
 }
 BlinkScript {
  kernelSourceFile G:/PROJETS_GRAPHIQUES/TESTS_NUKE/200_PROJETS/bilateral/bilateral_blinkscript_v02.txt
  recompileCount 49
  ProgramGroup 1
  KernelDescription "2 \"BlBilateral\" iterate pixelWise 0e25f0a54c2b39f51e3a27f3eeee4a8f5781ad9d74c632fdb6653422cff559ca 2 \"imageIn\" Read Ranged2D \"imageOut\" Write Point 6 \"kernel size\" Float 2 AAAgQQAAIEE= \"linear (or box) filter\" Bool 1 AQ== \"color dif. limit\" Float 1 zczMPQ== \"linear (or box) color diff.\" Bool 1 AQ== \"color compare absolute (or proportional)\" Bool 1 AQ== \"Luma_Rec709\" Bool 1 AQ== 6 \"ks\" 2 1 \"size_lin_box\" 1 1 \"cs\" 1 1 \"color_lin_box\" 1 1 \"color_add_mul\" 1 1 \"luma709\" 1 1 5 \"imageInrangeMin\" Int 2 1 AAAAAAAAAAA= \"imageInrangeMax\" Int 2 1 AAAAAAAAAAA= \"myvar\" Float 1 1 AAAAAA== \"iks\" Int 2 1 AAAAAAAAAAA= \"maxDist\" Float 1 1 AAAAAA=="
  kernelSource "\n\n\nkernel BlBilateral : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRanged2D, eEdgeClamped> imageIn; // image to apply bilateral to\n  Image<eWrite, eAccessPoint> imageOut;          \n\nparam:\n  float2 ks; //ks kernel size\n  bool size_lin_box;  //linear or box kernel\n  float cs; // color difference limit\n  bool color_lin_box; // color startdecay\n  bool color_add_mul; // color difference computed multiplicative\n  bool luma709;\n\nlocal:\n  float myvar;\n  int2 iks; // integer kernel size\n  float maxDist;\n\n\n  void define() \{\n     defineParam(ks, \"kernel size\", float2(10.0f,10.0f));\n     defineParam(size_lin_box, \"linear (or box) filter\", true);\n     defineParam(cs, \"color dif. limit\", 0.1f);\n     defineParam(color_lin_box, \"linear (or box) color diff.\", true);\n     defineParam(color_add_mul, \"color compare absolute (or proportional)\", true);\n     defineParam(luma709, \"Luma_Rec709\", true);\n  \}\n\n  void init()\n  \{\n    iks.x = int(fabs(ks.x));\n    iks.y = int(fabs(ks.y));\n    maxDist = length(ks);\n    imageIn.setRange(-iks.x-1,-iks.y-1,iks.x+1,iks.y+1);\n  \}\n\n  void process()  \{\n    float sumWeight = 0.0f;\n    float3 _sum(0.0f);\n    //SampleType(imageOut) sampleOut(0.0f);\n    SampleType(imageIn) sampleIn(0.0f);\n    float3 ctrPix;\n    float3 curPix;\n    sampleIn = imageIn(0, 0);\n    ctrPix.x = sampleIn.x;\n    ctrPix.y = sampleIn.y;\n    ctrPix.z = sampleIn.z;\n    if (luma709) \{\n      ctrPix.x = max(0.0f,ctrPix.x*0.2f);\n      ctrPix.y = max(0.0f,ctrPix.y*0.7f);\n      ctrPix.z = max(0.0f,ctrPix.z*0.1f);\n    \}\n    else \{\n      ctrPix.x = max(0.0f,ctrPix.x);\n      ctrPix.y = max(0.0f,ctrPix.y);\n      ctrPix.z = max(0.0f,ctrPix.z);\n    \}\n    float ctrLuma=length(ctrPix);\n    float curLuma(0.0f);\n    \n  if (cs==0 or maxDist==0) \{\n    imageOut(0) = curPix.x;\n    imageOut(1) = curPix.y;\n    imageOut(2) = curPix.z;\n    return;\n  \}\n\n    // _sum.x=0;\n    // _sum.y=0;\n    // _sum.z=0;\n\n    for (int j = -iks.x ; j <= iks.x; j++) \{\n      for (int i = -iks.y ; i <= iks.y; i++) \{\n        sampleIn = imageIn(j, i);\n        if (luma709) \{\n          curPix.x = sampleIn.x*0.2f;\n          curPix.y = sampleIn.y*0.7f;\n          curPix.z = sampleIn.z*0.1f;\n        \}\n        else \{\n          curPix.x = sampleIn.x;\n          curPix.y = sampleIn.y;\n          curPix.z = sampleIn.z; \n        \}\n        float colorWeight(1.0f);\n        float distWeight(1.0f);\n        // define bilateral filter kernel weights\n        float2 dist;\n        dist.x = i;\n        dist.y = j;\n        float imageDist = float(length(dist));\n        if (size_lin_box) \{\n          distWeight = max(0.0f,float(maxDist - imageDist) )/maxDist;\n        \}\n        else \{\n          distWeight = ceil(max(0.0f,float(maxDist - imageDist) )/maxDist);\n        \}\n        \n        float colorDist(1.0f);\n        if (color_add_mul) \{\n          colorDist = length(curPix-ctrPix);\n        \}\n        else \{\n          curPix.x = max(0.0f, curPix.x);\n          curPix.y = max(0.0f, curPix.y);\n          curPix.z = max(0.0f, curPix.z);\n          curLuma=length(curPix);\n          if (curLuma>=ctrLuma)\{\n             colorDist = 1 - ctrLuma/max( 0.000001f,curLuma); \n          \}\n          else \{\n             colorDist = 1 - curLuma/max( 0.000001f,ctrLuma); \n          \}\n        \}\n        if (color_lin_box) \{\n          colorWeight = max(0.0f,float(cs - colorDist) )/cs;\n        \}\n        else \{\n          colorWeight = ceil(max(0.0f,float(cs - colorDist) )/cs);\n        \}\n        sumWeight += colorWeight*distWeight;\n        _sum += colorWeight*distWeight*curPix;\n      \}\n        \n    \}\n\n    float3 myresult;\n    if ( sumWeight >0 ) \{ \n      _sum /= sumWeight;\n      myresult = _sum;\n    \}\n    else \{\n      myresult = curPix;\n    \}\n    if ( luma709 ) \{\n      imageOut(0) = myresult.x/0.2f;\n      imageOut(1) = myresult.y/0.7f;\n      imageOut(2) = myresult.z/0.1f;\n    \}\n    else \{\n      imageOut(0) = myresult.x;\n      imageOut(1) = myresult.y;\n      imageOut(2) = myresult.z;\n    \} \n  \}\n\};\n\n"
  rebuild ""
  "BlBilateral_kernel size" {{parent.size} {parent.size}}
  "BlBilateral_linear (or box) filter" {{parent.linorbox_spatial}}
  "BlBilateral_color dif. limit" {{parent.color_diff}}
  "BlBilateral_linear (or box) color diff." {{parent.linorbox_col}}
  "BlBilateral_color compare absolute (or proportional)" {{parent.add_mul_dif}}
  BlBilateral_Luma_Rec709 {{parent.luma709}}
  rebuild_finalise ""
  name BlinkScript2
  xpos 60
  ypos 6
 }
 Output {
  name Output1
  xpos 60
  ypos 106
 }
end_group
