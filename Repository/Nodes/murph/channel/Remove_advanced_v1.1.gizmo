#! C:/Program Files/Nuke10.0v3/nuke-10.0.3.dll -nx
version 10.0 v3
Group {
 knobChanged "import thread\n\nnr = nuke.thisNode()\['switch_to_remove']\nnk = nuke.thisNode()\['switch_to_keep']\n\nk = nuke.thisKnob()\nif k.name() in \['operation']:\n        if k.getValue() == 0:\n            thread.start_new_thread(nr.execute, ())\n        elif k.getValue() == 1:\n            thread.start_new_thread(nk.execute, ())"
 tile_color 0x9e3b62ff
 addUserKnob {20 Remove}
 addUserKnob {1 _last_remove_name l INVISIBLE +INVISIBLE}
 _last_remove_name none
 addUserKnob {1 _last_copy_name l INVISIBLE +INVISIBLE}
 _last_copy_name Remove1
 addUserKnob {3 _number_in_gui l INVISIBLE +INVISIBLE}
 _number_in_gui 4
 addUserKnob {1 _last_gui_name l INVISIBLE +INVISIBLE}
 _last_gui_name channels4
 addUserKnob {4 operation M {remove keep}}
 addUserKnob {22 switch_to_remove l INVISIBLE -STARTLINE +INVISIBLE T "number=1\nfor n in nuke.allNodes('Remove'):\n    n.knob('operation').setValue('remove')\n    if number <= 1:\n        number += 1\n        \n    else:\n        removeNode = nuke.toNode('Remove' + str(number))\n        removeNode_before = nuke.toNode('Remove' + str(number-1))\n        removeNode.setInput(0, removeNode_before)\n        number += 1   \nnuke.toNode(\"Output1\").setInput(0, removeNode)"}
 addUserKnob {22 switch_to_keep l INVISIBLE -STARTLINE +INVISIBLE T "n = nuke.thisNode()\nnum_in_gui = n\['_number_in_gui'].value()\nfor n in nuke.allNodes('Remove'):\n    n.knob('operation').setValue('keep')\n    nNode = n.name()\n    removeNode = nuke.toNode(nNode)\n    #print removeNode.name()\n    removeNode.setInput(0, nuke.toNode('Input'))\n  \nnum_of_CopyNodes=0 \nfor n in nuke.allNodes('Copy'):\n    num_of_CopyNodes += 1\nif num_in_gui <= 4:\n    nuke.toNode(\"Output1\").setInput(0, nuke.toNode('Remove1'))\nelse:\n    nuke.toNode(\"Output1\").setInput(0, nuke.toNode('Copy' + str(num_of_CopyNodes)))  \n"}
 addUserKnob {22 add_button l + -STARTLINE T "nTN = nuke.thisNode()\nlast_remove_name = nTN\['_last_remove_name'].value()\nlast_copy_name = nTN\['_last_copy_name'].value()\nnum_in_gui = nTN\['_number_in_gui'].value()\nnum_per_node = 4\nreference_posX = nuke.toNode(last_copy_name).xpos()\nreference_posY = nuke.toNode(last_copy_name).ypos()\nwith nTN:\n    removes = nuke.allNodes(\"Remove\")\n    num_nodes = len(removes)\n    node = nuke.toNode(last_remove_name)\n    copyNode = nuke.toNode(last_copy_name)\n    knob_space = num_in_gui / float(num_per_node)\n    nameRem1=nuke.toNode('Remove1').knob('operation').value()\n    #print knob_space\n    if knob_space >= num_nodes:     \n        node = nuke.createNode(\"Remove\", inpanel=False)\n        node\['channels'].setValue(\"None\")\n        node\['operation'].setValue(nameRem1)\n        node\['xpos'].setValue(reference_posX-150)\n        node\['ypos'].setValue(reference_posY+100)\n\n        copyNode = nuke.createNode(\"Copy\", inpanel=False)\n        copyNode\['channels'].setValue(\"all\")\n        copyNode\['from0'].setValue('none')\n        copyNode\['to0'].setValue('none')\n        node\['xpos'].setValue(reference_posX-100)\n        node\['ypos'].setValue(reference_posY+100)\n\n        node.setInput(0, nuke.toNode(\"Input\"))\n        if num_nodes == 1:\n            copyNode.setInput(0, nuke.toNode('Remove1'))\n        else:\n            copyNode.setInput(0, nuke.toNode(last_copy_name))\n\n        nuke.toNode(\"Output1\").setInput(0, copyNode)\n        num_nodes += 1\n        \n    used = (int((knob_space -1) * 4) % num_per_node)+1\n    #print used, knob_space\n    n = (num_nodes*num_per_node) - (num_per_node-used)\n    to_num = \"\"\n    if n-1:\n        to_num = n\n    else:\n        #print num_nodes, num_nodes-1, (num_nodes-1)*num_per_node, (num_nodes-1)*num_per_node + 1\n        to_num = (num_nodes-1)*num_per_node + 1\n    from_num = \"\"\n    node_channel_name = \"channels\"\n    bg_name = \"channels\"\n    if n % num_per_node -1:\n        from_num = (n % num_per_node)\n    if not n % num_per_node:\n        from_num = 4\n    credits_knob = nTN.knobs()\['mimmo']\n    nTN.removeKnob(credits_knob)\n    k = nuke.Link_Knob(bg_name+str(to_num),  'and' )\n    k.setLink( '%s.%s' % (node.name(), node_channel_name+str(from_num)))\n    nTN.addKnob(k)\n    credits = nuke.Text_Knob('mimmo','',\"yuri-carrara @2019\")\n    nTN.addKnob(credits)\n    nTN\['_last_remove_name'].setValue(node.name())\n    nTN\['_last_copy_name'].setValue(copyNode.name())\n    nTN\['_number_in_gui'].setValue(nTN\['_number_in_gui'].value()+1)\n    nTN\['_last_gui_name'].setValue(bg_name+str(to_num))\n    if nameRem1 == 'remove':\n        nTN\['switch_to_remove'].execute()\n    else:\n        pass"}
 addUserKnob {22 remove_button l - -STARTLINE T "nTN = nuke.thisNode()\nnum_per_node = 4\nlast_remove_name = nTN\['_last_remove_name'].value()\nlast_copy_name = nTN\['_last_copy_name'].value()\nnum_in_gui = nTN\['_number_in_gui'].value()\nlast_gui_name = nTN\['_last_gui_name'].value()\n#print int(last_gui_name\[8:])\nif num_in_gui <= 4:\n    pass\nelse:\n    with nTN:\n        removes = nuke.allNodes(\"Remove\")\n        num_nodes = len(removes)\n        node = nuke.toNode(last_remove_name)\n        copyNode = nuke.toNode(last_copy_name)\n        knob_space = num_in_gui / float(num_per_node)\n        #print knob_space\n        if knob_space <= (num_nodes-1) + .25:\n            last_copyNode = nuke.toNode(last_copy_name)\n            last_removeNode = nuke.toNode(last_remove_name)\n            last_copyNode_input = last_copyNode.input(0)\n            last_removeNode_input = last_copyNode.input(0).input(1)\n            if num_in_gui >= 8:\t\t\t\n                nTN\['_last_copy_name'].setValue(last_copyNode_input.name())\n                nuke.delete(last_copyNode)\n                nTN\['_last_remove_name'].setValue(last_removeNode_input.name())\n                nuke.delete(last_removeNode)\n            else:\n                nTN\['_last_copy_name'].setValue('Remove1')\n                nuke.delete(last_copyNode)\n                nTN\['_last_remove_name'].setValue('none')\n                nuke.delete(last_removeNode)\n\n        link_knob = nTN.knobs()\[last_gui_name]\n        nTN.removeKnob(link_knob)\n        del link_knob\n        nTN\['_number_in_gui'].setValue(num_in_gui-1)\n        nTN\['_last_gui_name'].setValue(\"channels\" + str(int(last_gui_name\[8:])-1))"}
 addUserKnob {41 channels T Remove1.channels}
 addUserKnob {41 channels2 l and T Remove1.channels2}
 addUserKnob {41 channels3 l and T Remove1.channels3}
 addUserKnob {41 channels4 l and T Remove1.channels4}
 addUserKnob {26 mimmo l "" +STARTLINE T "yuri-carrara @2019"}
}
 Input {
  inputs 0
  name Input
  xpos 219
  ypos -216
 }
 Remove {
  name Remove1
  tile_color 0xff0000ff
  xpos 219
  ypos -143
 }
 Output {
  name Output1
  xpos 219
  ypos 271
 }
end_group
