#! /Applications/Nuke11.2v4/Nuke11.2v4.app/Contents/MacOS/libnuke-11.2.4.dylib -nx
version 11.2 v4
Gizmo {
 tile_color 0x597fff
 label "output is deep"
 addUserKnob {20 tab_general l General}
 addUserKnob {26 title_noise l "██ NOISE ██"}
 addUserKnob {4 noise_type l "noise type" M {noise random}}
 addUserKnob {13 n_translate l translate}
 addUserKnob {13 n_scale l scale}
 n_scale {1 1 1}
 addUserKnob {7 n_uniform_scale l "uniform scale" R 0.01 10}
 n_uniform_scale 1
 addUserKnob {7 vol_transparency l "volume transparency" R 0.001 1}
 vol_transparency 1
 addUserKnob {6 invert l "invert pattern" +STARTLINE}
 invert true
 addUserKnob {26 ""}
 addUserKnob {7 gamma R 0.2 5}
 gamma 1
 addUserKnob {7 gain R 0 4}
 gain 1
 addUserKnob {7 offset R -1 1}
 addUserKnob {26 ""}
 addUserKnob {4 output_rgb l "output RGB" M {color "black and white"}}
 addUserKnob {20 t_VERSION l Version}
 addUserKnob {26 l_VERSION l <b>Version</b> T 1.0}
 addUserKnob {26 l_DATE l "<b>Date Modified</b>" T 2018/12/12}
 addUserKnob {26 l_CHANGELOG l <b>Changelog</b> T "1.0\n- create deep volumetric noise\n  from deep position"}
 addUserKnob {26 l_DEV l "<b>Developed by</b>" T "Mark Joey Tang"}
}
 Input {
  inputs 0
  name deep
  xpos 1
  ypos 2
 }
 Dot {
  name Dot1
  xpos 35
  ypos 82
 }
set Nce472ea0 [stack 0]
 DeepToImage {
  name DeepToImage1
  xpos -141
  ypos 79
 }
add_layer {deep_color deep_color.red deep_color.green deep_color.blue deep_color.alpha}
 AddChannels {
  channels deep_color
  name AddChannels1
  xpos -141
  ypos 136
 }
push $Nce472ea0
 DeepRecolor {
  inputs 2
  channels deep_color
  name DeepRecolor1
  xpos 1
  ypos 136
 }
 DeepExpression {
  chans0 deep_color
  chans1 none
  deep_color.red red
  deep_color.green green
  deep_color.blue blue
  deep_color.alpha alpha
  name DeepExpression4
  label "store color"
  xpos 1
  ypos 213
 }
 Dot {
  name Dot2
  xpos 35
  ypos 301
 }
set Nce483740 [stack 0]
 DeepExpression {
  temp_name0 pnx
  temp_expr0 "Pworld.red * (1/(\[value parent.n_uniform_scale]*\[value parent.n_scale.x])) + \[value parent.n_translate.x]"
  temp_name1 pny
  temp_expr1 "Pworld.green * (1/(\[value parent.n_uniform_scale]*\[value parent.n_scale.y])) + \[value parent.n_translate.y]"
  temp_name2 pnz
  temp_expr2 "Pworld.blue * (1/(\[value parent.n_uniform_scale]*\[value parent.n_scale.z])) + \[value parent.n_translate.z]"
  chans0 rgb
  chans1 none
  rgba.red "clamp( random(pnx, pny, pnz) )"
  rgba.green "clamp( random(pnx, pny, pnz) )"
  rgba.blue "clamp( random(pnx, pny, pnz) )"
  name DeepExpression1
  label random
  xpos 72
  ypos 387
 }
 DeepExpression {
  chans0 {rgba.red rgba.green rgba.blue -rgba.alpha}
  chans1 none
  rgba.red 1-red
  rgba.green 1-green
  rgba.blue 1-blue
  name DeepExpression6
  label invert
  xpos 72
  ypos 445
  disable {{!invert}}
 }
push $Nce483740
 DeepExpression {
  temp_name0 pnx
  temp_expr0 "Pworld.red * (1/(\[value parent.n_uniform_scale]*\[value parent.n_scale.x])) + \[value parent.n_translate.x]"
  temp_name1 pny
  temp_expr1 "Pworld.green * (1/(\[value parent.n_uniform_scale]*\[value parent.n_scale.y])) + \[value parent.n_translate.y]"
  temp_name2 pnz
  temp_expr2 "Pworld.blue * (1/(\[value parent.n_uniform_scale]*\[value parent.n_scale.z])) + \[value parent.n_translate.z]"
  chans0 rgb
  chans1 none
  rgba.red "clamp( noise(pnx, pny, pnz)+0.5 )"
  rgba.green "clamp( noise(pnx, pny, pnz)+0.5 )"
  rgba.blue "clamp( noise(pnx, pny, pnz)+0.5 )"
  name DeepExpression2
  label noise
  xpos -69
  ypos 386
 }
 DeepExpression {
  chans0 {rgba.red rgba.green rgba.blue -rgba.alpha}
  chans1 none
  rgba.red 1-red
  rgba.green 1-green
  rgba.blue 1-blue
  name DeepExpression5
  label invert
  xpos -69
  ypos 446
  disable {{!invert}}
 }
 Switch {
  inputs 2
  which {{noise_type}}
  name Switch1
  xpos -4
  ypos 546
 }
 DeepColorCorrect2 {
  gamma {{parent.gamma}}
  gain {{parent.gain}}
  offset {{parent.offset}}
  name DeepColorCorrect1
  xpos -4
  ypos 608
 }
 DeepExpression {
  chans0 {rgba.red rgba.green rgba.blue -rgba.alpha}
  chans1 none
  rgba.red clamp(r)
  rgba.green clamp(g)
  rgba.blue clamp(b)
  name DeepExpression7
  label clamp
  xpos -4
  ypos 706
 }
 DeepExpression {
  chans0 alpha
  chans1 none
  rgba.alpha "\[value parent.vol_transparency] < 1 ? clamp(1-(((1-red)+0.001) * \[value parent.vol_transparency])) : red"
  name DeepExpression3
  label "shuffle to alpha"
  xpos -4
  ypos 786
 }
 DeepExpression {
  chans0 rgb
  chans1 none
  rgba.red "deep_color.red * alpha"
  rgba.green "deep_color.green * alpha"
  rgba.blue "deep_color.blue * alpha"
  name DeepExpression10
  label "restore color"
  xpos -4
  ypos 852
  disable {{parent.output_rgb}}
 }
 DeepExpression {
  chans0 deep
  chans1 none
  deep.front "alpha < 0 ? -1 : deep.front"
  deep.back "alpha < 0 ? -1 : deep.back"
  name DeepExpression14
  label "alpha check"
  xpos -4
  ypos 924
 }
 DeepCrop {
  use_znear false
  zfar 0
  outside_zrange true
  bbox {0 0 {input.width} {input.height}}
  name DeepCrop1
  label "remove garbage"
  xpos -4
  ypos 1004
 }
 Output {
  name Output1
  xpos -4
  ypos 1125
 }
end_group
