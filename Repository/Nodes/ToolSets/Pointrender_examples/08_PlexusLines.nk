#! /Applications/Nuke11.2v3/Nuke11.2v3.app/Contents/MacOS/libnuke-11.2.3.dylib -nx
version 11.2 v3
define_window_layout_xml {<?xml version="1.0" encoding="UTF-8"?>
<layout version="1.0">
    <window x="324" y="264" w="3008" h="1647" screen="0">
        <splitter orientation="1">
            <split size="40"/>
            <dock id="" hideTitles="1" activePageId="Toolbar.1">
                <page id="Toolbar.1"/>
            </dock>
            <split size="2345" stretch="1"/>
            <splitter orientation="2">
                <split size="952"/>
                <dock id="" activePageId="Viewer.1">
                    <page id="Viewer.1"/>
                </dock>
                <split size="670"/>
                <dock id="" activePageId="DAG.1">
                    <page id="DAG.1"/>
                    <page id="Curve Editor.1"/>
                    <page id="DopeSheet.1"/>
                </dock>
            </splitter>
            <split size="615"/>
            <dock id="" activePageId="Properties.1">
                <page id="Properties.1"/>
                <page id="uk.co.thefoundry.backgroundrenderview.1"/>
            </dock>
        </splitter>
    </window>
</layout>
}
Root {
 inputs 0
 name /Users/madshagbarth/Documents/Projects/PointRender/Release/ExampleScenes/08_PlexusLines.nk
 frame 138
 last_frame 150
 format "2048 1556 0 0 2048 1556 1 2K_Super_35(full-ap)"
 proxy_type scale
 proxy_format "1024 778 0 0 1024 778 1 1K_Super_35(full-ap)"
 colorManagement Nuke
 workingSpaceLUT linear
 monitorLut sRGB
 int8Lut sRGB
 int16Lut sRGB
 logLut Cineon
 floatLut linear
}
Axis2 {
 inputs 0
 rotate {0 {frame} 0}
 name Axis1
 xpos -260
 ypos 33
}
Camera2 {
 translate {3.499411821 3.501175404 3.499411821}
 rotate {-35.2780022 45.00000125 0}
 name Camera1
 xpos -256
 ypos 113
}
push 0
Radial {
 inputs 0
 area {512 389 1536 1167}
 plinear true
 name Radial1
 xpos -269
 ypos -91
}
Transform {
 scale {{curve x1 0.1 x100 3.014714241 x150 5.01471424}}
 center {1024 778}
 name Transform1
 xpos -269
 ypos -67
}
Group {
 inputs 0
 name Point_Plane1
 tile_color 0x434343ff
 note_font_color 0x55ffffff
 xpos -100
 ypos -130
 addUserKnob {20 User}
 addUserKnob {26 info_header l "" +STARTLINE T "Card Generator v1.0"}
 addUserKnob {26 info_basic l "Basic Settings"}
 addUserKnob {14 whx l "Point Density" R 0 100}
 whx {90 70}
 addUserKnob {14 scale R 0 100}
 scale {1 1}
 addUserKnob {4 orientation l Orientation M {XY XZ YZ}}
 orientation XZ
 addUserKnob {26 info_offsets l "Offset Settings"}
 addUserKnob {6 bool_enableOffset l "Enable Offset" +STARTLINE}
 bool_enableOffset true
 addUserKnob {7 float_offsetX l "Offset X"}
 float_offsetX 0.65
 addUserKnob {7 float_offsetY l "Offset Y"}
 float_offsetY 0.34
 addUserKnob {26 info_gab l "Gab Settings"}
 addUserKnob {6 bool_enableGab l "Enable Gab" +STARTLINE}
 addUserKnob {7 float_gabSize l "Gab Size"}
 float_gabSize 0.075
 addUserKnob {7 float_gabFrequency l "Gab Frequency"}
 float_gabFrequency 0.06
}
 Reformat {
  inputs 0
  type "to box"
  format "256 256 0 0 256 256 1 square_256"
  box_width {{parent.whx.w}}
  box_height {{parent.whx.h}}
  box_fixed true
  scale 0.08
  black_outside true
  name Reformat8
  xpos -586
  ypos 17
 }
 Expression {
  expr0 x
  expr1 y
  name Expression2
  xpos -586
  ypos 61
 }
 Expression {
  expr0 r+fmod(g,2)/multR
  expr1 g+fmod(r,2)/multG
  expr2 b
  name Expression4
  xpos -586
  ypos 107
  disable {{!parent.bool_enableOffset}}
  addUserKnob {20 User}
  addUserKnob {7 multR R 0 5}
  multR {{(pow(10,parent.float_offsetX))-0.99999999}}
  addUserKnob {7 multG R 0 5}
  multG {{(pow(10,parent.float_offsetY))-0.9999999}}
 }
 Expression {
  temp_name0 _size
  temp_expr0 size
  temp_name1 _delta
  temp_expr1 delta
  channel0 {-rgba.red -rgba.green -rgba.blue none}
  expr0 ((r+(_size-fmod(r,_size))/_delta)-(_size/_delta))*1.048
  expr1 ((g+(_size-fmod(g,_size))/_delta)-(_size/_delta))*1.048
  expr2 ((b+(_size-fmod(b,_size))/_delta)-(_size/_delta))*1.048
  name Expression3
  xpos -586
  ypos 144
  disable {{!parent.bool_enableGab}}
  addUserKnob {20 User}
  addUserKnob {7 size R 0 10}
  size {{parent.float_gabFrequency*100}}
  addUserKnob {7 delta R 0 10}
  delta {{pow(40,parent.float_gabSize)}}
 }
 Expression {
  expr0 ((r/width)-.5)*2
  expr1 ((g/height)-.5)*2
  expr2 ((b/height)-.5)*2
  expr3 1
  name Expression1
  xpos -586
  ypos 221
 }
 Grade {
  white {{parent.scale.w} {parent.scale.h} 1 1}
  black_clamp false
  name Grade1
  xpos -586
  ypos 262
 }
set Nb4a137c0 [stack 0]
 Shuffle {
  red blue
  green red
  blue green
  name Shuffle1
  xpos -480
  ypos 277
 }
 Grade {
  add {1 0 0 0}
  add_panelDropped true
  black_clamp false
  name Grade3
  xpos -480
  ypos 301
 }
push $Nb4a137c0
 Shuffle {
  red green
  green blue
  blue red
  name Shuffle5
  xpos -703
  ypos 287
 }
 Grade {
  add {0 1 0 0}
  add_panelDropped true
  black_clamp false
  name Grade2
  xpos -703
  ypos 311
 }
push $Nb4a137c0
 Grade {
  add {0 0 1 0}
  add_panelDropped true
  black_clamp false
  name Grade4
  xpos -586
  ypos 303
 }
 Switch {
  inputs 3
  which {{parent.orientation}}
  name Switch1
  xpos -586
  ypos 339
 }
add_layer {pos pos.red pos.green pos.blue pos.alpha}
 Shuffle {
  black white
  white white
  red2 white
  green2 white
  out pos
  out2 rgba
  name Shuffle2
  xpos -586
  ypos 385
 }
 ModifyMetaData {
  metadata {
   {set pointrender/n_points "\[expr \[value parent.whx.h]*\[value parent.whx.w]]"}
   {set pointrender/gen_type 1}
  }
  name SetMetaData
  xpos -586
  ypos 409
 }
 Grade {
  white {{1/((parent.whx.w*parent.whx.h)/40000)}}
  black_clamp false
  name Grade9
  xpos -586
  ypos 433
 }
 Crop {
  box {0 0 {parent.whx.w} {parent.whx.h}}
  crop false
  name Crop1
  xpos -586
  ypos 470
 }
 Output {
  name Output1
  xpos -586
  ypos 554
 }
end_group
Group {
 inputs 2
 name Point_Fractal_Evolve1
 tile_color 0x434343ff
 note_font_color 0x55ffffff
 xpos -100
 ypos -67
 addUserKnob {20 User}
 addUserKnob {7 Resolution l INVISIBLE +INVISIBLE R 1e-05 1}
 Resolution 1
 addUserKnob {41 filter l INVISIBLE +INVISIBLE T Reformat2.filter}
 addUserKnob {26 info_evolution l "Evolve Settings"}
 addUserKnob {7 Evolution R 0 50}
 Evolution {{frame/2}}
 addUserKnob {3 FadeIn l "Fade In" -STARTLINE}
 addUserKnob {3 FadeOut l Out -STARTLINE}
 FadeOut 20
 addUserKnob {7 Drag}
 Drag 0.205
 addUserKnob {13 Gravity}
 addUserKnob {13 InitialVelocity l "Initial Velocity"}
 addUserKnob {13 Flow}
 addUserKnob {26 devider_noise l "Noise Settings"}
 addUserKnob {4 NoiseType M {Regular Curl}}
 addUserKnob {6 Noise_Absolute l Absolute +STARTLINE}
 addUserKnob {3 Noise_Octaves l Octaves}
 Noise_Octaves 3
 addUserKnob {7 Noise_Gain l Gain}
 Noise_Gain 0.21
 addUserKnob {7 Noise_Lacunarity l Lacunarity R 0 4}
 Noise_Lacunarity 3.46
 addUserKnob {7 Noise_Amplitude l Amplitude}
 Noise_Amplitude 0.125
 addUserKnob {26 invis_devider_noise l "" +STARTLINE T " "}
 addUserKnob {26 Devider_Frequency l "Freq Control"}
 addUserKnob {19 Freq_Offset l "General Offset" R 0 10}
 Freq_Offset {0 0 0 0}
 addUserKnob {6 Freq_Offset_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_Offset_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_Offset_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_Offset_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_Offset_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_Offset_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {19 Freq_GeneralScale l "Genral Scale"}
 Freq_GeneralScale 0.2
 addUserKnob {6 Freq_GeneralScale_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_GeneralScale_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_GeneralScale_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_GeneralScale_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_GeneralScale_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_GeneralScale_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 invis_devider_freq l "" +STARTLINE T " "}
 addUserKnob {19 Freq_EvolveLow l "Evolve Low" R 0 10}
 Freq_EvolveLow {0 0.03 0 0}
 addUserKnob {6 Freq_EvolveLow_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_EvolveLow_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_EvolveLow_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_EvolveLow_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_EvolveLow_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_EvolveLow_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_ScaleLow_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {19 Freq_EvolveHigh l "Evolve High"}
 Freq_EvolveHigh {0 0 0 0}
 addUserKnob {6 Freq_EvolveHigh_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_EvolveHigh_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_EvolveHigh_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_EvolveHigh_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_EvolveHigh_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_EvolveHigh_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 invis_devider_freq2 l "" +STARTLINE T " "}
 addUserKnob {19 Freq_ScaleLow l "Scale Low"}
 Freq_ScaleLow {1 1 1 1}
 addUserKnob {6 Freq_ScaleLow_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_ScaleLow_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_ScaleLow_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_ScaleLow_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_ScaleLow_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_ScaleLow_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {19 Freq_ScaleHigh l "Scale High"}
 Freq_ScaleHigh {10 10 10 0}
 addUserKnob {6 Freq_ScaleHigh_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_ScaleHigh_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_ScaleHigh_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_ScaleHigh_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_ScaleHigh_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Freq_ScaleHigh_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 invis_devider_freq3 l "" +STARTLINE T " "}
 addUserKnob {26 Curve l "Curve Noise"}
 addUserKnob {6 CurveNoise_Enable l Enable +STARTLINE}
 addUserKnob {6 CurveNoise_Invert l Invert -STARTLINE}
 addUserKnob {7 CurveGain l "Curve Gain" R -10 10}
 CurveGain 1
 addUserKnob {7 CurveOffset R -2 2}
 addUserKnob {26 ""}
 addUserKnob {6 InputMask l "Enable Velocity Multiplier Map" +STARTLINE}
 InputMask true
}
 Input {
  inputs 0
  name InputVelMultMap
  xpos -205
  ypos 1
  number 1
 }
 Reformat {
  type "to box"
  box_width {{parent.InputFormat.box.r}}
  box_height {{parent.InputFormat.box.t}}
  box_fixed true
  resize distort
  name Reformat3
  xpos -205
  ypos 48
 }
 Expression {
  expr3 1
  name Expression3
  xpos -205
  ypos 115
  disable {{parent.InputMask}}
 }
 Dot {
  name Dot3
  xpos -171
  ypos 171
 }
 Input {
  inputs 0
  name Input1
  xpos -582
  ypos 8
 }
 Crop {
  box {0 0 {width} {height}}
  reformat true
  crop false
  name InputFormat
  xpos -582
  ypos 50
 }
 Dot {
  name Dot1
  xpos -548
  ypos 114
 }
set Nb4abca30 [stack 0]
 Reformat {
  type scale
  scale {{parent.Resolution}}
  center false
  filter Impulse
  pbb true
  name Reformat1
  xpos -459
  ypos 111
 }
 Shuffle {
  in pos
  name Shuffle1
  xpos -317
  ypos 110
 }
 BlinkScript {
  inputs 2
  kernelSourceFile /Users/madshagbarth/Github/Nuke-Private/Blink/PointRender/Modify/Fractal_v04.cpp
  recompileCount 150
  ProgramGroup 1
  KernelDescription "2 \"Noise4D\" iterate pixelWise 059319502d2a47df51d953df360777bf037f7a1fe230306af28dc171409030ad 3 \"src\" Read Point \"vel_mult\" Read Point \"dst\" Write Point 26 \"evolution\" Float 1 AACAPw== \"particleDrag\" Float 1 AAAAAA== \"absNoise\" Bool 1 AA== \"curlNoise\" Bool 1 AA== \"curveNoise\" Bool 1 AA== \"curveInvert\" Bool 1 AA== \"curveGain\" Float 1 AACAPw== \"curveOffset\" Float 1 AACAPw== \"Octaves\" Int 1 CgAAAA== \"Gain\" Float 1 AAAAPw== \"Lacunarity\" Float 1 AAAAQA== \"Gamma\" Float 1 AAAAPw== \"amplitude\" Float 1 AAAAPw== \"Offset\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== \"Scale\" Float 4 AACAPwAAgD8AAIA/AACAPw== \"suboffset\" Float 4 AACAPwAAgD8AAIA/AACAPw== \"topoffset\" Float 4 AACAPwAAgD8AAIA/AACAPw== \"subscale\" Float 4 AACAPwAAgD8AAIA/AACAPw== \"topscale\" Float 4 AACAPwAAgD8AAIA/AACAPw== \"gravity\" Float 3 AAAAAJqZmb4AAAAAAAAAAA== \"initialVelocity\" Float 3 AAAAAJqZmb4AAAAAAAAAAA== \"flow\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"entryAmplitude\" Float 1 AACAPw== \"exitAmplitude\" Float 1 AACAPw== \"ampEntryFrame\" Int 1 AAAAAA== \"ampExitFrame\" Int 1 CAAAAA== 26 \"evolution\" 1 1 \"particleDrag\" 1 1 \"absNoise\" 1 1 \"curlNoise\" 1 1 \"curveNoise\" 1 1 \"curveInvert\" 1 1 \"curveGain\" 1 1 \"curveOffset\" 1 1 \"octaves\" 1 1 \"gain\" 1 1 \"lacunarity\" 1 1 \"gamma\" 1 1 \"amplitude\" 1 1 \"offset\" 4 1 \"scale\" 4 1 \"suboffset\" 4 1 \"topoffset\" 4 1 \"subscale\" 4 1 \"topscale\" 4 1 \"gravity\" 3 1 \"initialVelocity\" 3 1 \"flow\" 3 1 \"entryAmplitude\" 1 1 \"exitAmplitude\" 1 1 \"ampEntryFrame\" 1 1 \"ampExitFrame\" 1 1 0"
  kernelSource "//Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n//Ported by Mads Hagbarth Lund 2014\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\n\n//=========================\n//fastfloor\n//=========================\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\n\n//=========================\n//Frac\n//=========================\ninline float Frac(float a_X)\n\{\n    return a_X-floor(a_X);\n\}\n\n//-------------------------------------\n// Smoothstep\n//-------------------------------------\ninline float smoothstep(float edge0, float edge1, float x)\n\{\n    float t;  /* Or genDType t; */\n    t = clamp((x - edge0) / (edge1 - edge0), 0.0f, 1.0f);\n    return t * t * (3.0f - 2.0f * t);\n\}\n\n//-------------------------------------\n// basic mix function\n//-------------------------------------\ninline float3 mix(float3 _X,float3 _Y,float _A)\{\n  return _X*(1.0f-_A)+_Y*_A;\n\}\n\n//=========================\n//hash\n//=========================\nfloat hash( float n ) \{ return Frac(sin(n)*753.5453123f); \}\n\n\n//=========================\n//cheap_noise\n//=========================\ninline float cheap_noise( float x ,float y, float z )\n\{\n    float3 p = floor(float3(x,y,z));\n    float3 f = float3(Frac(x),Frac(y),Frac(z));\n    f = f*f*(3.0f-2.0f*f);\n    \n    float n = p.x + p.y*157.0f + 113.0f*p.z;\n    return _fc_lerp(_fc_lerp(_fc_lerp( hash(n+  0.0f), hash(n+  1.0f),f.x),\n                   _fc_lerp( hash(n+157.0f), hash(n+158.0f),f.x),f.y),\n               _fc_lerp(_fc_lerp( hash(n+113.0f), hash(n+114.0f),f.x),\n                   _fc_lerp( hash(n+270.0f), hash(n+271.0f),f.x),f.y),f.z);\n\}\n\n//=========================\n//raw_noise_4d\n//=========================\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n   int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n   \};\n    float F4 = (sqrt(5.0f)-1.0f)/4.0f;\n    float G4 = (5.0f-sqrt(5.0f))/20.0f;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\n\n\n\n\nkernel Noise4D : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src;\n  Image<eRead, eAccessPoint, eEdgeClamped> vel_mult;\n  Image<eWrite, eAccessPoint> dst;\nparam:\n    float evolution;\n    float particleDrag;\n    bool absNoise;\n    bool curlNoise;\n    bool curveNoise;\n    bool curveInvert;\n    float curveGain;\n    float curveOffset;\n    int octaves;\n    float gain;\n    float lacunarity;\n    float gamma;\n    float amplitude;\n    float4 offset;\n    float4 scale;\n    float4 suboffset;\n    float4 topoffset;\n    float4 subscale;\n    float4 topscale;\n    float3 gravity;\n    float3 initialVelocity;\n    float3 flow;\n    float entryAmplitude;\n    float exitAmplitude;\n    int ampEntryFrame;\n    int ampExitFrame;\n\n\n  void define() \{\n        defineParam (evolution, \"evolution\", 1.0f);  \n        defineParam (absNoise, \"absNoise\", false);    \n        defineParam (curlNoise, \"curlNoise\", false);  \n        defineParam (curveNoise, \"curveNoise\", false);    \n        defineParam (curveInvert, \"curveInvert\", false);   \n        defineParam (curveGain, \"curveGain\", 1.0f);\n        defineParam (curveOffset, \"curveOffset\", 1.0f);\n        defineParam (octaves, \"Octaves\", 10);\n        defineParam (gain, \"Gain\", 0.5f);\n        defineParam (lacunarity, \"Lacunarity\", 2.0f);\n        defineParam (gamma, \"Gamma\", 0.5f);\n        defineParam (amplitude, \"amplitude\", 0.5f);\n        defineParam(offset, \"Offset\", float4(0.0f, 0.0f, 0.0f,0.0f));\n        defineParam(scale, \"Scale\", float4(1.0f, 1.0f, 1.0f,1.0f));\n        defineParam(suboffset, \"suboffset\", float4(1.0f, 1.0f, 1.0f,1.0f));\n        defineParam(topoffset, \"topoffset\", float4(1.0f, 1.0f, 1.0f,1.0f));\n        defineParam(subscale, \"subscale\", float4(1.0f, 1.0f, 1.0f,1.0f));\n        defineParam(topscale, \"topscale\", float4(1.0f, 1.0f, 1.0f,1.0f));   \n        defineParam (gravity, \"gravity\", float3(0.0f, -0.3f, 0.0f));\n        defineParam (initialVelocity, \"initialVelocity\", float3(0.0f, -0.3f, 0.0f));\n        defineParam (flow, \"flow\", float3(0.0f, 0.0f, 0.0f));\n        defineParam (ampEntryFrame, \"ampEntryFrame\", 0);\n        defineParam (ampExitFrame, \"ampExitFrame\", 8);\n        defineParam (entryAmplitude, \"entryAmplitude\", 1.0f);\n        defineParam (exitAmplitude, \"exitAmplitude\", 1.0f);          \n\n  \}\n\n\n\n//=========================\n//Normal Noise\n//=========================\nfloat octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w ) \n\{\n    float total = 0.0f;\n    float current;\n    float last = 1.0f;\n    float frequency = scale;\n    float amplitude = 1.0f;\n    float maxAmplitude = 0.0f;\n    float4 Tempoffset;\n    float4 Tempscale;\n\n\n    for( int i=0; i < octaves; i++ ) \{\n        Tempscale = (topscale * (i/(octaves-1.0f)))+(subscale * (1-(i/(octaves-1.0f))));       \n        Tempoffset = (topoffset * (i/(octaves-1.0f)))+(suboffset * (1-(i/(octaves-1.0f))));\n        current = (float)raw_noise_4d(   ((x*Tempscale.x)+Tempoffset.x) * frequency, \n                                        ((y*Tempscale.y)+Tempoffset.y) * frequency, \n                                        ((z*Tempscale.z)+Tempoffset.z) * frequency, \n                                        ((w*Tempscale.w)+Tempoffset.w) * frequency \n                                        ) * amplitude;\n        if (i == 0 && curveNoise)\{\n            if (curveInvert)\{\n                last = 0.5f-current;  \n            \}\n            else\{\n                last = current;  \n            \}\n               \n        \}\n        current = curveNoise?current*((last+curveOffset)*curveGain):current;\n        total += absNoise?fabs(current):current;\n        frequency *= 2.0f;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n\n    \}\n    return float(total / maxAmplitude);\n\}\n\n\n\n//=========================\n//CurlNoiseFull\n//=========================\nfloat3 CurlNoiseFull( const float octaves, const float persistence, const float scale, const float x, const float y, const float z) \n\{\n    float3 total = float3(0.0f);\n    float3 current;\n    float3 last = float3(1.0f);\n    float frequency = scale;\n    float amplitude = 1.0f;\n    float maxAmplitude = 0.0f;\n    float4 Tempoffset;\n    float4 Tempscale;\n\n\n    for( int i=0; i < octaves; i++ ) \{\n        Tempscale = (topscale * (i/(octaves-1.0f)))+(subscale * (1-(i/(octaves-1.0f))));       \n        Tempoffset = (topoffset * (i/(octaves-1.0f)))+(suboffset * (1-(i/(octaves-1.0f))));\n        current = ComputeCurlFast(   ((x*Tempscale.x)+Tempoffset.x) * frequency, \n                                        ((y*Tempscale.y)+Tempoffset.y) * frequency, \n                                        ((z*Tempscale.z)+Tempoffset.z) * frequency) * amplitude;\n        if (i == 0 && curveNoise)\{\n            if (curveInvert)\{\n                last = 0.5f-current;  \n            \}\n            else\{\n                last = current;  \n            \}\n               \n        \}\n        current = curveNoise?current*((last+curveOffset)*curveGain):current;\n        total += absNoise?fabs(current):current;\n        frequency *= 2.0f;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n\n    \}\n    return total / maxAmplitude;\n\}\n\n//=========================\n//ComputeCurlFast\n//=========================\nfloat3 ComputeCurlFast(float   x,  float   y,  float   z)  \n\{   \n                float   eps =   1.0f;    \n                float   n1, n2, a,  b;  \n                float3 curl;   \n                n1  =   cheap_noise(x,    y   +   eps,    z); \n                n2  =   cheap_noise(x,    y   -   eps,    z); \n                a   =   (n1 -   n2)/(2.0f   *   eps);   \n                    \n                n1  =   cheap_noise(x,    y,  z   +   eps);   \n                n2  =   cheap_noise(x,    y,  z   -   eps);   \n                b   =   (n1 -   n2)/(2.0f   *   eps);   \n                    \n                curl.x  =   a   -   b;  \n                    \n                n1  =   cheap_noise(x,    y,  z   +   eps);   \n                n2  =   cheap_noise(x,    y,  z   -   eps);   \n                a   =   (n1 -   n2)/(2.0f   *   eps);   \n                    \n                n1  =   cheap_noise(x +   eps,    y,  z); \n                n2  =   cheap_noise(x +   eps,    y,  z); \n                b   =   (n1 -   n2)/(2.0f   *   eps);   \n                    \n                curl.y  =   a   -   b;  \n                n1  =   cheap_noise(x +   eps,    y,  z); \n                n2  =   cheap_noise(x -   eps,    y,  z); \n                a   =   (n1 -   n2)/(2.0f   *   eps);   \n        \n                n1  =   cheap_noise(x,    y   +   eps,    z); \n                n2  =   cheap_noise(x,    y   -   eps,    z); \n                b   =   (n1 -   n2)/(2.0f  *   eps);   \n                    \n                curl.z  =   a   -   b;    \n                return  curl;   \n\}    \n\n\n//=========================\n//noise\n//=========================\n//Noise Only Code\nfloat noise( float3 x )\n\{\n    float3 p = floor(x);\n    float3 f = float3(Frac(x.x),Frac(x.y),Frac(x.z));\n    f = f*f*(3.0f-2.0f*f);\n    \n    float n = p.x + p.y*157.0f + 113.0f*p.z;\n    return _fc_lerp(_fc_lerp(_fc_lerp( hash(n+  0.0f), hash(n+  1.0f),f.x),\n                   _fc_lerp( hash(n+157.0f), hash(n+158.0f),f.x),f.y),\n               _fc_lerp(_fc_lerp( hash(n+113.0f), hash(n+114.0f),f.x),\n                   _fc_lerp( hash(n+270.0f), hash(n+271.0f),f.x),f.y),f.z);\n\}\n//=========================\n//complexNoise\n//=========================\nfloat complexNoise(float3 x)\n\{\n    //Noise Only Code\n    float3 q = 8.0f*x;\n    float f = 0.5000f*noise( q ); \n    q = q*2.01f;\n    f += 0.2500f*noise( q ); \n    q = q*2.02f;\n    f += 0.1250f*noise( q ); \n    q = q*2.03f;\n    f = f + 0.0625f*noise( q ); \n    q = q*2.01f;        \n    return f;       \n    //End Of Noise Only Code\n\}\n\n\n\n//This function is used to calculate the screenspace coordinates.\nvoid applyForceb( float3 &p_position, float3 &p_velocity, const float3 _force,const float3 _lastforce, const float spawntime) \{\n    p_velocity += mix(_lastforce,_force,spawntime);\n    p_velocity += gravity;\n    p_velocity *= (1.0f-(particleDrag));\n    p_position += (p_velocity*spawntime);\n\}\n\n//This function is used to calculate the screenspace coordinates.\nvoid applyForce( float3 &p_position,float3 &p_oldPosition,  float3 &p_velocity, const float3 _force,const float3 _lastforce, const float spawntime) \{\n    p_velocity = mix(_lastforce,_force,spawntime);\n    p_velocity += gravity;\n    //p_velocity *= (1.0f-(particleDrag));\n    float3 _temp = p_position;\n    p_position += (p_position-p_oldPosition)*(1.0f-particleDrag)+(p_velocity*spawntime);\n    p_oldPosition = _temp;\n\}\n\n//This function is used to calculate the screenspace coordinates.\nvoid applyForcec( float3 &p_position,float3 &p_oldPosition,  float3 &p_velocity, const float3 _force,const float3 _lastforce, const float spawntime) \{\n    p_velocity = _force;\n    p_velocity += gravity;\n    //p_velocity *= (1.0f-(particleDrag));\n    float3 _temp = p_position;\n    p_position += ((p_position-p_oldPosition)*(1.0f-particleDrag))+p_velocity*spawntime;\n    p_oldPosition = _temp;\n\}\n\n\n\n  void process() \{\n    float4 input = src();\n    float3 p_position = float3(input.x,input.y,input.z);\n    float3 p_oldPosition = p_position;\n\n    float3 output;\n    float3 lastSmaple = float3(0.0f);\n    float3 p_velocity = initialVelocity;\n    p_position += p_velocity;\n    float3 _force;\n    float3 _lastforce = float3(0.0f);\n    float step; //used to find the substep for amplitude multiplication\n    float ceiling;\n    for( int i=0; i < int(floor(evolution)); i++ ) \{\n\n        //Here we calculate how far we are between the ampEntry and ampExit frame.\n        //This is going to be used to add a smooth fadeout \n        step = (max((float)i,(float)ampEntryFrame)-(float)ampEntryFrame)/((float)ampExitFrame-(float)ampEntryFrame);\n        step = max(min(step,1.0f),0.0f);\n        if (i<ampExitFrame)\n        \{\n\n            if (curlNoise)\{\n                _force.x = complexNoise(float3(( p_position.x * scale.x ) + (offset.x+(i*flow.x)),( p_position.y * scale.y ) + (offset.y+(i*flow.y)),( p_position.z * scale.z ) + (offset.z+(i*flow.z)) ))-0.48f;\n                _force.y = complexNoise(float3(( p_position.x * scale.x ) + (offset.x+(i*flow.x)),( p_position.y * scale.y ) + (offset.y+(i*flow.y)),( p_position.z * scale.z ) + (offset.z+(i*flow.z))+100.0f ))-0.48f;\n                _force.z = complexNoise(float3(( p_position.x * scale.x ) + (offset.x+(i*flow.x)),( p_position.y * scale.y ) + (offset.y+(i*flow.y)),( p_position.z * scale.z ) + (offset.z+(i*flow.z))+200.0f ))-0.48f;\n                _force *= amplitude;\n                //_force = CurlNoiseFull(float(octaves), gain, lacunarity, ( p_position.x * scale.x ) + offset.x, ( p_position.y  * scale.y ) + offset.y,  ( p_position.z * scale.z ) + offset.z) * amplitude;\n            \}\n            else \{\n                _force.x = (float)octave_noise_4d(float(octaves), gain, lacunarity, ( p_position.x * scale.x ) + (offset.x+(i*flow.x)), ( p_position.y * scale.y ) + (offset.y+(i*flow.y)),  ( p_position.z * scale.z ) + (offset.z+(i*flow.z)), ( input.w * scale.w ) + (offset.w)) * amplitude;\n                _force.y = (float)octave_noise_4d(float(octaves), gain, lacunarity, ( p_position.x * scale.x ) + (offset.x+(i*flow.x)), ( p_position.y  * scale.y ) + (offset.y+(i*flow.y)),  ( p_position.z * scale.z ) + (offset.z+(i*flow.z)), ( input.w * scale.w ) + (offset.w) + 10000.0f) * amplitude;\n                _force.z = (float)octave_noise_4d(float(octaves), gain, lacunarity, ( p_position.x * scale.x ) + (offset.x+(i*flow.x)), ( p_position.y  * scale.y ) + (offset.y+(i*flow.y)),  ( p_position.z * scale.z ) + (offset.z+(i*flow.z)), ( input.w * scale.w ) + (offset.w) + 20000.0f) * amplitude;\n            \}\n            _force *= 1.0f-step;\n        \}\n        else\n        \{\n            _force *= 0.0f;\n            /* code */\n        \}\n        if (float(i+2)>evolution)\{\n            ceiling = (evolution)-floor(evolution);\n        \}\n        else \{\n            ceiling = 1.0f;\n        \}\n        _force = _force * vel_mult(3);\n        //applyForcec(p_position,p_oldPosition,p_velocity,_force,_lastforce,ceiling); \n        applyForceb(p_position,p_velocity,_force,_lastforce,ceiling); \n\n        _lastforce = _force;\n        \n    \}\n\n    dst() = float4(p_position.x,p_position.y,p_position.z,input.w);\n\}\n\};"
  rebuild ""
  Noise4D_evolution {{parent.Evolution}}
  Noise4D_particleDrag {{parent.Drag}}
  Noise4D_curlNoise {{parent.NoiseType}}
  Noise4D_curveNoise {{parent.CurveNoise_Enable}}
  Noise4D_curveInvert {{parent.CurveNoise_Invert}}
  Noise4D_curveGain {{parent.CurveGain}}
  Noise4D_curveOffset {{parent.CurveOffset}}
  Noise4D_Octaves {{parent.Noise_Octaves}}
  Noise4D_Gain {{parent.Noise_Gain}}
  Noise4D_Lacunarity {{parent.Noise_Lacunarity}}
  Noise4D_Gamma 0
  Noise4D_amplitude {{parent.Noise_Amplitude}}
  Noise4D_Offset {{parent.Freq_Offset} {parent.Freq_Offset} {parent.Freq_Offset} {parent.Freq_Offset}}
  Noise4D_Scale {{parent.Freq_GeneralScale} {parent.Freq_GeneralScale} {parent.Freq_GeneralScale} {parent.Freq_GeneralScale}}
  Noise4D_suboffset {{(frame*parent.Freq_EvolveLow.r)/50} {(frame*parent.Freq_EvolveLow.g)/50} {(frame*parent.Freq_EvolveLow.b)/50} {(frame*parent.Freq_EvolveLow.a)/50}}
  Noise4D_topoffset {{(frame*parent.Freq_EvolveHigh.r)/10} {(frame*parent.Freq_EvolveHigh.g)/10} {(frame*parent.Freq_EvolveHigh.b)/10} {(frame*parent.Freq_EvolveHigh.a)/10}}
  Noise4D_subscale {{parent.Freq_ScaleLow} {parent.Freq_ScaleLow} {parent.Freq_ScaleLow} {parent.Freq_ScaleLow}}
  Noise4D_topscale {{parent.Freq_ScaleHigh} {parent.Freq_ScaleHigh} {parent.Freq_ScaleHigh} {parent.Freq_ScaleHigh}}
  Noise4D_gravity {{parent.Gravity/100} {parent.Gravity/100} {parent.Gravity/100}}
  Noise4D_initialVelocity {{parent.InitialVelocity} {parent.InitialVelocity} {parent.InitialVelocity}}
  Noise4D_flow {{parent.Flow/100} {parent.Flow/100} {parent.Flow/100}}
  Noise4D_ampEntryFrame {{parent.FadeIn}}
  Noise4D_ampExitFrame {{parent.FadeOut}}
  rebuild_finalise ""
  name Noise4D3
  xpos -317
  ypos 164
 }
 Expression {
  expr0 abs(r)
  expr1 abs(g)
  expr2 abs(b)
  name Expression2
  xpos -317
  ypos 228
  disable {{!parent.Noise_Absolute}}
 }
 Shuffle {
  out pos
  name Shuffle2
  xpos -317
  ypos 330
 }
 Reformat {
  type scale
  scale {{1/parent.Reformat1.scale}}
  center false
  pbb true
  name Reformat2
  xpos -456
  ypos 331
 }
push $Nb4abca30
 Merge2 {
  inputs 2
  operation copy
  bbox B
  Achannels pos
  Bchannels pos
  output pos
  name Merge1
  xpos -582
  ypos 326
 }
 Output {
  name Output1
  xpos -582
  ypos 497
 }
end_group
Group {
 name Point_ProximityShader1
 tile_color 0x434343ff
 note_font_color 0x55ffffff
 xpos -100
 ypos 27
 addUserKnob {20 User}
 addUserKnob {26 info l "" +STARTLINE T "Point Proximity Shader v1.0\n\nCalcualtes the point density of 2D based generators, \nsuch as: Plane, Sphere, Torus, Cylinder."}
 addUserKnob {26 devider_general l "<b><font color=#70EE70>General</font><b>"}
 addUserKnob {7 Mag l Magnitude R 0 20}
 Mag 10
}
 BackdropNode {
  inputs 0
  name BackdropNode5
  tile_color 0x388e8e00
  label Proximity
  note_font_size 42
  xpos -628
  ypos 326
  bdwidth 224
  bdheight 161
 }
 Input {
  inputs 0
  name Input1
  xpos -580
  ypos 50
 }
 Shuffle {
  in pos
  name Shuffle5
  xpos -580
  ypos 120
 }
 Dot {
  name Dot16
  xpos -546
  ypos 284
 }
 BlinkScript {
  recompileCount 10
  ProgramGroup 1
  KernelDescription "2 \"BoxBlur2D\" iterate pixelWise 4502aee56a1693e2b562d021931cada75d544ad3ccd6712168e5db6f1a307578 2 \"src\" Read Ranged2D \"dst\" Write Point 0 0 2 \"srcrangeMin\" Int 2 1 AAAAAAAAAAA= \"srcrangeMax\" Int 2 1 AAAAAAAAAAA="
  kernelSource "kernel BoxBlur2D : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRanged2D, eEdgeClamped> src;\n  Image<eWrite, eAccessPoint> dst;\n\n  void init() \{\n    //Set the range we need to access from the source \n    src.setRange(-1, -1, 1, 1);\n  \}\n\n  void process() \{\n    float sum = 0.0f;\n    float xd,yd,zd,distance;\n    float4 centerSample = src(0,0);\n    float4 sample;\n    for(int j = -1; j <= 1; j++)\n      for(int i = -1; i <= 1; i++)\n \tsample = src(i, j);\n\txd = centerSample.x-sample.x;\n\tyd = centerSample.y-sample.y;\n\tzd = centerSample.z-sample.z;\n\tdistance = sqrt(xd*xd + yd*yd + zd*zd);\n\tsum += distance;\n    dst() = sum;\n  \}\n\};"
  rebuild ""
  rebuild_finalise ""
  name BlinkScript1
  selected true
  xpos -580
  ypos 387
 }
 Multiply {
  channels rgb
  value {{parent.Mag}}
  name Multiply1
  xpos -580
  ypos 419
 }
 Dot {
  name Dot22
  xpos -546
  ypos 582
 }
 Output {
  name Output1
  xpos -580
  ypos 685
 }
end_group
Group {
 inputs 3
 name Point_Render1
 tile_color 0x434343ff
 label "R:\[metadata pointrender/n_points] points"
 note_font_color 0x55ffffff
 xpos -100
 ypos 130
 addUserKnob {20 User l "Point Render"}
 addUserKnob {26 Info l "" +STARTLINE T "<font color=#80dddd size=\\\"7\\\">P</font><font color=#90dede size=\\\"7\\\">o</font><font color=#a0dfdf size=\\\"7\\\">i</font><font color=#b0e0e0 size=\\\"7\\\">n</font><font color=#c0e1e1 size=\\\"7\\\">t</font><font color=#b0e0e0 size=\\\"7\\\">R</font><font color=#a0dfdf size=\\\"7\\\">ender</font><font color=#90dede size=\\\"3\\\">v</font><font color=#80dddd size=\\\"2\\\">0.9b</font>"}
 addUserKnob {26 infob l "" +STARTLINE T "<font color=#80dddd size=\\\"2\\\">by Mads Hagbarth Damsbo</font>"}
 addUserKnob {26 Devider_Stats l "<b><font color=#70EE70>Stats</font><b>"}
 addUserKnob {3 PointCount l "Point Count" +DISABLED}
 PointCount {{DataFetch.n_particles}}
 addUserKnob {4 Generator l Source: -STARTLINE M {Unknown Plane Sphere Grid Torus Cylinder "" ""}}
 Generator {{DataFetch.gentype x16 2 x88 2}}
 addUserKnob {26 devider_general l "<b><font color=#70EE70>General</font><b>"}
 addUserKnob {4 RenderMode l "Render Mode" M {"Point Render" "Wire Render" "Facet Render"}}
 RenderMode "Wire Render"
 addUserKnob {7 FocalLength l "Focal Length" R 0 200}
 FocalLength 40
 addUserKnob {7 AlphaMultiplier l Exposure R 0 8}
 AlphaMultiplier 1
 addUserKnob {6 General_UseTexture l "Use Texture Input" +STARTLINE}
 addUserKnob {6 UseOcclusionMap l "Use Occlusion Map" t "Enable the Occlusion map input." -STARTLINE}
 addUserKnob {26 devider_cc l "<b><font color=#70EE70>Preview</font><b>"}
 addUserKnob {6 FastPreview l "Fast Preview" +STARTLINE}
 addUserKnob {6 HighlightCompression l "Hilight Compression" +STARTLINE}
 HighlightCompression true
 addUserKnob {7 HighlightCeiling l "Highlight Ceiling" R 1 10}
 HighlightCeiling 1.15
 addUserKnob {7 Compression -STARTLINE R 0 5}
 Compression 1
 addUserKnob {26 devider_format l "<b><font color=#70EE70>Format</font><b>"}
 addUserKnob {41 format l "output format" T Settings_Format.format}
 addUserKnob {20 WireRender l "Render Settings"}
 addUserKnob {26 devider_wirerender l "<b><font color=#70EE70>Wire Rendering</font><b>"}
 addUserKnob {4 wire_type l INVISIBLE +INVISIBLE M {Nearest Normal ""}}
 wire_type Normal
 addUserKnob {6 connect_x l x -STARTLINE}
 connect_x true
 addUserKnob {6 connect_xy l xy -STARTLINE}
 connect_xy true
 addUserKnob {6 connect_y l y -STARTLINE}
 connect_y true
 addUserKnob {6 CloseX l "Close X" t "On spheres or round objects this closes the loop" +STARTLINE}
 addUserKnob {6 CloseY l "Close Y" t "On spheres or round objects this closes the loop" -STARTLINE}
 addUserKnob {7 wire_maxdistance l "Max Distance" R 0 10}
 wire_maxdistance 0.7
 addUserKnob {3 wire_connections l "Max Connections"}
 wire_connections 4
 addUserKnob {7 wire_Threshold l Threshold R 0 2}
 wire_Threshold 0.04
 addUserKnob {26 devider_facet l "<b><font color=#70EE70>Fecet Settings</font><b>"}
 addUserKnob {6 facet_flatShading l "Flat Shading" +STARTLINE}
 addUserKnob {6 facet_depth l "Depth Buffer" -STARTLINE}
 addUserKnob {6 facet_front l "Front Face" +STARTLINE}
 facet_front true
 addUserKnob {6 facet_backface l "Back Face" -STARTLINE}
 facet_backface true
 addUserKnob {20 Fog_1 l Fog}
 addUserKnob {26 Devider_Fog l "<b><font color=#70EE70>Fog</font><b>"}
 addUserKnob {6 Fog +STARTLINE}
 Fog true
 addUserKnob {7 FogNear l "Fog Near" R 0 200}
 FogNear 3
 addUserKnob {7 FogFar l "Fog Far" R 0 200}
 FogFar 10
 addUserKnob {7 FogExponent l "Fog Exponent" R 0 8}
 FogExponent 1.4
 addUserKnob {20 DepthOfField l "Depth of Field"}
 addUserKnob {26 devider_dof l "<b><font color=#70EE70>Depth Of Field</font><b>"}
 addUserKnob {6 dof_enable l Enable +STARTLINE}
 dof_enable true
 addUserKnob {7 dof_focaldepth l "Focal Depth" R 0 40}
 dof_focaldepth 6.2
 addUserKnob {7 dof_dof l "Depth of Field" R 0 10}
 dof_dof 0.75
 addUserKnob {7 dof_maxSize l "Max Size"}
 dof_maxSize 0.5
 addUserKnob {7 dof_Aspect l "Aspect Ratio"}
 dof_Aspect 1
 addUserKnob {7 dof_bias l Bias R -3 3}
 dof_bias -0.2
 addUserKnob {4 Dof_Quality l Quality M {Low Medium High Extreme}}
 addUserKnob {20 MotionBlur}
 addUserKnob {26 devider_MotionBlur l "<b><font color=#70EE70>Motion Blur</font><b>"}
 addUserKnob {6 mb_enable l Enable +STARTLINE}
 mb_enable true
 addUserKnob {6 Fast l "Fast (Interpolated)" -STARTLINE}
 addUserKnob {3 Samples}
 Samples 4
 addUserKnob {7 Shutter R 0 2}
 Shutter 0.5
 addUserKnob {20 preview_3d l "3D Preview"}
 addUserKnob {6 Enable3DPreview l "Enable 3D Preview" t "Display a preview of the points in the Nuke 3D view." +STARTLINE}
 Enable3DPreview true
 addUserKnob {41 pointSize l "point size" T PreviewNode.pointSize}
 addUserKnob {41 detail l "point detail" T PreviewNode.detail}
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0xaaaaaa00
  note_font_size 42
  xpos -948
  ypos 169
  bdwidth 250
  bdheight 168
 }
 Reformat {
  inputs 0
  format "1920 1080 0 0 1920 1080 1 HD_1080"
  resize none
  center false
  name Settings_Format
  xpos -933
  ypos 230
 }
 Input {
  inputs 0
  name InputTexture
  xpos -341
  ypos -34
  number 1
 }
set Nb4bd5650 [stack 0]
 Reformat {
  type "to box"
  box_width {{parent.InputFormat.box.r}}
  box_height {{parent.InputFormat.box.t}}
  box_fixed true
  resize distort
  name Reformat2
  xpos -234
  ypos 25
 }
 Input {
  inputs 0
  name InputPointData
  xpos -586
  ypos -290
 }
 Dot {
  name Dot4
  xpos -552
  ypos -246
 }
 Reformat {
  type "to box"
  box_width 100
  box_height 100
  box_fixed true
  scale 0.1
  filter Impulse
  name Reformat3
  xpos -586
  ypos -215
  disable {{!parent.FastPreview}}
 }
 set Cb4bed090 [stack 0]
 Grade {
  white 10
  name Grade2
  xpos -586
  ypos -191
  disable {{!parent.FastPreview}}
 }
 set Cb4bf9530 [stack 0]
 Dot {
  name Dot2
  xpos -552
  ypos -66
 }
set Nb4c09210 [stack 0]
 Group {
  name FrameHold3
  tile_color 0xb0a45dff
  label "(frame \[value first_frames])"
  xpos -503
  ypos -73
  disable {{1-parent.mb_enable}}
  addUserKnob {20 User}
  addUserKnob {3 first_frames l "first frame"}
  first_frames {{frame+1}}
  addUserKnob {41 increment T FrameHold2.increment}
  addUserKnob {22 SetCurrentFrame l "Set This Frame" T "nuke.thisNode()\[\"first_frames\"].setValue(nuke.frame())" +STARTLINE}
 }
  Input {
   inputs 0
   name Input1
   xpos -7
   ypos -154
  }
  FrameHold {
   first_frame {{parent.knob.first_frames}}
   name FrameHold2
   selected true
   xpos -7
   ypos -114
  }
  Output {
   name Output1
   xpos -7
   ypos -14
  }
 end_group
 Dot {
  name Dot6
  xpos -469
  ypos -13
 }
push $Nb4c09210
 Group {
  name FrameHold2
  tile_color 0xb0a45dff
  label "(frame \[value first_frames])"
  xpos -662
  ypos -73
  disable {{1-parent.mb_enable}}
  addUserKnob {20 User}
  addUserKnob {3 first_frames l "first frame"}
  first_frames {{frame}}
  addUserKnob {41 increment T FrameHold2.increment}
  addUserKnob {22 SetCurrentFrame l "Set This Frame" T "nuke.thisNode()\[\"first_frames\"].setValue(nuke.frame())" +STARTLINE}
 }
  Input {
   inputs 0
   name Input1
   xpos -7
   ypos -154
  }
  FrameHold {
   first_frame {{parent.knob.first_frames}}
   name FrameHold2
   selected true
   xpos -7
   ypos -114
  }
  Output {
   name Output1
   xpos -7
   ypos -14
  }
 end_group
 Dot {
  name Dot5
  xpos -628
  ypos -13
 }
 Dissolve {
  inputs 2
  which {{frame-floor(frame)}}
  name Dissolve1
  xpos -584
  ypos -20
  disable {{1-parent.mb_enable}}
 }
push $Nb4c09210
 Switch {
  inputs 2
  which {{parent.Fast}}
  name Switch2
  selected true
  xpos -584
  ypos 48
 }
 Dot {
  name DataFetch
  label "data fetch\t"
  note_font_color 0xff21ff
  xpos -550
  ypos 78
  addUserKnob {20 User}
  addUserKnob {3 n_particles l "Number of Particles"}
  n_particles {{"\[metadata pointrender/n_points]"}}
  addUserKnob {3 gentype l "Type Of Generator"}
  gentype {{"\[metadata pointrender/gen_type]"}}
  addUserKnob {26 info l "" -STARTLINE T "0 = unknown, 1 = Card, 2 = Sphere, 3 = Grid"}
 }
set Nb47a3720 [stack 0]
 Dot {
  name Dot3
  xpos -635
  ypos 78
 }
 Dot {
  name Dot1
  xpos -635
  ypos 520
 }
 Input {
  inputs 0
  name InputOcclusion
  xpos 38
  ypos 170
  number 3
 }
 Constant {
  inputs 0
  channels rgb
  color 1
  name Empty
  xpos 171
  ypos 221
 }
 Switch {
  inputs 2
  which {{parent.UseOcclusionMap}}
  name Switch1
  xpos 38
  ypos 245
 }
push $Nb47a3720
 Crop {
  box {0 0 {width} {height}}
  reformat true
  crop false
  name InputFormat
  xpos -494
  ypos 96
 }
 Shuffle {
  in motion
  name Shuffle2
  xpos -156
  ypos 96
 }
push $Nb47a3720
 Shuffle {
  in pos
  name Shuffle1
  xpos -584
  ypos 139
 }
set Nb47d5060 [stack 0]
 Reformat {
  type "to box"
  format "1280 540 0 0 1280 540 1 HD_720_1"
  box_width {{input.width>Settings_Format.format.width?input.width:Settings_Format.format.width}}
  box_height {{input.height>Settings_Format.format.height?input.height:Settings_Format.format.height}}
  box_fixed true
  resize none
  center false
  filter Impulse
  black_outside true
  name Reformat4
  xpos -584
  ypos 177
 }
 Crop {
  box {0 0 {input.width} {input.height}}
  name Crop2
  xpos -584
  ypos 229
 }
set Nb47eddc0 [stack 0]
push $Nb47d5060
 Expression {
  temp_name0 xd
  temp_expr0 red-Camera1.world_matrix.3
  temp_name1 yd
  temp_expr1 green-Camera1.world_matrix.7
  temp_name2 zd
  temp_expr2 blue-Camera1.world_matrix.11
  temp_name3 Distance
  temp_expr3 "sqrt(xd*xd + yd*yd + zd*zd)"
  expr0 Distance
  expr1 Distance
  expr2 Distance
  expr3 Distance
  name Expression1
  xpos -456
  ypos 139
 }
 Grade {
  channels rgba
  blackpoint {{parent.FogFar}}
  whitepoint {{parent.FogNear}}
  gamma {{1/(parent.FogExponent+0.000000001)}}
  white_clamp true
  name Grade1
  xpos -456
  ypos 163
 }
push $Nb4bd5650
clone $Cb4bed090 {
  xpos -341
  ypos 0
  selected false
 }
clone $Cb4bf9530 {
  xpos -341
  ypos 24
  selected false
 }
push $Nb47a3720
 Switch {
  inputs 2
  which {{parent.General_UseTexture}}
  name ExternalTexture
  label "Use Baked or External Texture?"
  xpos -341
  ypos 71
 }
 Merge2 {
  inputs 2
  operation multiply
  name Merge1
  xpos -341
  ypos 163
  disable {{!parent.Fog}}
 }
 Shuffle {
  name Shuffle3
  xpos -341
  ypos 183
 }
set Nb4d3c4c0 [stack 0]
push $Nb47eddc0
 BlinkScript {
  inputs 5
  kernelSourceFile /Users/madshagbarth/Github/Nuke-Private/Blink/PointRender/Render/3D_PointRender_v10.cpp
  recompileCount 730
  ProgramGroup 1
  KernelDescription "2 \"PointRender3D\" iterate pixelWise 31ac3928214cdee64b1e79993b47eaf6845db77e404673c3b169db681518906f 6 \"ppos\" Read Random \"src\" Read Random \"normals\" Read Random \"mvectors\" Read Random \"occlusion\" Read Random \"dst\" Write Random 42 \"cam_Matrix\" Float 16 AACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPw== \"focallength\" Float 1 AAA4QQ== \"hapeture\" Float 1 ppvEQQ== \"format\" Int 2 AAgAAAAIAAA= \"vertexformat\" Int 2 CgAAAAoAAAA= \"Zoom\" Float 1 AACAPw== \"Filtering Method\" Int 1 AQAAAA== \"_alphaMultiplier\" Float 1 AACAPw== \"_pointRender\" Bool 1 AQ== \"_wireRender\" Bool 1 AQ== \"_facetRender\" Bool 1 AQ== \"_maxLDistance\" Float 1 AACAPw== \"_maxLConnections\" Int 1 AQAAAA== \"_maxPlexType\" Int 1 AAAAAA== \"_plexQuad\" Bool 1 AA== \"_plexLinedefX\" Bool 1 AA== \"_plexLinedefY\" Bool 1 AA== \"_plexConnectX\" Bool 1 AA== \"_plexConnectY\" Bool 1 AA== \"_L_gamma\" Float 1 AACAPw== \"Enable Depth of Field\" Bool 1 AA== \"samples\" Int 1 AwAAAA== \"rings\" Int 1 BQAAAA== \"focalDepth\" Float 1 AACAPw== \"_depthOfField\" Float 1 AACAQA== \"_depthMult\" Float 1 zczMPQ== \"_maxDofSize\" Float 1 AAAAQQ== \"dof_aspect\" Float 1 AACAPw== \"dof_threshold\" Float 1 AACAPw== \"dof_gain\" Float 1 AAAAAA== \"dof_bias\" Float 1 AAAAwA== \"dof_fringe\" Float 1 AAAAAA== \"_flatshading\" Bool 1 AQ== \"_backfacing\" Bool 1 AQ== \"_frontfacing\" Bool 1 AQ== \"_depthBuffer\" Bool 1 AQ== \"_texoffset\" Float 2 AAAAPwAAAD8= \"mb_enable\" Bool 1 AA== \"_pointSize\" Int 1 AQAAAA== \"_gaussigma\" Float 1 AACAPw== \"_depthOcclusion\" Bool 1 AQ== \"depthMultiplier\" Float 1 AACAPw== 42 \"cam_Matrix\" 16 1 \"cam_Focal\" 1 1 \"cam_Hapeture\" 1 1 \"WHformat\" 2 1 \"Vformat\" 2 1 \"zoom\" 1 1 \"_filtering\" 1 1 \"_alphaMultiplier\" 1 1 \"_pointRender\" 1 1 \"_wireRender\" 1 1 \"_facetRender\" 1 1 \"_maxPlexDistance\" 1 1 \"_maxPlexConnections\" 1 1 \"_maxPlexType\" 1 1 \"_plexQuad\" 1 1 \"_plexLinedefX\" 1 1 \"_plexLinedefY\" 1 1 \"_plexConnectX\" 1 1 \"_plexConnectY\" 1 1 \"_plex_gamma\" 1 1 \"_dof_enable\" 1 1 \"_dof_samples\" 1 1 \"_dof_rings\" 1 1 \"focalDepth\" 1 1 \"_depthOfField\" 1 1 \"_depthMult\" 1 1 \"_maxDofSize\" 1 1 \"dof_aspect\" 1 1 \"dof_threshold\" 1 1 \"dof_gain\" 1 1 \"dof_bias\" 1 1 \"dof_fringe\" 1 1 \"_flatshading\" 1 1 \"_backfacing\" 1 1 \"_frontfacing\" 1 1 \"_depthBuffer\" 1 1 \"_texoffset\" 2 1 \"mb_enable\" 1 1 \"_pointSize\" 1 1 \"_gaussigma\" 1 1 \"_depthOcclusion\" 1 1 \"depthMultiplier\" 1 1 11 \"vRaster\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"pRaster\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"tRaster\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"vWorld\" Float 3 1 AAAAAAAAAAAAAAAAAAAAAA== \"canvasWidth\" Float 1 1 AAAAAA== \"canvasHeight\" Float 1 1 AAAAAA== \"matrixData\" Float 1 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"cameraToWorld\" Float 16 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"worldToCamera\" Float 16 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"namount\" Float 1 1 AAAAAA== \"texel\" Float 2 1 AAAAAAAAAAA="
  kernelSource "inline float Frac(float a_X)\n\{\n    return a_X-floor(a_X);\n\}\n\ninline float3 Cross(float3 A,float3 B)\n\{\n    return float3(A.y*B.z - A.z*B.y,A.z*B.x - A.x*B.z,A.x*B.y - A.y*B.x);\n\}\n\n\n\ninline float Fmax(float a_X,float b_X,float c_X)\n\{\n    return max(c_X,max(a_X,b_X));\n\}\ninline float Fmin(float a_X,float b_X,float c_X)\n\{\n    return min(c_X,min(a_X,b_X));\n\}                                                                                                   \n\n//This function is used to multiply a float3 by a matrix4x4\ninline float3 multVecMatrix( float3 src, float4x4 matrix)\n\{\n    float   x,y,z,w;\n    \n    x = src\[0]*matrix\[0]\[0] + src\[1]*matrix\[1]\[0] +\n    src\[2]*matrix\[2]\[0] + matrix\[3]\[0];\n    y = src\[0]*matrix\[0]\[1] + src\[1]*matrix\[1]\[1] +\n    src\[2]*matrix\[2]\[1] + matrix\[3]\[1];\n    z = src\[0]*matrix\[0]\[2] + src\[1]*matrix\[1]\[2] +\n    src\[2]*matrix\[2]\[2] + matrix\[3]\[2];\n    w = src\[0]*matrix\[0]\[3] + src\[1]*matrix\[1]\[3] +\n    src\[2]*matrix\[2]\[3] + matrix\[3]\[3];\n    \n    return float3(x/w, y/w, z/w);\n\}\n\n//This function is used to calculate the screenspace coordinates.\ninline bool computePixelCoordinates( \n    const float3 pWorld, \n    float3 &pRaster, \n    const float4x4 &worldToCamera, \n    const float &canvasWidth, \n    const float &canvasHeight, \n    const int &imageWidth, \n    const int &imageHeight\n) \n\{ \n    float3 pCamera; \n    pCamera = multVecMatrix(pWorld, worldToCamera); \n    float2 pScreen; \n    pScreen.x = pCamera.x / -pCamera.z; \n    pScreen.y = pCamera.y / -pCamera.z; \n    float2 pNDC; \n    pNDC.x = (pScreen.x + canvasWidth * 0.5f) / canvasWidth; \n    pNDC.y = (pScreen.y + canvasHeight * 0.5f) / canvasHeight; \n    pRaster.x = (pNDC.x * imageWidth); \n    pRaster.y = ((pNDC.y) * imageHeight); \n    pRaster.z = -pCamera.z; \n    if (pRaster.x < 0.0f || pRaster.x > imageWidth || \n       pRaster.y < 0.0f || pRaster.y > imageHeight || pRaster.z < 0.0f) \{\n       return false;  \n    \}\n    return true;\n\} \n\n\n\nkernel PointRender3D : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> ppos;    //The point position map\n  Image<eRead, eAccessRandom, eEdgeClamped> src;     //The texture map\n  Image<eRead, eAccessRandom, eEdgeClamped> normals;     //The texture map \n  Image<eRead, eAccessRandom, eEdgeClamped> mvectors;     //The texture map \n  Image<eRead, eAccessRandom, eEdgeClamped> occlusion;     //The texture map \n  Image<eWrite, eAccessRandom> dst;                 //the output image\n\n  param: //Parameters available to the user\n    float4x4 cam_Matrix;    //The world matrix of the camera\n    float cam_Focal;        //The focal length of the camera\n    float cam_Hapeture;     //The horizontal apeture of the camera\n    int2 WHformat,Vformat;          //The format of the output image\n    float zoom;             //A \"post\" zoom function\n    int _filtering;        //Filter method\n    float _alphaMultiplier; //Additive multiplier\n    bool _pointRender,_wireRender,_facetRender;\n    float _maxPlexDistance; //Additive multiplier\n    int _maxPlexConnections;\n    int _maxPlexType; // 0==Grid, -1==Nearest\n    bool _plexQuad,_plexLinedefX,_plexLinedefY,_plexConnectX,_plexConnectY;\n    float _plex_gamma;\n    bool _dof_enable;\n    int _dof_samples; // This parameter is made\n    int _dof_rings;\n    float focalDepth,_depthOfField,_depthMult,_maxDofSize;\n    float dof_aspect;\n    float dof_threshold;\n    float dof_gain;\n    float dof_bias; //bokeh edge bias\n    float dof_fringe; //bokeh chromatic aberration/fringing\n    bool _flatshading,_backfacing,_frontfacing;\n    bool _depthBuffer;\n    float2 _texoffset;\n    bool mb_enable;\n    int _pointSize;\n    float _gaussigma;\n    bool _depthOcclusion;\n    float depthMultiplier;\n\n  local: //Local variables\n    float3 vRaster;\n    float3 pRaster;\n    float3 tRaster;    \n    float3 vWorld;\n    float canvasWidth;\n    float canvasHeight; \n    float matrixData\[4]\[4];\n    float4x4 cameraToWorld;\n    float4x4 worldToCamera;\n    float namount; //dither amount\n    float2 texel;\n\n  void define() \{\n    defineParam(cam_Matrix, \"cam_Matrix\", float4x4( 1.0f,0.0f,0.0f,0.0f,\n                                                    0.0f,1.0f,0.0f,0.0f,\n                                                    0.0f,0.0f,1.0f,0.0f,\n                                                    0.0f,0.0f,0.0f,1.0f));\n    defineParam(cam_Focal,      \"focallength\", 11.5f);\n    defineParam(cam_Hapeture,      \"hapeture\", 24.576f);\n    defineParam(WHformat,      \"format\", int2(2048,2048));\n    defineParam(Vformat,      \"vertexformat\", int2(10,10));\n    defineParam(zoom, \"Zoom\", 1.0f);\n    defineParam(_filtering, \"Filtering Method\", 1); \n    defineParam(_alphaMultiplier, \"_alphaMultiplier\", 1.0f);     \n    defineParam(_pointRender, \"_pointRender\", true);  \n    defineParam(_wireRender, \"_wireRender\", true);\n    defineParam(_facetRender, \"_facetRender\", true);\n    defineParam(_maxPlexDistance, \"_maxLDistance\", 1.0f);    \n    defineParam(_maxPlexConnections, \"_maxLConnections\", 1);    \n    defineParam(_maxPlexType, \"_maxPlexType\", 0); \n    defineParam(_plexQuad, \"_plexQuad\", false);      \n    defineParam(_plexLinedefX, \"_plexLinedefX\", false);  \n    defineParam(_plexLinedefY, \"_plexLinedefY\", false);  \n    defineParam(_plexConnectX, \"_plexConnectX\", false);      \n    defineParam(_plexConnectY, \"_plexConnectY\", false);   \n    defineParam(_plex_gamma, \"_L_gamma\", 1.0f);\n    //DOF SETTINGS   \n    defineParam(_dof_enable, \"Enable Depth of Field\", false);   \n    defineParam(_dof_samples, \"samples\", 3);    \n    defineParam(_dof_rings, \"rings\", 5);   \n    defineParam(focalDepth, \"focalDepth\", 1.0f);  \n    defineParam(_depthOfField, \"_depthOfField\", 4.0f);  \n    defineParam(_depthMult, \"_depthMult\", 0.1f);  \n    defineParam(_maxDofSize, \"_maxDofSize\", 8.0f);  \n    defineParam(dof_aspect, \"dof_aspect\", 1.0f);  \n    defineParam(dof_threshold, \"dof_threshold\", 1.0f);  \n    defineParam(dof_gain, \"dof_gain\", 0.0f);  \n    defineParam(dof_bias, \"dof_bias\", -2.0f);  \n    defineParam(dof_fringe, \"dof_fringe\", 0.0f); \n    //SHADING SETTINGS \n    defineParam(_flatshading, \"_flatshading\", true);  \n    defineParam(_backfacing, \"_backfacing\", true);    \n    defineParam(_frontfacing, \"_frontfacing\", true);        \n    defineParam(_depthBuffer, \"_depthBuffer\", true);  \n    defineParam(_texoffset, \"_texoffset\", float2(0.5f,0.5f)); \n    defineParam(_pointSize, \"_pointSize\", 1); \n    defineParam(_gaussigma, \"_gaussigma\", 1.0f); \n    defineParam(_depthOcclusion, \"_depthOcclusion\", true); \n    defineParam(depthMultiplier, \"depthMultiplier\", 1.0f); \n\n\n  \}\n\n  //The init() function is run before any calls to process().\n  void init() \{\n    texel = float2(1.0f/float(WHformat.x),1.0f/float(WHformat.y));\n    canvasWidth = ((cam_Hapeture)/cam_Focal);\n    canvasHeight = ((cam_Hapeture)/cam_Focal)*float(float(WHformat.y)/float(WHformat.x)); \n    float matrixData\[] = \{cam_Matrix\[0]\[0], cam_Matrix\[1]\[0], cam_Matrix\[2]\[0], cam_Matrix\[3]\[0], \n                          cam_Matrix\[0]\[1], cam_Matrix\[1]\[1], cam_Matrix\[2]\[1], cam_Matrix\[3]\[1], \n                          cam_Matrix\[0]\[2], cam_Matrix\[1]\[2], cam_Matrix\[2]\[2], cam_Matrix\[3]\[2], \n                          cam_Matrix\[0]\[3], cam_Matrix\[1]\[3], cam_Matrix\[2]\[3], cam_Matrix\[3]\[3]\};\n    cameraToWorld.setArray(matrixData); //This is a workaround. Due to the buggy matrix implementation, we pass the matrix on from another structure.\n    worldToCamera = cameraToWorld.invert();\n    namount = 0.0001; //dither amount\n  \}\n\n\n\nfloat3 Reconsile3D(float3 _PointPos)\{\n    vWorld = float3(_PointPos.x,_PointPos.y,_PointPos.z)*(zoom);\n    int ret = computePixelCoordinates(vWorld, tRaster, worldToCamera, canvasWidth, canvasHeight, WHformat\[0], WHformat\[1]);\n    return tRaster;\n\}\n\n//-------------------------------------\n// basic mix function\n//-------------------------------------\nfloat3 mix(float3 _X,float3 _Y,float _A)\{\n  return _X*(1.0f-_A)+_Y*_A;\n\}\nfloat mix(float _X,float _Y,float _A)\{\n  return _X*(1.0f-_A)+_Y*_A;\n\}\n\n//------------------------------\n//-------DRAW FUNCTIONS---------\n//------------------------------\n  //Write pixels to output.\n  void writepixel(float posx,float posy, float4 color,int index,float weight=1.0f)\n  \{ \n      if (_depthOcclusion)\{\n        float4 depthSample = occlusion(posx,posy);\n        if (depthSample.x<=vRaster.z && depthSample.w>0.0f)\{\n\n          float depth = (vRaster.z-depthSample.x);\n          color = color*(1.0f-depthSample.w);\n          color = color / (((depth*depth)*depthMultiplier)+1.0f);\n          //return;\n        \}\n      \}\n      float4 finalOutput; //This is used to store the final output\n      float4 dstSample; //This is used to store a sample of the destination\n      if ( dst.bounds.inside( posx, posy ) ) \{ //Test if the pixel written to is inside the output image. \n        if (_depthBuffer) \{\n          dstSample = (float4)dst(posx,posy); //Sample the destination image\n          if ((dstSample.w>color.w)||dstSample.w==0.0f) \{\n            dst(posx,posy) = color;\n          \}\n        \}\n        else \{\n          dstSample = (float4)dst(posx,posy); //Sample the destination image\n          finalOutput = dstSample + (color*_alphaMultiplier*weight);\n          finalOutput.w = dstSample.w + ((color.w*_alphaMultiplier*weight));\n\n          finalOutput.w = (dstSample.w + ((color.w*_alphaMultiplier*weight)))-(dstSample.w * ((color.w*_alphaMultiplier*weight)));\n\n          dst(posx,posy) = finalOutput;\n        \}\n      \} \n  \}\n\n\n\n\n  //Calculate a Bilinear Plot\n  void bilinear_Plot(float2 temppos,float4 color,int index)\n  \{\n    float2 p;\n    p.x=Frac(temppos.x);\n    p.y=Frac(temppos.y);\n    float weights\[] = \{(1.0f-p.x)*(1.0f-p.y), p.x*(1.0f-p.y), (1.0f-p.x)*p.y, p.x*p.y\};\n    int2 _position = int2(floor(temppos.x)-0,floor(temppos.y)-0); \n    writepixel(_position.x,_position.y,color,index,weights\[0]);\n    writepixel(_position.x+1,_position.y,color,index,weights\[1]);\n    writepixel(_position.x,_position.y+1,color,index,weights\[2]);\n    writepixel(_position.x+1,_position.y+1,color,index,weights\[3]);\n  \}\n\n  void gaussian(float2 temppos,float4 color,int index)\{\n    float in_x = temppos.x;\n    float in_y = temppos.y;\n    int kernelSize = (_pointSize+1)*2;\n    int subsize = (kernelSize /2)-1;\n    // set standard deviation to 1.0\n    float gKernel\[64]\[64];\n    float sigma = _gaussigma;\n    float intSigma = float(_pointSize);\n    float r, s = intSigma * sigma * sigma;\n\n    // sum is for normalization\n    float sum = 0.0f;\n\n    // generate 5x5 kernel\n    for (int x = -subsize; x <= subsize; x++)\n    \{\n        for(int y = -subsize; y <= subsize; y++)\n        \{\n            r = float(sqrt(x*x + y*y));\n            gKernel\[x + subsize]\[y + subsize] = (exp(-(r*r)/s))/(3.141592654f * s);\n            sum += gKernel\[x + subsize]\[y + subsize];\n        \}\n    \}\n\n    // normalize the Kernel\n    for (int x = -subsize; x <= subsize; x++)\n    \{\n        for(int y = -subsize; y <= subsize; y++)\n        \{\n            gKernel\[x + subsize]\[y + subsize] /= sum;\n            writepixel(in_x+x,in_y+y,color,index,gKernel\[x + subsize]\[y + subsize]);\n        \}\n    \}\n  \}\n\n\n\n  //Draw a line between 2 points\n  void DrawLine(float3 origin, float3 endpoint,float4 _colorA,float4 _colorB) \{\n    float4 _color;\n    float3 delta = origin-endpoint;\n    float mag = sqrt(delta.x*delta.x+delta.y*delta.y);\n    float3 curPoint = origin;\n    for( float a = 0; a < mag*1.0f; a = a + 1.0f )\{\n      curPoint -= (delta/mag);\n      _color = (_colorA*(1.0f-(a/mag*1.0f)))+(_colorB*(a/mag*1.0f));\n\n      if (_dof_enable)\{\n        Bokeh(curPoint,_color);\n      \}\n      else \{\n        bilinear_Plot(float2(curPoint.x,curPoint.y),_color,1);\n      \}\n      \n    \}\n  \}\n\n//-------------------------------------\n// Point_Render\n//-------------------------------------\nvoid point_render(int2 pos, float3 screen_pos)\{\n  float4 color = src(pos.x,pos.y);\n\n  if (_filtering == 1)\{\n      if (_dof_enable)\{\n        Bokeh(screen_pos,color);\n      \}\n      else \{\n        bilinear_Plot(float2(screen_pos.x,screen_pos.y),color,1);\n      \}\n  \}\n  /*\n  else if (_filtering == 2)\{\n      if (_dof_enable)\{\n        Bokeh(screen_pos,color);\n      \}\n      else \{\n        gaussian(float2(screen_pos.x,screen_pos.y),color,1);\n      \}\n  \}\n  */\n  else \{\n      int2 _position = int2(floor(screen_pos.x),floor(screen_pos.y)); \n      if (_depthBuffer) \{color.w = screen_pos.z;\}\n      writepixel(_position.x,_position.y, color,1,1.0f); //OutputSample\n  \}\n\n\}\n\n//-------------------------------------\n// Facet_Render\n//-------------------------------------\n//This function is used to calculate what triangels to draw\nvoid facet_render(int2 pos, float3 _vWorld)\{\n\n    float3 screen_pos = Reconsile3D(_vWorld);\n    bool insideX = ppos.bounds.inside(pos.x+1,pos.y );\n    bool insideY = ppos.bounds.inside(pos.x,pos.y-1 );\n    bool insideYtop = ppos.bounds.inside(pos.x,pos.y+1);\n    float2 fpos = float2(pos.x,pos.y);\n    float3 V1_Pos,V2_Pos,V1_wPos,V2_wPos,V0_N,V1_N,V2_N;\n    float2 V0_ST,V1_ST,V2_ST;\n    float4 V1_Sample,V2_Sample;\n    float4 _tn;\n    float3 normal0,normal1,normal2;\n    float2 UV_Format = float2(Vformat.x,Vformat.y);\n\n\n    if (!_flatshading) \{\n      _tn = normals(pos.x,pos.y);\n      V0_N =float3(_tn.x,_tn.y,_tn.z);\n    \}\n    V0_ST = float2(pos.x,pos.y)/UV_Format;\n\n\n  if (insideX) \{\n    V2_Sample = ppos(pos.x+1,pos.y);\n    V2_ST = float2(pos.x+1,pos.y)/UV_Format;\n    V2_wPos = float3(V2_Sample.x,V2_Sample.y,V2_Sample.z);\n    V2_Pos = Reconsile3D(V2_wPos);\n    if (!_flatshading) \{\n      _tn = normals(pos.x+1,pos.y);\n      V2_N =float3(_tn.x,_tn.y,_tn.z);\n    \}\n        \n\n    if (V2_Sample.w != 0.0f) \{ \n\n      if (insideY) \{\n        V1_Sample = ppos(pos.x+1,pos.y-1);\n        V1_ST = float2(pos.x+1,pos.y-1)/UV_Format;\n        V1_wPos = float3(V1_Sample.x,V1_Sample.y,V1_Sample.z);\n        V1_Pos = Reconsile3D(V1_wPos);\n        if (!_flatshading) \{\n          _tn = normals(pos.x+1,pos.y-1);\n          V1_N =float3(_tn.x,_tn.y,_tn.z);\n        \}\n        if (V1_Sample.w != 0.0f) \{ \n          DrawTriangle(screen_pos,V2_Pos,V1_Pos,_vWorld,V2_wPos,V1_wPos,V0_N,V2_N,V1_N,V0_ST,V2_ST,V1_ST);\n        \}\n      \}\n      if (insideYtop) \{\n        V1_Sample = ppos(pos.x,pos.y+1);\n        V1_ST = float2(pos.x,pos.y+1)/UV_Format;        \n        V1_wPos = float3(V1_Sample.x,V1_Sample.y,V1_Sample.z);\n        V1_Pos = Reconsile3D(V1_wPos);\n        if (!_flatshading) \{\n          _tn = normals(pos.x,pos.y+1);\n          V1_N =float3(_tn.x,_tn.y,_tn.z);\n        \}        \n        if (V1_Sample.w != 0.0f) \{ \n          DrawTriangle(screen_pos,V1_Pos,V2_Pos,_vWorld,V1_wPos,V2_wPos,V0_N,V1_N,V2_N,V0_ST,V1_ST,V2_ST);\n        \}\n      \}\n    \}\n  \}\n\}\n\n\n\n//This function will calculate if pixel C is inside the triangle\nfloat edgeFunction(float3 a, float3 b, float3 c) \n\{ \n    return ((c.x - a.x) * (b.y - a.y) - (c.y - a.y) * (b.x - a.x)); \n\} \n\n\nfloat3 CalculateSurfaceNormals(float3 V0, float3 V1, float3 V2)\n\{\n        float3 v0 = V0; \n        float3 v1 = V1; \n        float3 v2 = V2; \n        float3 hitNormal = cross((v1 - v0),(v2 - v0)); \n        return normalize(hitNormal);\n\}\n\nfloat3 CalculateVertexNormals(float3 V0, float3 V1, float3 V2)\n\{\n        float3 v0 = V0; \n        float3 v1 = V1; \n        float3 v2 = V2; \n        float3 hitNormal = cross((v1 - v0),(v2 - v0)); \n        return normalize(hitNormal);\n\}\n\nfloat Distance(float3 _a,float3 _b)\n\{\n          float xd = _a.x - _b.x;\n          float yd = _a.y - _b.y;\n          float zd = _a.z - _b.z;\n          return sqrt(xd*xd + yd*yd + zd*zd);\n\}\n\nvoid DrawTriangle(float3 V0, float3 V1, float3 V2,float3 WP0, float3 WP1, float3 WP2,float3 N0, float3 N1, float3 N2, float2 st0,float2 st1,float2 st2) \{\n\n  // Precompute reciprocal of vertex z-coordinate \n  V0.z = 1.0f / V0.z, V1.z = 1.0f / V1.z, V2.z = 1.0f / V2.z; \n\n  float2 st0n = st0 * V0.z;\n  float2 st1n = st1 * V1.z; \n  float2 st2n = st2 * V2.z; //Normal version of ST\n\n\n  bool inside; \n  float X0 = Fmin(V0.x,V1.x,V2.x)-1.0f;\n  float X1 = Fmax(V0.x,V1.x,V2.x)+1.0f;\n  float Y0 = Fmin(V0.y,V1.y,V2.y)-1.0f;\n  float Y1 = Fmax(V0.y,V1.y,V2.y)+1.0f;\n  float area = edgeFunction(V2, V1, V0);\n\n\n  for( int x = X0; x < X1 ; x++) \{\n    for( int y = Y0; y < Y1 ; y++) \{\n      float3 pixelSample(x + _texoffset.x, y + _texoffset.y,0.0f); \n\n      //This is the part where we test if the current pixel is inside the triangle\n      //We check both for front facing and back faing options\n      float w0 = edgeFunction(V1, V0, pixelSample); //Front Facing\n      float w1 = edgeFunction(V2, V1, pixelSample); \n      float w2 = edgeFunction(V0, V2, pixelSample); \n      float w3 = edgeFunction(V0, V1, pixelSample); //Back Facing\n      float w4 = edgeFunction(V1, V2, pixelSample); \n      float w5 = edgeFunction(V2, V0, pixelSample);\n\n      //writepixel(x,y, float4(w1),1,1.0f);\n      if ((w0 >= 0 && w1 >= 0 && w2 >= 0 && _frontfacing) || (w3 >= 0 && w4 >= 0 && w5 >= 0 && _backfacing)) \{ //The curent pixel is inside the triangle\n\n\n        //float z = 1.0f / (V0.z * w0 + V1.z * w1 + V2.z * w2); \n        //DO DEPTH TESTING HERE!!!\n        //http://www.scratchapixel.com/code.php?id=26&origin=/lessons/3d-basic-rendering/rasterization-practical-implementation\n        \n        //ST MAP (CHECK THAT ITS CORRECT!?)\n        \n       // calculate vectors from point f to vertices p1, p2 and p3:\n       float3 f1 = V0-pixelSample;\n       float3 f2 = V1-pixelSample;\n       float3 f3 = V2-pixelSample;\n       // calculate the areas and factors (order of parameters doesn't matter):\n       float a = length(cross(V0-V1,V0-V2 )); // main triangle area a\n       area = length(V0-V1)+length(V0-V2)+length(V1-V2);\n\n        w0 /= area; \n        w1 /= area; \n        w2 /= area; \n\n        w3 /= area; \n        w4 /= area; \n        w5 /= area; \n\n       float a1 = length(cross(f2, f3)) / a; // p1's triangle area / a\n       float a2 = length(cross(f3, f1)) / a; // p2's triangle area / a \n       float a3 = length(cross(f1, f2)) / a; // p3's triangle area / a\n       float a_magnitude = a1+a2+a3;\n       a1 = a1/a_magnitude;\n       a2 = a2/a_magnitude;\n       a3 = a3/a_magnitude;\n       float z = 1.0f / (V0.z * a1 + V1.z * a2 + V2.z * a3); \n\n\n        // find the uv corresponding to point f (uv1/uv2/uv3 are associated to p1/p2/p3):\n        float2 uv = st0 * a1 + st1 * a2 + st2 * a3;\n        float2 st = st0 * w0 + st1 * w1 + st2 * w2; \n        st *= z;      \n\n\n        //Calculate normals. Eighter we have flat shading, else we calculate a normal per pixel\n        float3 normalB;\n        if (_flatshading) \{\n          normalB = CalculateSurfaceNormals(WP0,WP1,WP2);\n\n        \}\n        else \{\n          float3 c0 = N2/float3(V0.z); \n          float3 c1 = N0/float3(V1.z); \n          float3 c2 = N1/float3(V2.z);  \n\n          normalB.x = w0 * c0.x + w1 * c1.x + w2 * c2.x; \n          normalB.y = w0 * c0.y + w1 * c1.y + w2 * c2.y; \n          normalB.z = w0 * c0.z + w1 * c1.z + w2 * c2.z; \n\n          normalB.x *= z, normalB.y *= z, normalB.z *= z; \n        \}\n        normalB = normalize(normalB);\n\n\n        //z = 1.0f / (V0.z * w0 + V1.z * w1 + V2.z * w2); \n        // if we use perspective correct interpolation we need to\n        // multiply the result of this interpolation by z, the depth\n        // of the point on the 3D triangle that the pixel overlaps.\n\n\n        /*\n        float3 v0Cam, v1Cam, v2Cam; \n        v0Cam = multVecMatrix(V0, worldToCamera);\n        v1Cam = multVecMatrix(V1, worldToCamera);\n        v2Cam = multVecMatrix(V2, worldToCamera); \n\n        float px = (v0Cam.x/-v0Cam.z) * w0 + (v1Cam.x/-v1Cam.z) * w1 + (v2Cam.x/-v2Cam.z) * w2; \n        float py = (v0Cam.y/-v0Cam.z) * w0 + (v1Cam.y/-v1Cam.z) * w1 + (v2Cam.y/-v2Cam.z) * w2; \n        float3 pt(px * z, py * z, -z); // pt is in camera space \n\n        float3 n = cross((v1Cam - v0Cam),(v2Cam - v0Cam)); \n        n = normalize(n); \n        float3 viewDirection = -pt; \n        viewDirection = normalize(viewDirection); \n\n        float nDotView =  dot(n,viewDirection);\n        */\n\n\n\n        //CALCULATE THE OBJECT TEXTURE COORDINATES\n        float zn = 1.0f / (V0.z * w0 + V1.z * w1 + V2.z * w2); \n        st = st0n * w0 + st1n * w1 + st2n * w2; \n        st *= zn;   \n        //--END \n\n\n        float3 Wpos = WP0*a1 + WP1*a2 + WP2*a3; //World Position.\n        float3 ViewNormal = normalize(float3(cameraToWorld\[3]\[0],cameraToWorld\[3]\[1],cameraToWorld\[3]\[2])-Wpos);\n\n        float nDotView =  dot(normalB,ViewNormal);\n        //nDotView =  max(0.0f,(1.0f/nDotView));\n        nDotView = 1.0f-fabs(nDotView); //make sure that the view normal ramps back around when doing backface\n        float4 tempout;\n        //dst(x,y) = float4(f1.x,f1.y,f1.z,1.0f);\n        if (!_flatshading) \{\n          tempout = bilinear(src, uv.x*Vformat.x,uv.y*Vformat.y);\n        \}\n        else\{\n          int2 tempost = int2(int(uv.x*Vformat.x),int(uv.y*Vformat.y));\n          tempout = nDotView;//src(tempost.x,tempost.y);\n        \}\n        if (_depthBuffer)\{\n          //writepixel(x,y, float4(normalB.x,normalB.y,normalB.z,-z),1,1.0f); //Surface Normal\n          //writepixel(x,y, float4(uv.x,uv.y,0.0f,z),1,1.0f);  \n          //writepixel(x,y, float4(WP0.x,WP0.y,WP0.z,-z),1,1.0f);  //Per vertex UV map\n          //writepixel(x,y, float4(ViewNormal.x,ViewNormal.y,ViewNormal.z,z),1,1.0f);\n          //writepixel(x,y, float4(nDotView,nDotView,nDotView,z),1,1.0f);\n\n          /*\n          float _a = Distance(WP0,WP1);\n          float _b = Distance(WP1,WP2);\n          float _c = Distance(WP0,WP2);\n          float s = (_a+_b+_c) /2.0f;\n          float tempArea = sqrt(s*(s-_a)*(s-_b)*(s-_c));\n          */\n          //float tempArea = fabs(edgeFunction((WP0), (WP1), (WP2)));\n\n\n          //writepixel(x,y, float4(area,area,area,z),1,1.0f);\n          //writepixel(x,y, float4(Wpos.x,Wpos.y,Wpos.z,z),1,1.0f);  //Per vertex UV map\n          //writepixel(x,y, float4(fabs(w0),fabs(w1),fabs(w2),-z),1,1.0f); //Per vertex UV map\n          writepixel(x,y, float4(tempout.x,tempout.y,tempout.z,z),1,1.0f); \n          //writepixel(x,y, float4(st.x,st.y,0.0f,-z),1,1.0f);  \n\n        \}\n        else \{\n          //writepixel(x,y, float4(V1.x,V1.y,V1.z,V2.x),1,1.0f); \n          //writepixel(x,y, float4(V0.x,V0.y,V0.z,V1.x),1,1.0f);\n          //writepixel(x,y, float4(pixelSample.x,pixelSample.y,pixelSample.z,area),1,1.0f);       \n          //writepixel(x,y, float4(w3,w4,w5,w1),1,1.0f);     \n          //writepixel(x,y, float4(tempout.x,tempout.y,tempout.z,1.0f/area),1,1.0f);      \n          //writepixel(x,y, float4(1.0f),1,1.0f);  \n          if (_dof_enable)\{\n            Bokeh(float3(x,y,z),float4(tempout.x,tempout.y,tempout.z,z));\n          \}\n          else \{\n            bilinear_Plot(float2(x,y),float4(tempout.x,tempout.y,tempout.z,z),1);\n          \}\n\n\n          //writepixel(x,y, float4(nDotView,nDotView,nDotView,z),1,1.0f);\n          //writepixel(x,y, float4(tempout.x,tempout.y,tempout.z,z),1,1.0f); \n\n        \}\n\n      \}  \n\n    \}\n  \}\n\}\n\n//-------------------------------------\n// Wire_Render\n//-------------------------------------\nvoid wire_render(int2 pos) \{\n  float4 temp = float4(0.0f,0.0f,0.0f,FLT_MAX);\n  float4 wire_ref_sample;\n  int2 tempXY = int2(0,0);\n  float4 plexlist\[11] = \{temp,temp,temp,temp,temp,temp,temp,temp,temp,temp,temp\}; \n  int2 plexlistXY\[11] = \{tempXY,tempXY,tempXY,tempXY,tempXY,tempXY,tempXY,tempXY,tempXY,tempXY,tempXY\};\n  int plex_count = 0; //We use this to figure how many points that should connect.\n  float plex_dist;\n  float3 plex_position;\n  if (_maxPlexType == -1) \{ //Used for random connection types\n    //PLEXUS FUNCTIONS\n    for( int x = 0; x < 40 ; x++)\{ //THIS 40 NUMBER IS THE LIMIT TO AVOID TOO SLOW PROCESSING!\n      for( int y = 0; y < 40 ; y++)\{\n        wire_ref_sample = ppos(x,y);\n        if (wire_ref_sample.w != 0.0f && pos.x!=x && pos.y != y) \{ \n          plex_position = float3(wire_ref_sample.x,wire_ref_sample.y,wire_ref_sample.z)*(zoom);\n          float xd = plex_position.x - vWorld.x;\n          float yd = plex_position.y - vWorld.y;\n          float zd = plex_position.z - vWorld.z;\n          float plex_dist = sqrt(xd*xd + yd*yd + zd*zd);\n          if (plex_dist<_maxPlexDistance)\{\n            plex_count = min(10,plex_count+1); //Add one to the count\n            for( int h = 0; h < plex_count+1 ; h++) \{ //Loop thought all the points. If the distance is shorter then insert it into the array and push the rest of the array down\n              if (plex_dist < plexlist\[h].w) \{                  \n                for( int i = plex_count+1; i > h ; i--) \{\n                  plexlist\[i] = plexlist\[i-1];\n                  plexlistXY\[i] = plexlistXY\[i-1];\n                \}\n                plexlist\[h] = float4(plex_position.x,plex_position.y,plex_position.z,plex_dist);\n                plexlistXY\[h] = int2(x,y);\n                break;        \n              \}\n            \}\n          \} \n        \}\n      \}\n    \}\n  \}\n  else\{ //Used for standard connection types\n    float4 temp_pos;\n    bool insideX = !(Vformat.x < pos.x+1);\n    bool insideY = !(Vformat.y < pos.y+1);\n\n    if ( insideX && !_plexLinedefX) \{\n      temp_pos = ppos(pos.x+1,pos.y );\n      plex_position = float3(temp_pos.x,temp_pos.y,temp_pos.z)*(zoom);\n      if (temp_pos.w != 0) \{wire_connection(vWorld,plex_position, plexlist,plexlistXY,plex_count,pos);\} \n    \}\n    else if ( _plexConnectX && !_plexLinedefX) \{\n      temp_pos = ppos(0,pos.y);\n      plex_position = float3(temp_pos.x,temp_pos.y,temp_pos.z)*(zoom);\n      if (temp_pos.w != 0) \{wire_connection(vWorld,plex_position, plexlist,plexlistXY,plex_count,pos);\} \n    \}\n    if ( insideY && !_plexLinedefY) \{\n      temp_pos = ppos(pos.x,pos.y+1);\n      plex_position = float3(temp_pos.x,temp_pos.y,temp_pos.z)*(zoom);\n      if (temp_pos.w != 0) \{wire_connection(vWorld,plex_position, plexlist,plexlistXY,plex_count,pos);\}                          \n    \}\n    else if ( _plexConnectY  && !_plexLinedefY) \{\n      temp_pos = ppos(pos.x,0);\n      plex_position = float3(temp_pos.x,temp_pos.y,temp_pos.z)*(zoom);\n      if (temp_pos.w != 0) \{wire_connection(vWorld,plex_position, plexlist,plexlistXY,plex_count,pos);\} \n    \}\n    //_plexConnect\n    if ( insideX && insideY && !_plexQuad) \{              \n      temp_pos = ppos(pos.x+1,pos.y+1);\n      plex_position = float3(temp_pos.x,temp_pos.y,temp_pos.z)*(zoom);\n      if (temp_pos.w != 0) \{wire_connection(vWorld,plex_position, plexlist,plexlistXY,plex_count,pos);\} \n    \}\n    else if ( _plexConnectX && _plexConnectY && !_plexQuad) \{\n      temp_pos = ppos((pos.x+1)*insideX,(pos.y+1)*insideY);\n      plex_position = float3(temp_pos.x,temp_pos.y,temp_pos.z)*(zoom);\n      if (temp_pos.w != 0) \{wire_connection(vWorld,plex_position, plexlist,plexlistXY,plex_count,pos);\} \n    \}\n    else if ( _plexConnectX && insideY && !_plexQuad) \{\n      temp_pos = ppos((pos.x+1)*insideX,(pos.y+1)*insideY);\n      plex_position = float3(temp_pos.x,temp_pos.y,temp_pos.z)*(zoom);\n      if (temp_pos.w != 0) \{wire_connection(vWorld,plex_position, plexlist,plexlistXY,plex_count,pos);\} \n    \}\n    else if ( _plexConnectY && insideX && !_plexQuad) \{\n      temp_pos = ppos((pos.x+1)*insideX,(pos.y+1)*insideY);\n      plex_position = float3(temp_pos.x,temp_pos.y,temp_pos.z)*(zoom);\n      if (temp_pos.w != 0) \{wire_connection(vWorld,plex_position, plexlist,plexlistXY,plex_count,pos);\} \n    \}\n  \}   \n\n  //now that all the plexus connections have been sorted by distance then we connect the dots.\n  for( int x = 0; x < min(_maxPlexConnections,plex_count) ; x++)\{\n    plex_position = float3(plexlist\[x].x,plexlist\[x].y,plexlist\[x].z);\n    plex_dist = plexlist\[x].w;\n\n\n    float plex_distribution = 1.0f-((plexlist\[x].w-plexlist\[0].w)/((plexlist\[min(_maxPlexConnections,plex_count)].w-plexlist\[0].w)+0.00001f)); //Where does it lie between the best and the worst distance?\n    //plexlistXY\n\n    float4 plex_col = float4(pow(1.0f-(plex_dist/_maxPlexDistance),1.0f/_plex_gamma))*float4(plex_distribution); //This one is quite cool aswell, but does leave the center ones a bit too focused \n    float4 plex_colorA = src(pos.x,pos.y);\n    float4 plex_colorB = src( plexlistXY\[x].x,plexlistXY\[x].y);\n\n\n    computePixelCoordinates(plex_position, pRaster, worldToCamera, canvasWidth, canvasHeight, WHformat\[0], WHformat\[1]);\n    if (dst.bounds.inside(int(vRaster.x),int(vRaster.y)) || dst.bounds.inside(int(pRaster.x),int(pRaster.y)))\{\n        DrawLine(vRaster,pRaster,plex_colorA*plex_col,plex_colorB*plex_col);\n    \}\n  \}\n\}\n\nvoid wire_connection(float3 p_source,float3 p_target, float4 (&p_plexlist)\[11], int2 (&p_plexlistXY)\[11],int &p_plexcount,int2 position) \{\n  float xd = p_target.x - p_source.x;\n  float yd = p_target.y - p_source.y;\n  float zd = p_target.z - p_source.z;\n  float plex_dist = sqrt(xd*xd + yd*yd + zd*zd);\n  if (plex_dist<_maxPlexDistance)\{\n    p_plexcount = min(11,p_plexcount+1); //Add one to the count\n    for( int h = 0; h < p_plexcount+1 ; h++) \{ //Loop thought all the points. If the distance is shorter then insert it into the array and push the rest of the array down\n      if (plex_dist < p_plexlist\[h].w) \{                  \n        for( int i = p_plexcount+1; i > h ; i--) \{\n          p_plexlist\[i] = p_plexlist\[i-1];\n          p_plexlistXY\[i] = p_plexlistXY\[i-1];\n        \}\n        p_plexlist\[h] = float4(p_target.x,p_target.y,p_target.z,plex_dist);\n        p_plexlistXY\[h] = int2(position.x,position.y);\n        break;        \n      \}\n    \}  \n  \}\n\}\n//-------END OF WIRE RENDER FUNCTIONS---------\n\n\n\n\n//-------------------------------\n//-------BOKEH FUNCTIONS---------\n//http://devlog-martinsh.blogspot.dk/2011/11/glsl-depth-of-field-with-bokeh-v21.html\nfloat2 rand(float2 coord) //generating noise/pattern texture for dithering\n\{\n  float noiseX = ((Frac(1.0-coord.x*(WHformat\[0]/2.0))*0.25)+(Frac(coord.y*(WHformat\[1]/2.0))*0.75))*2.0-1.0;\n  float noiseY = ((Frac(1.0-coord.x*(WHformat\[0]/2.0))*0.75)+(Frac(coord.y*(WHformat\[1]/2.0))*0.25))*2.0-1.0;\n  noiseX = clamp(Frac(sin(dot(coord ,float2(12.9898f,78.233f))) * 43758.5453f),0.0f,1.0f)*2.0f-1.0f;\n  noiseY = clamp(Frac(sin(dot(coord ,float2(12.9898f,78.233f)*2.0f)) * 43758.5453f),0.0f,1.0f)*2.0-1.0f;\n  return float2(noiseX,noiseY);\n\}\n\n\n\n//-------------------------------------\n// Bokeh\n//-------------------------------------\nvoid Bokeh(float3 pos,float4 color)\{\n  float blur = 0.0;\n  blur = clamp((fabs(pos.z - focalDepth)/_depthOfField)*100.0f,-_maxDofSize,_maxDofSize);\n  \n  //float2 noise = rand(float2(pos.x,pos.y))*namount*blur;\n  \n  float w = (1.0/WHformat.x)*blur;//+noise.x;\n  float h = (1.0/(WHformat.x*dof_aspect))*blur;//+noise.y;\n  float3 v3_col = float3(color.x,color.y,color.z);\n  int ringsamples;\n  float s = 1.0;  \n\n  for (int i = 1; i <= _dof_rings; i += 1)\n  \{   \n    ringsamples = i * _dof_samples; \n    for (int j = 0 ; j < ringsamples ; j += 1)  \n    \{ \n      s += (1.0f*mix(1.0f,(float(i))/(float(_dof_rings)),dof_bias)*1.0f); //No need to do this in the loop\n    \}\n  \}\n\n  for (int i = 1; i <= _dof_rings; i += 1)\n  \{   \n    ringsamples = i * _dof_samples;\n     \n    for (int j = 0 ; j < ringsamples ; j += 1)   \n    \{\n      float step = PI*2.0 / float(ringsamples);\n      float pw = (cos(float(j)*step)*(float(i)/_dof_rings));\n      float ph = (sin(float(j)*step)*(float(i)/_dof_rings));\n      float p = 1.0;\n\n      float posx = pos.x+((pw*w)*blur);\n      float posy = pos.y+((ph*h)*blur);\n\n\n      float3 lumcoeff = float3(0.299,0.587,0.114);\n      float lum = dot(v3_col, lumcoeff);\n      float thresh = max((lum-dof_threshold)*dof_gain, 0.0f);\n      v3_col+mix(float3(0.0),v3_col,thresh*blur);\n\n      float3 col = (v3_col*mix(1.0,(float(i))/(float(_dof_rings)),dof_bias)*p)/s; \n      bilinear_Plot(float2(posx,posy),float4(col.x,col.y,col.z,color.w/(_dof_rings*_dof_rings)),1);\n    \}\n  \}\n\}\n//-------END OF BOKEH FUNCTIONS---------\n\n\n\n//-------------------------------------\n// Process\n//-------------------------------------\n  void process(int2 pos) \{\n    float4 _sample = ppos(pos.x,pos.y); //Get the XYZ Coordinates\n    float2 posf = float2(pos.x,pos.y);\n\n    if (_sample.w != 0.0f) \{  //No need to process if there is no data.\n\n      //Convert worldspace coordinates to screenspcace coordinates.\n      vWorld = float3(_sample.x,_sample.y,_sample.z)*(zoom);\n      int ret = computePixelCoordinates(vWorld, vRaster, worldToCamera, canvasWidth, canvasHeight, WHformat\[0], WHformat\[1]);\n      if (ret) \{ //Only create points that are visible on screen\n        if (_pointRender)\{\n          point_render(pos,vRaster);\n        \}\n      \} //Pointrender over\n\n      if (_wireRender && _maxPlexConnections>1) \{\n        wire_render(pos);\n      \} //WireRender over\n\n      if (_facetRender) \{\n        facet_render(pos,float3(_sample.x,_sample.y,_sample.z));\n      \}  //FacetRender over\n      \n    \}\n  \} //----> process\n\};\n"
  useGPUIfAvailable false
  rebuild ""
  PointRender3D_cam_Matrix {
      {{parent.Camera1.world_matrix} {parent.Camera1.world_matrix} {parent.Camera1.world_matrix} {parent.Camera1.world_matrix}}
      {{parent.Camera1.world_matrix} {parent.Camera1.world_matrix} {parent.Camera1.world_matrix} {parent.Camera1.world_matrix}}
      {{parent.Camera1.world_matrix} {parent.Camera1.world_matrix} {parent.Camera1.world_matrix} {parent.Camera1.world_matrix}}
      {{parent.Camera1.world_matrix} {parent.Camera1.world_matrix} {parent.Camera1.world_matrix} {parent.Camera1.world_matrix}}
    }
  PointRender3D_focallength {{parent.Camera1.focal}}
  PointRender3D_hapeture {{parent.Camera1.haperture}}
  PointRender3D_format {{Settings_Format.width} {Settings_Format.height}}
  PointRender3D_vertexformat {{parent.InputFormat.box.r-1} {parent.InputFormat.box.t-1}}
  PointRender3D__alphaMultiplier {{parent.AlphaMultiplier}}
  PointRender3D__pointRender {{parent.RenderMode==0}}
  PointRender3D__wireRender {{parent.RenderMode==1}}
  PointRender3D__facetRender {{parent.RenderMode==2}}
  PointRender3D__maxLDistance {{parent.wire_maxdistance}}
  PointRender3D__maxLConnections {{parent.wire_connections}}
  PointRender3D__maxPlexType {{parent.wire_type-1}}
  PointRender3D__plexQuad {{!parent.connect_x}}
  PointRender3D__plexLinedefX {{!parent.connect_xy}}
  PointRender3D__plexLinedefY {{!parent.connect_y}}
  PointRender3D__plexConnectX {{parent.CloseX}}
  PointRender3D__plexConnectY {{parent.CloseY}}
  PointRender3D__L_gamma {{parent.wire_Threshold}}
  "PointRender3D_Enable Depth of Field" {{parent.dof_enable}}
  PointRender3D_samples {{3*(parent.Dof_Quality*parent.Dof_Quality+1)}}
  PointRender3D_rings {{3*(parent.Dof_Quality*parent.Dof_Quality+1)}}
  PointRender3D_focalDepth {{parent.dof_focaldepth}}
  PointRender3D__depthOfField {{parent.dof_dof}}
  PointRender3D__depthMult {{parent.DofMultiplier}}
  PointRender3D__maxDofSize {{parent.dof_maxSize*400}}
  PointRender3D_dof_aspect {{parent.dof_Aspect}}
  PointRender3D_dof_bias {{parent.dof_bias}}
  PointRender3D__flatshading {{parent.facet_flatShading}}
  PointRender3D__backfacing {{parent.facet_backface}}
  PointRender3D__frontfacing {{parent.facet_front}}
  PointRender3D__depthBuffer {{parent.facet_depth}}
  PointRender3D__texoffset {-0.5 0.5}
  PointRender3D__pointSize 0
  PointRender3D__depthOcclusion {{parent.UseOcclusionMap}}
  format "1280 540 0 0 1280 540 1 HD_720_1"
  rebuild_finalise ""
  name BlinkScript1
  xpos -156
  ypos 241
 }
 Reformat {
  format {{{Settings_Format.format}}}
  resize none
  center false
  name Reformat1
  xpos -156
  ypos 315
 }
 Group {
  name SoftLook
  xpos -156
  ypos 381
  disable {{!parent.HighlightCompression}}
  addUserKnob {20 User}
  addUserKnob {26 ""}
  addUserKnob {7 Add R 0 4}
  Add {{parent.HighlightCeiling}}
  addUserKnob {7 Offset R 0 4}
  Offset {{parent.Compression}}
 }
  Input {
   inputs 0
   name Input1
   xpos -248
   ypos 500
  }
set Nb4d7f2a0 [stack 0]
  Expression {
   expr0 r/(r+parent.Offset)*parent.Add
   expr1 g/(g+parent.Offset)*parent.Add
   expr2 b/(b+parent.Offset)*parent.Add
   expr3 a/(a+parent.Offset)*parent.Add
   name Expression1
   xpos -339
   ypos 576
  }
push $Nb4d7f2a0
  ShuffleCopy {
   inputs 2
   red red
   green green
   blue blue
   alpha alpha2
   name ShuffleCopy1
   selected true
   xpos -248
   ypos 576
  }
  Output {
   name Output1
   xpos -248
   ypos 651
  }
 end_group
 TimeBlur {
  divisions {{parent.Samples}}
  shutter {{parent.Shutter}}
  shutteroffset centred
  shuttercustomoffset 0
  name MotionBlur
  xpos -156
  ypos 462
  disable {{1-parent.mb_enable x89 0}}
 }
 ShuffleCopy {
  inputs 2
  in pos
  red red
  green green
  blue blue
  out pos
  name ShuffleCopy1
  xpos -156
  ypos 517
  disable true
 }
 Output {
  name Output1
  xpos -156
  ypos 554
 }
 Input {
  inputs 0
  name InputCamera
  xpos -800
  ypos 111
  number 2
 }
 Camera2 {
  focal {{parent.FocalLength}}
  name Camera1
  xpos -790
  ypos 220
 }
push $Nb4d3c4c0
 PositionToPoints2 {
  display textured
  render_mode textured
  P_channel pos
  detail 0.25
  pointSize 0.6
  name PreviewNode
  xpos -783
  ypos -5
  disable {{!parent.Enable3DPreview}}
 }
end_group
Group {
 name LUE4NUKE1
 tile_color 0x2c00ffff
 xpos -100
 ypos 162
 addUserKnob {20 Primaries}
 addUserKnob {26 Credits l "" +STARTLINE T "LUE for NUKE 11"}
 addUserKnob {22 Init_logo l INVISIBLE +INVISIBLE T "DotNuke = nukescripts.getNukeUserFolder() \nif os.path.isfile(DotNuke+\"/LUE/lue.png\"):\n\tnuke.thisNode().knob(\"Credits\").setValue(\"<img src=\"+DotNuke+\"/LUE/lue.png>\")" +STARTLINE}
 addUserKnob {52 Init_Init_logo T "nuke.thisNode().knob(\"Init_logo\").execute()" +STARTLINE}
 addUserKnob {22 CurveKnobSetup l INVISIBLE +INVISIBLE T "#Initialize Curve Knobs\n#Need to clean up old code!!!\n\nthisNode = nuke.thisNode()\n\ntry:\n\tthisNode.knob(\"lut\").delCurve(\"sat_thrsh\")\n\tthisNode.knob(\"lut\").delCurve(\"amount\")\n\tthisNode.knob(\"lut\").addCurve(\"HueVsHue\")\n\tthisNode.knob(\"lut\").addCurve(\"HueVsSat\")\n\tthisNode.knob(\"lut\").addCurve(\"HueVsLum\")\n\tthisNode.knob(\"lut\").addCurve(\"SatVsSat\")\n\tthisNode.knob(\"lut\").addCurve(\"SatVsLum\")\n\tthisNode.knob(\"lut\").addCurve(\"BlackAndWhite\")\n\n\tdef RunNode():\n\t\tif nuke.thisKnob().Class() == \"LookupCurves_Knob\":\n\t\t\tthisNode = nuke.thisNode().fullName().split(\".\")\[-2]\n\t\t\twith nuke.Root():\n\t\t\t\tinputNode = nuke.toNode(thisNode)\n\t\t\t\tcurve = inputNode.knob(\"lut\").toScript()\n\t\t\twith inputNode:\n\t\t\t\tmyCurve = curve.splitlines()\[0]\n\t\t\t\tnuke.toNode(inputNode.name()+\".HueVsHue\").knob(\"lut\").editCurve(\"amount\",myCurve)\n\t\t\t\tmyCurve = curve.splitlines()\[1]\n\t\t\t\tnuke.toNode(inputNode.name()+\".HueVsSat\").knob(\"lut\").editCurve(\"amount\",myCurve)\n\t\t\t\tmyCurve = curve.splitlines()\[2]\n\t\t\t\tnuke.toNode(inputNode.name()+\".HueVsLum\").knob(\"lut\").editCurve(\"amount\",myCurve)\n\t\t\t\tmyCurve = curve.splitlines()\[3]\n\t\t\t\tnuke.toNode(inputNode.name()+\".SatVsSat\").knob(\"lut\").editCurve(\"master\",myCurve)\n\t\t\t\tmyCurve = curve.splitlines()\[4]\n\t\t\t\tnuke.toNode(inputNode.name()+\".SatVsLum\").knob(\"lut\").editCurve(\"master\",myCurve)            \n\t\t\t\tmyCurve = curve.splitlines()\[5]\n\t\t\t\tnuke.toNode(inputNode.name()+\".BlackAndWhite\").knob(\"lut\").editCurve(\"amount\",myCurve) \n\t\t\t\tnuke.toNode(\"HueKeyer2\").knob('knobChanged').setValue(\"RunNode()\")\n\t\t\t#help(nuke.toNode(\"HueKeyer1\").knob('knobChanged').setValue)\nexcept:\n    pass\n\n\n#Hue VS Hue\nwith thisNode:\n    curve = nuke.toNode(\"HueVsHue\").knob(\"lut\").toScript()\n    myCurve = curve.splitlines()\[0]\nthisNode.knob(\"lut\").editCurve(\"HueVsHue\",myCurve\[8:-1])\n\n#Hue Vs Sat\nwith thisNode:\n    curve = nuke.toNode(\"HueVsSat\").knob(\"lut\").toScript()\n    myCurve = curve.splitlines()\[0]\nthisNode.knob(\"lut\").editCurve(\"HueVsSat\",myCurve\[8:-1])\n\n#Hue Vs Lum\nwith thisNode:\n    curve = nuke.toNode(\"HueVsLum\").knob(\"lut\").toScript()\n    myCurve = curve.splitlines()\[0]\nthisNode.knob(\"lut\").editCurve(\"HueVsLum\",myCurve\[8:-1])\n\n#Sat Vs Sat\nwith thisNode:\n    curve = nuke.toNode(\"SatVsSat\").knob(\"lut\").toScript()\n    myCurve = curve.splitlines()\[0]\nthisNode.knob(\"lut\").editCurve(\"SatVsSat\",myCurve\[8:-1])\n\n#Sat Vs Lum\nwith thisNode:\n    curve = nuke.toNode(\"SatVsLum\").knob(\"lut\").toScript()\n    myCurve = curve.splitlines()\[0]\nthisNode.knob(\"lut\").editCurve(\"SatVsLum\",myCurve\[8:-1])\n\n\n#Hue Vs Lum\nwith thisNode:\n    curve = nuke.toNode(\"BlackAndWhite\").knob(\"lut\").toScript()\n    myCurve = curve.splitlines()\[0]\nthisNode.knob(\"lut\").editCurve(\"BlackAndWhite\",myCurve\[13:-1])\n\n\n\n#curve = nuke.toNode(\"HueKeyer1\").knob(\"lut\").toScript()\n#myCurve = curve.splitlines()\[2]\n#print myCurve\n#nuke.toNode(\"HueKeyer2\").knob(\"lut\").editCurve(\"amount\",myCurve)\n\n\n\n\ndef RunNode():\n\tif nuke.thisKnob().Class() == \"LookupCurves_Knob\":\n\t\tthisNode = nuke.thisNode().fullName().split(\".\")\[-2]\n\t\twith nuke.Root():\n\t\t\tinputNode = nuke.toNode(thisNode)\n\t\t\tcurve = inputNode.knob(\"lut\").toScript()\n\t\twith inputNode:\n\t\t\tmyCurve = curve.splitlines()\[0]\n\t\t\tnuke.toNode(inputNode.name()+\".HueVsHue\").knob(\"lut\").editCurve(\"amount\",myCurve.replace(\"amount\",\"curve\")\[10:-1])\n\t\t\tmyCurve = curve.splitlines()\[1]\n\t\t\tnuke.toNode(inputNode.name()+\".HueVsSat\").knob(\"lut\").editCurve(\"amount\",myCurve.replace(\"amount\",\"curve\")\[10:-1])\n\t\t\tmyCurve = curve.splitlines()\[2]\n\t\t\tnuke.toNode(inputNode.name()+\".HueVsLum\").knob(\"lut\").editCurve(\"amount\",myCurve.replace(\"amount\",\"curve\")\[10:-1])\n\t\t\tmyCurve = curve.splitlines()\[3]\n\t\t\tnuke.toNode(inputNode.name()+\".SatVsSat\").knob(\"lut\").editCurve(\"master\",myCurve.replace(\"master\",\"curve\")\[10:-1])\n\t\t\tmyCurve = curve.splitlines()\[4]\n\t\t\tnuke.toNode(inputNode.name()+\".SatVsLum\").knob(\"lut\").editCurve(\"master\",myCurve.replace(\"master\",\"curve\")\[10:-1])    \n\t\t\tmyCurve = curve.splitlines()\[5]\n\t\t\tnuke.toNode(inputNode.name()+\".BlackAndWhite\").knob(\"lut\").editCurve(\"amount\",myCurve.replace(\"amount\",\"curve\")\[15:-1])          \n\t\t\tnuke.toNode(\"HueKeyer2\").knob('knobChanged').setValue(\"RunNode()\")" +STARTLINE}
 addUserKnob {52 Init_CurveKnobSetup l "" +STARTLINE T "nuke.thisNode().knob(\"CurveKnobSetup\").execute()" +STARTLINE}
 addUserKnob {52 SMH_init T "nuke.toNode(nuke.thisNode().name()+\".BaseColorCorrect\").knob(\"RunThis\").execute()" +STARTLINE}
 addUserKnob {52 init_init_colorwheel l "" +STARTLINE T "nuke.thisNode().knob(\"init_colorwheel\").execute()" +STARTLINE}
 addUserKnob {22 init_colorwheel l INVISIBLE +INVISIBLE T "import sys, math\nimport nuke\ntry:\n    import PySide.QtGui as QtGui\n    import PySide.QtCore as QtCore\n    from PySide.QtGui import *\n    from PySide.QtCore import *\nexcept:\n    import Qt\n    from Qt import QtGui\n    from Qt import QtCore\n    from Qt.QtGui import *\n    from Qt.QtCore import *\nfrom nukescripts import panels\nimport datetime\n#Projekt Variabler\n\n#FasteVariabler\ntry:\n\tif defined == 1:\n\t    pass\n\t    #print \"allready launched\"\nexcept: \n\tclass ColorWheelWidget(QtGui.QWidget):\n\t    def __init__(self, parent=None, mainDiameter=138, outerRingWidth=10,my_Knob=\"None\"):\n\t        QtGui.QWidget.__init__(self, parent)\n\t        # this is the pixel diameter of the actual color wheel, without the extra decorations drawn as part of this widget\n\t        self.dim = mainDiameter\n\t        self.offset = outerRingWidth\n\t        self.ColorKnob = my_Knob\n\t        self.colorWheelSensitivity = 0.1\n\t        self.setstate = 0\n\t        self.bMouseDown = False\n\t        self.shiftDown = False\n\t        self.ctrlDown = False\n\t        self.altDown = False\n\t        self.guiSelection = 0\n\t        self.middleMouse = 0\n\t        self.initialPoint = (0,0)    \n\t        self.master_radius = (self.dim/2)+self.offset+1\n\t        self.huepoint = (self.master_radius, self.master_radius)\n\t        self.value_angle = 360\n\t        self.value_angleSat = 0\t   \n\t        color = QtGui.QColor(0,0,0,0).rgba()\n\t        self.myTimer = QtCore.QTime()\n\t \n\t        self.center = (self.master_radius, self.master_radius)\n\t        # this is the color value that this widget represents\n\t        self.color = QtGui.QColor()\n\n\n\n\t        # the color wheel image, only needs to be generated once\n\t        self.image = QtGui.QImage(self.master_radius*2, self.master_radius*2, QtGui.QImage.Format_ARGB32)\n\t        # this is the image for the current color selection\n\t        self.current_image = QtGui.QImage(self.master_radius*2, self.master_radius*2, QtGui.QImage.Format_ARGB32)\n\t        self.current_image.fill(QtGui.QColor(self.color).rgba())\n\t        self.current_imageB = QtGui.QImage(self.master_radius*2, self.master_radius*2, QtGui.QImage.Format_ARGB32)\n\t        self.current_imageB.fill(QtGui.QColor(self.color).rgba())       \n\t        # these are used for the current color selection image\n\t        self.lastPoint = (self.master_radius, self.master_radius)\n\t        self.currentPoint = (self.master_radius, self.master_radius)\n\t        self.points = self.getRadialLinePoints((self.dim / 2), self.master_radius, 45)\n\t        self.points2 = self.getRadialLinePoints((self.dim / 2), self.master_radius, 135)\t        \n\t        self.image.fill(color)\n\n\n\t        self.color.setRgbF(min(1,max(0,my_Knob.value()\[0])),min(1,max(0,my_Knob.value()\[1])),min(1,max(0,my_Knob.value()\[2])))\n\n\n\t        self.luma = (my_Knob.value()\[3]/2.0)*255.0\n\t        self.hue = self.color.hueF()*255.0\n\t        self.sat = self.color.saturationF()*255.0\n\t   \n\n\t        self.setUIColor(self.hue,self.sat,self.luma) \n\n\t        for y in range(int(self.master_radius*2)):\n\t            for x in range(int(self.master_radius*2)):\n\t                d = 2 * self.getDist((x,y),self.center) / self.dim\n\t                if d <= 1: #Hue Wheel\n\t                    color = QtGui.QColor()\n\t                    hue = self.getHue(x, y)\n\t                    percent = max(0,min(1,(d - 0.90)*30))\n\t                    color.setHsv(hue,(d*255),90+(165*percent),90+(165*percent)) #The dark part in the center\n\n\t                    self.image.setPixel(x,y, color.rgba())\n\t                else:\n\t                    d2 = self.getDist((x,y),self.center) / (self.master_radius-1)\n\t                    if d2 > 1: #MainBG                       \n\t                        color = QtGui.QColor()\n\t                        color.setAlpha(0)\n\t                        self.image.setPixel(x,y, color.rgba())\n\t                    else:\n\t                    \tpass\n\n\t        self.setUIColor(self.hue,self.sat,self.luma) \n\t        self.setColor(self.hue, self.sat, self.luma)\n\n\n\t    def getRadialLinePoints(self, r_inner, r_outer, angle,distance=1.0):\n\t        rad = math.radians(angle)\n\t        sr = math.sin(rad)\n\t        cr = math.cos(rad)\n\t        x1 = r_outer - (r_outer * (sr*distance))\n\t        y1 = r_outer - (r_outer * (cr*distance)) \n\t        x2 = r_outer - (r_inner * (sr*distance))\n\t        y2 = r_outer - (r_inner * (cr*distance))\n\t        return (x1, y1, x2, y2)\n\t  \n\t    def getRot(self, x, y):\n\t        return ( math.degrees ( math.atan2 ( 2*(x - self.master_radius),2*(y - self.master_radius)))) % 360\n\t    def getLum(self, x, y):\n\t        return ( math.degrees ( math.atan2 ( 2.0*(x - self.master_radius),2.0*(y - self.master_radius)))) % 360\n\n\t    def getHue(self, x, y):\n\t        return ( math.degrees ( math.atan2 ( 2*(x - self.master_radius),2*(y - self.master_radius))) + 165 ) % 360\n\t    \n\t    def setColor(self, h, s, v):\n\n\t        self.color.setHsvF(0.0,0.0,min(1,v/255.0))\n\t        alpha = self.current_image.alphaChannel()\n\t        self.current_image.fill(self.color.rgb())\n\t        self.current_image.setAlphaChannel(alpha)\n\t        self.color.setHsvF(min(1,h/255.0),1.0,min(1,v/255.0)) #Should be 255 and not 254.5 but it causes a unknown error!\n\t        alpha = self.current_imageB.alphaChannel()\n\t        self.current_imageB.fill(self.color.rgb())\n\t        self.current_imageB.setAlphaChannel(alpha)\n\t        self.update()      \n\n\t    def reset(self,x):\n\t        self.middleMouse = 1\n\t        self.bMouseDown = True\n\t        self.guiSelection = 0\n\t        self.initialPoint = (self.center\[0], self.center\[1])\n\t        self.lastPoint = (self.center\[0], self.center\[1]) \n\t        self.alterColor(self.lastPoint\[0], self.lastPoint\[1])\n\t        self.guiSelection = 1\n\t        self.initialPoint = (self.center\[0], self.center\[1])\n\t        self.lastPoint = (self.center\[0], self.center\[1]) \n\t        self.alterColor(self.lastPoint\[0], self.lastPoint\[1]-10)\n\t        self.lastPoint = self.currentPoint\n\t        self.setColor(self.hue, self.sat, self.luma)\n\t        self.setUIColor(self.hue,self.sat,self.luma)\n\t        self.bMouseDown = False\n\t        if not self.ColorKnob == \"None\":\n\t\t\t\ttry:\n\t\t\t\t\tself.color.setHsvF(min(1,self.hue/255.0),min(1,self.sat/255.0),1.0)\n\t\t\t\t\tself.ColorKnob.setValue(\[float(self.color.redF()),float(self.color.greenF()),float(self.color.blueF()),float(self.luma*2)/255])\n\t\t\t\texcept: \n\t\t\t\t\tprint \"Error trying to send values to color control. Make sure all layouts are set to 4 Colors and not 1\"\n\n\t        \n\t    def getDist(self, (x1, y1), (x2, y2)):\n\t        return math.sqrt((x2-x1)**2 + (y2-y1)**2)\n\t        \n\t    def paintEvent(self, evt):\n\t        painter = QtGui.QPainter(self)\n\t        painter.setRenderHint(QtGui.QPainter.Antialiasing)\n\t        pen = QtGui.QPen()\n\t        if not self.ColorKnob == \"None\":\n\t\t\t\ttry:\n\t\t\t\t\tif self.setstate > 0:\n\t\t\t\t\t\tself.color.setHsvF(min(1,self.hue/255.0),min(1,self.sat/255.0),1.0)\n\t\t\t\t\t\tself.ColorKnob.setValue(\[float(self.color.redF()),float(self.color.greenF()),float(self.color.blueF()),float(self.luma*2)/255])\n\t\t\t\t\tif self.setstate > 1:\n\t\t\t\t\t\tself.setstate = 0\n\n\t\t\t\texcept: \n\t\t\t\t\tprint \"Error trying to send values to color control. Make sure all layouts are set to 4 Colors and not 1\"\n\t        self.color.setHsvF(min(1,self.hue/255.0),min(1,self.sat/255.0),min((self.luma/255.0)*2.0,1.0))\n\t        brush = QtGui.QBrush(QtGui.QColor(self.color.rgb())) #Color of the elipse\n\t        pen.setColor(QtGui.QColor(20,20,20)) #Outline Color\n\t        pen.setWidth(2) #Outline Width\n\t        painter.setPen(pen)\n\t        \n\t        painter.drawImage(0,0,self.image)\n\t        #painter.drawImage(0,0,self.current_image)\n\t        #painter.drawImage(0,0,self.current_imageB)\n\t        r = self.dim/2 \n\t        r2 = r + self.offset\n\t        center = QtCore.QPoint(r2+2,r2+2) \n\t        center = QtCore.QPointF(self.center\[0],self.center\[1] )\n\t        \n\t        painter.drawEllipse(center, r, r ) #DRAW THE OUTER BLACK CIRCLE\n\n\n\t   \n\t        #LUMINANCE ARC\n\t        pen.setWidth(3) #Outline Width\n\t        pen.setColor(QtGui.QColor(150,150,150)) #Outline Color\n\t        gradient = QtGui.QConicalGradient()\n\t        gradient.setCenter(center)\n\t        gradient.setAngle(-90)\n\t        gradient.setColorAt(1, QtGui.QColor(255, 255, 255))\n\t        gradient.setColorAt(0.497, QtGui.QColor(170, 170, 170))\n\t        gradient.setColorAt(0.498, QtGui.QColor(255, 255, 255))\n\t        gradient.setColorAt(0.5, QtGui.QColor(255, 255, 255))\n\t        gradient.setColorAt(0.502, QtGui.QColor(255, 255, 255))\n\t        gradient.setColorAt(0.503, QtGui.QColor(170, 170, 170))\n\t        gradient.setColorAt(0, QtGui.QColor(70, 70, 70))\n\t        pen.setBrush(gradient)\n\n\t        painter.setPen(pen)    \n\t        rectangle = QtCore.QRectF(self.center\[0]-((self.dim*1.1)/2), self.center\[1]-((self.dim*1.1)/2), self.dim*1.1, self.dim*1.1)     \n\t        startAngle = -90*16\n\n\t        spanAngle = (self.value_angle)*16\n\t        painter.drawArc(rectangle, startAngle, spanAngle)\n\n\n\t        pen.setWidth(1) #Outline Width\n\t        pen.setColor(QtGui.QColor(20,20,20)) #Outline Color\n\t        painter.setPen(pen)\n\t        #painter.drawEllipse(center, r-8, r-8) #DRAW THE INNER BLACK CIRCLE\n\n\t        pen.setColor(QtGui.QColor(200,200,200)) #Outline Color\n\t        painter.setPen(pen)\n\t        #Middle Crosshair\n\t        painter.drawLine((self.master_radius)+4,(self.master_radius),(self.master_radius)-4,(self.master_radius))\n\t        painter.drawLine((self.master_radius),(self.master_radius)+4,(self.master_radius),(self.master_radius)-4)\n\n\t        pen.setWidth(6) #Outline Width\n\t        painter.setPen(pen)\n\t        (x1,y1,x2,y2) = self.points\n\t        (x1,y1,x2,y2) = self.points2\n\n\n\t        #Draw the GuideLines\n\t        pen.setWidth(1.99)\n\t        pen.setColor(QtGui.QColor(220,220,220))\n\t        pen.setStyle(QtCore.Qt.PenStyle.DashLine)\n\t        painter.setPen(pen)\n\t        (hpx, hpy) =  self.huepoint\n\t        d = self.getDist((hpx,hpy),self.center)\n\t        if self.bMouseDown == False: #Hide the guidelines when the mouse is not clicked\n\t            pass\n\t        else:\n\t            (x1,y1,x2,y2) = self.getRadialLinePoints(0, self.master_radius, ((self.hue/255)*360)+15,0.80) \n\t            painter.drawLine(x1,y1,x2,y2)\n\t            if d > 46: #If the radial is in the bright area, then display a dark version\n\t                pen.setColor(QtGui.QColor(20,20,20))  \n\t                painter.setPen(pen)\n\t            if d != 0:\n\t                painter.drawEllipse(QtCore.QPointF(self.master_radius, self.master_radius), d, d)\n\n\n\t        #Draw Hue Dot\n\t        pen.setWidth(1)\n\t        pen.setStyle(QtCore.Qt.PenStyle.SolidLine)\n\t        if self.luma > 90:\n\t            pen.setColor(QtGui.QColor(0,0,0))\n\t        else:\n\t            pen.setColor(QtGui.QColor(220,220,220))\n\t        painter.setPen(pen)\n\t        painter.setBrush(brush)\n\t        painter.drawEllipse(QtCore.QPointF(hpx, hpy), 5, 5)\n\n\n\n\t    def setUIColor(self,h,s,v):\n\t        (x1,y1,x2,y2) = self.getRadialLinePoints((self.dim / 2.0), self.master_radius,  ((self.hue/255)*360)+15,(s/255.0))\n\t        self.huepoint = (x2,y2)\n\t        self.lastPoint = (x2,y2)\n\t        self.currentPoint = (x2,y2)\n\t        #Saturation\n\t        self.value_angleSat = (1.0-((s/255.0) * 90.0)) + 135.0       \n\n\t        #Luminance\n\t        self.value_angle = ((v/255.0) * 360.0) \n\n\n\t        \n\t    def alterColor(self, x, y):\t\n\t        d = 2.0 * self.getDist((x,y),self.center) / self.dim\n\t        if self.guiSelection == 0:\n\t            if self.getDist((x,y),self.center) >= (self.dim/2.0):\n\t                Percent = self.getDist((x,y),self.center) / (self.dim/2.0)\n\t                prex = (((x-self.center\[0]) / Percent) * 1)+self.center\[0]\n\t                prey = (((y-self.center\[1]) / Percent) * 1)+self.center\[1]\n\t                self.initialPoint = (self.initialPoint\[0]-(prex-x), self.initialPoint\[1]-(prey-y))\n\t                x = prex\n\t                y = prey\n\t            hue = self.getHue(x, y)\n\n\t            self.value_angleSat = (1.0-((self.getDist((x,y),self.center) / (self.dim/2.0)) * 90.0)) + 135.0  \n\t            self.hue = (hue/360)*255\n\t            self.sat = min(d*255.0,255.0)\n\t            self.huepoint = (x,y)\n\t            self.setColor(hue,min(d*255.0,255.0),self.luma)\n\t        \n\t        elif self.guiSelection == 1:\n\t            self.value_angle = self.getRot(x, y)\n\t            lum = self.getLum(x, y)\n\t            v = (lum/360.0)*255.0\n\t            self.setColor(self.color.hueF(), self.color.saturationF(), v)\n\t            self.luma = v\n\n\n\t        else:\n\t            pass\n\n\n\t    def mousePressEvent(self, evt):\n\t    \tself.setstate = 1\n\t        self.myTimer.start()\n\t\t\t\n\t        d = 2 * self.getDist((evt.x(), evt.y()),self.center) / self.dim\n\t        if evt.button() == QtCore.Qt.MouseButton.MiddleButton:\n\t            self.middleMouse = 1\n\t        else:\n\t            self.middleMouse = 0\n\t        if d <= 1: \n\t            self.guiSelection = 0\n\t            if self.middleMouse == 1:\n\t                self.initialPoint = (self.center\[0], self.center\[1])\n\t                self.lastPoint = (self.center\[0], self.center\[1]) \n\t                self.alterColor(self.lastPoint\[0], self.lastPoint\[1])\n\t            else:\n\t                self.initialPoint = (evt.x(), evt.y())\n\t                self.alterColor(self.lastPoint\[0], self.lastPoint\[1])\n\t        else:\n\t            d = self.getDist((evt.x(), evt.y()),self.center) / self.master_radius\n\t            if d <= 1:\n\t                self.guiSelection = 1\n\t                if self.middleMouse == 1:\n\t                    self.initialPoint = (self.center\[0], self.center\[1])\n\t                    self.lastPoint = (self.center\[0], self.center\[1]) \n\t                    self.alterColor(self.lastPoint\[0], self.lastPoint\[1]-10)\n\t                else:\n\t                    self.alterColor(evt.x(), evt.y())\n\t            else:\n\t                self.guiSelection = 3\n\t        self.bMouseDown = True\n\n\n\n\n\t    def mouseMoveEvent(self, evt):\n\t    \tself.setstate = 1\n\t    \tnMilliseconds = self.myTimer.elapsed()\n\t    \tif nMilliseconds < 1:\n\t    \t\tpass\n\t    \telse:\n\n\t\t        modifiers = QtGui.QApplication.keyboardModifiers()\n\t\t        self.shiftDown = False\n\t\t        self.ctrlDown = False\n\t\t        self.altDown = False\n\t\t        self.colorWheelSensitivity = 0.1\n\n\t\t        if modifiers == QtCore.Qt.ShiftModifier:\n\t\t            self.shiftDown = True\n\t\t        if modifiers == QtCore.Qt.ControlModifier:\n\t\t            self.ctrlDown = True\n\t\t        if modifiers == QtCore.Qt.AltModifier:\n\t\t            self.altDown = True\n\t\t            self.colorWheelSensitivity = 1\n\t\t        if modifiers == (QtCore.Qt.ControlModifier | QtCore.Qt.ShiftModifier):\n\t\t            self.ctrlDown = True\n\t\t            self.shiftDown = True\n\n\t\t        if self.bMouseDown and self.middleMouse == 0:\n\t\t            if self.guiSelection == 1 or self.guiSelection == 2:\n\t\t                self.alterColor(evt.x(), evt.y())\n\t\t            else:\n\n\t\t                x = (((evt.x()-self.initialPoint\[0]) * self.colorWheelSensitivity))+self.lastPoint\[0]\n\t\t                y = (((evt.y()-self.initialPoint\[1]) * self.colorWheelSensitivity))+self.lastPoint\[1]\n\t\t                self.alterColor(x, y)\n\t\t                self.currentPoint = (x, y) \n\t\t        self.myTimer.restart()\n\t        \n\n\t    def mouseReleaseEvent(self, evt):\n\t    \tself.setstate = 2\n\t        self.lastPoint = self.currentPoint\n\t        self.setColor(self.hue, self.sat, self.luma)\n\t        self.setUIColor(self.hue,self.sat,self.luma)\n\t        self.bMouseDown = False\n\nclass Example(QtGui.QWidget):\n\tdef __init__(self, parent=None,myNode=\"none\"):\n\t\tQtGui.QWidget.__init__(self, None)\n    \n    # -- NUKE TEAM EDIT -- #\n\t\tself.setMinimumHeight(200)\n    # -------------------- #\n\n\t\t#self.setGeometry(900, 900, 800, 600)\n\t\t#self.setWindowTitle('ColorBars')\n\t\tself.baseNode = myNode\n\t\tself.palette = QtGui.QPalette()\n\t\tself.LiftLabel = QtGui.QLabel(\"<b>Lift</b>\")\n\t\tself.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.white)\n\t\tself.LiftLabel.setPalette(self.palette)\n\t\tself.LiftLabel.mouseReleaseEvent = self.showText1\n\t\tself.Lift = ColorWheelWidget(None, 138, 10,myNode.knob(\"Lift\"))\n\n\n\t\tself.GammaLabel = QtGui.QLabel(\"<b>Gamma</b>\")\n\t\tself.GammaLabel.setPalette(self.palette)\n\t\tself.GammaLabel.mouseReleaseEvent = self.showText2\n\t\tself.Gamma = ColorWheelWidget(None, 138, 10,myNode.knob(\"Gamma\"))\n\n\t\tself.GainLabel = QtGui.QLabel(\"<b>Gain</b>\")\n\t\tself.GainLabel.setPalette(self.palette)\n\t\tself.GainLabel.mouseReleaseEvent = self.showText3\n\t\tself.Gain = ColorWheelWidget(None, 138, 10,myNode.knob(\"Gain\"))\n\n\t\tlayout = QtGui.QGridLayout()\n\t\tlayout.addWidget(self.LiftLabel,0,0)\n\t\tlayout.addWidget(self.GammaLabel,0,1)\n\t\tlayout.addWidget(self.GainLabel,0,2)\n\t\tlayout.addWidget(self.Lift,1,0)\n\t\tlayout.addWidget(self.Gamma,1,1)\n\t\tlayout.addWidget(self.Gain,1,2)\n\t\tlayout.setRowStretch(1,1)\n\t\tself.setLayout(layout)\n\t\t#self.show()\n\tdef showText1(self, event):\n\t\tmyNode = self.baseNode.knob(\"LiftEnabled\")\n\t\tif myNode.value() == 1:\n\t\t\tself.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.red)\n\t\t\tself.LiftLabel.setPalette(self.palette)\n\t\t\tmyNode.setValue(0)\n\t\telse:\n\t\t\tself.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.white)\n\t\t\tself.LiftLabel.setPalette(self.palette)\n\t\t\tmyNode.setValue(1)\n\n\tdef showText2(self, event):\n\t\tmyNode = self.baseNode.knob(\"GammaEnabled\")\n\t\tif myNode.value() == 1:\n\t\t\tself.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.red)\n\t\t\tself.GammaLabel.setPalette(self.palette)\n\t\t\tmyNode.setValue(0)\n\t\telse:\n\t\t\tself.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.white)\n\t\t\tself.GammaLabel.setPalette(self.palette)\n\t\t\tmyNode.setValue(1)\n\n\tdef showText3(self, event):\n\t\tmyNode = self.baseNode.knob(\"GainEnabled\")\n\t\tif myNode.value() == 1:\n\t\t\tself.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.red)\n\t\t\tself.GainLabel.setPalette(self.palette)\n\t\t\tmyNode.setValue(0)\n\t\telse:\n\t\t\tself.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.white)\n\t\t\tself.GainLabel.setPalette(self.palette)\n\t\t\tmyNode.setValue(1)\n\n\nclass ColorWheelKnob_LGG:\n\tdef __init__( self ):\n\t\tself.instance = 0\n\t\treturn None\n\n\tdef makeUI( self ):\n\t\tself.instance = Example(None,nuke.thisNode())\n\t\treturn self.instance\n\ndefined = 1" +STARTLINE}
 addUserKnob {22 init_colorwheel2 l INVISIBLE +INVISIBLE T "class Example2(QtGui.QWidget):\n  def __init__(self, parent=None,myNode=\"none\"):\n    QtGui.QWidget.__init__(self, None)\n    #self.setGeometry(900, 900, 800, 600)\n    #self.setWindowTitle('ColorBars')\n    self.baseNode = myNode\n    self.palette = QtGui.QPalette()\n    self.ShadowLabel = QtGui.QLabel(\"<b>Shadows</b>\")\n    self.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.white)\n    self.ShadowLabel.setPalette(self.palette)\n    self.ShadowLabel.mouseReleaseEvent = self.showText1\n    self.Shadow = ColorWheelWidget(None, 138, 10,myNode.knob(\"Shadows\"))\n\n\n    self.MidtoneLabel = QtGui.QLabel(\"<b>Midtones</b>\")\n    self.MidtoneLabel.setPalette(self.palette)\n    self.MidtoneLabel.mouseReleaseEvent = self.showText2\n    self.Midtone = ColorWheelWidget(None, 138, 10,myNode.knob(\"Midtones\"))\n\n    self.HighlightLabel = QtGui.QLabel(\"<b>Highlights</b>\")\n    self.HighlightLabel.setPalette(self.palette)\n    self.HighlightLabel.mouseReleaseEvent = self.showText3\n    self.Highlight = ColorWheelWidget(None, 138, 10,myNode.knob(\"Highlights\"))\n\n    layout = QtGui.QGridLayout()\n    layout.addWidget(self.ShadowLabel,0,0)\n    layout.addWidget(self.MidtoneLabel,0,1)\n    layout.addWidget(self.HighlightLabel,0,2)\n    layout.addWidget(self.Shadow,1,0)\n    layout.addWidget(self.Midtone,1,1)\n    layout.addWidget(self.Highlight,1,2)\n    layout.setRowStretch(1,1)\n    self.setLayout(layout)\n    #self.show()\n  def showText1(self, event):\n    myNode = self.baseNode.knob(\"ShadowsEnabled\")\n    if myNode.value() == 1:\n      self.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.red)\n      self.ShadowLabel.setPalette(self.palette)\n      myNode.setValue(0)\n    else:\n      self.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.white)\n      self.ShadowLabel.setPalette(self.palette)\n      myNode.setValue(1)\n\n  def showText2(self, event):\n    myNode = self.baseNode.knob(\"MidtonesEnabled\")\n    if myNode.value() == 1:\n      self.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.red)\n      self.MidtoneLabel.setPalette(self.palette)\n      myNode.setValue(0)\n    else:\n      self.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.white)\n      self.MidtoneLabel.setPalette(self.palette)\n      myNode.setValue(1)\n\n  def showText3(self, event):\n    myNode = self.baseNode.knob(\"HighlightsEnabled\")\n    if myNode.value() == 1:\n      self.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.red)\n      self.HighlightLabel.setPalette(self.palette)\n      myNode.setValue(0)\n    else:\n      self.palette.setColor(QtGui.QPalette.Foreground,QtCore.Qt.white)\n      self.HighlightLabel.setPalette(self.palette)\n      myNode.setValue(1)\n\nclass ColorWheelKnob_SMH:\n  def __init__( self ):\n    self.instance = 0\n    return None\n\n  def makeUI( self ):\n    self.instance = Example2(None,nuke.thisNode())\n    return self.instance\n" +STARTLINE}
 addUserKnob {52 init_init_colorwheel2 T "nuke.thisNode().knob(\"init_colorwheel2\").execute()" +STARTLINE}
 addUserKnob {26 info_general l "<b><font color=#70EE70>General</font><b>"}
 addUserKnob {22 General_Clear l Clear T "nuke.thisNode().knob(\"blackpoint\").setValue(\[0,0,0,0])\nnuke.thisNode().knob(\"blackpoint\").setValue(0)\nnuke.thisNode().knob(\"whitepoint\").setValue(\[0,0,0,0])\nnuke.thisNode().knob(\"whitepoint\").setValue(1)\nnuke.thisNode().knob(\"add\").setValue(\[0,0,0,0])\nnuke.thisNode().knob(\"add\").setValue(0)\nnuke.thisNode().knob(\"red\").setValue(0)\nnuke.thisNode().knob(\"Temperature\").setValue(1)\nnuke.thisNode().knob(\"Tint\").setValue(1)\nnuke.thisNode().knob(\"Contrast\").setValue(1)\nnuke.thisNode().knob(\"Saturation\").setValue(1)\nnuke.thisNode().knob(\"ColorBoost\").setValue(1)" +STARTLINE}
 addUserKnob {6 General_Enable l Enable -STARTLINE}
 General_Enable true
 addUserKnob {41 blackpoint l "Blackpoint <font color=#1A1A1A>●</font>" T BaseGrade.blackpoint}
 addUserKnob {41 whitepoint l "Whitepoint <font color=#E6E6E6>●</font>" T BaseGrade.whitepoint}
 addUserKnob {41 add l "Offset <sup>▲</sup><sub>▼</sub>" T BaseGrade.add}
 addUserKnob {26 basedevider l "" +STARTLINE T " \n"}
 addUserKnob {41 red l Exposure T Exposure1.red}
 addUserKnob {7 Temperature l "Temperature <font color=#E6E6A1><sup>◄</sup></font><font color=#A1E6E6><sub>►</sub></font>" R 0 2}
 Temperature 1
 addUserKnob {7 Tint l "Tint <font color=#E6A1A1><sup>◄</sup></font><font color=#A1E6A1><sub>►</sub></font>" R 0 2}
 Tint 1
 addUserKnob {7 Contrast R 0.5 1.5}
 Contrast 1
 addUserKnob {7 Saturation R 0 2}
 Saturation 1
 addUserKnob {7 ColorBoost l Vibrance R 0 2}
 ColorBoost 1
 addUserKnob {6 pop_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 info_liftgammagain l "<b><font color=#70EE70>3-Way LGG</font><b>"}
 addUserKnob {22 liftgammagain_clear l Clear T "nuke.thisNode().knob(\"LiftGammaGain\").getObject().instance.Lift.reset(1)\nnuke.thisNode().knob(\"LiftGammaGain\").getObject().instance.Gamma.reset(1)\nnuke.thisNode().knob(\"LiftGammaGain\").getObject().instance.Gain.reset(1)" +STARTLINE}
 addUserKnob {6 liftgammagain_Enable l Enable -STARTLINE}
 liftgammagain_Enable true
 addUserKnob {52 LiftGammaGain l "" t "Hotkeys:\nClick MiddleMouse = Reset\nALT+Drag = Absolute Offset" +STARTLINE T ColorWheelKnob_LGG() +STARTLINE}
 addUserKnob {41 colorspace_out l GradingSpace T LGGColorspace_in.colorspace_out}
 addUserKnob {7 LumaMix l " Mix Luma" -STARTLINE}
 addUserKnob {20 org l "" +STARTLINE n 1}
 org 0
 addUserKnob {19 Lift R 0 2}
 Lift {1 1 1 1}
 addUserKnob {6 Lift_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Lift_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Lift_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Lift_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Lift_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Lift_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Lift_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 LiftEnabled l "" -STARTLINE}
 LiftEnabled true
 addUserKnob {19 Gamma R 0 2}
 Gamma {0.6733958953 0.7635919738 1 1}
 addUserKnob {6 Gamma_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Gamma_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Gamma_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Gamma_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Gamma_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Gamma_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Gamma_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 GammaEnabled l "" -STARTLINE}
 GammaEnabled true
 addUserKnob {19 Gain R 0 2}
 Gain {1 1 1 1}
 addUserKnob {6 Gain_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Gain_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Gain_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Gain_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Gain_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Gain_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Gain_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 GainEnabled l "" -STARTLINE}
 GainEnabled true
 addUserKnob {20 endGroup n -1}
 addUserKnob {26 info_ShadowMidtoneHighlight l "<b><font color=#70EE70>3-Way SMH</font><b>"}
 addUserKnob {22 SMH_Clear l Clear T "nuke.thisNode().knob(\"ShadowsMidtonesHighlights\").getObject().instance.Shadow.reset(1)\nnuke.thisNode().knob(\"ShadowsMidtonesHighlights\").getObject().instance.Midtone.reset(1)\nnuke.thisNode().knob(\"ShadowsMidtonesHighlights\").getObject().instance.Highlight.reset(1)" +STARTLINE}
 addUserKnob {6 SMH_Enable l Enable -STARTLINE}
 addUserKnob {52 ShadowsMidtonesHighlights l "" +STARTLINE T ColorWheelKnob_SMH() +STARTLINE}
 addUserKnob {41 low l Low T BaseColorCorrect.low}
 addUserKnob {41 High -STARTLINE T BaseColorCorrect.High}
 addUserKnob {20 smh_group l "" +STARTLINE n 1}
 smh_group 0
 addUserKnob {19 Shadows R 0 2}
 Shadows {1 1 1 1}
 addUserKnob {6 Shadows_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Shadows_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Shadows_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Shadows_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Shadows_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Shadows_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Shadows_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 ShadowsEnabled l "" -STARTLINE}
 ShadowsEnabled true
 addUserKnob {6 Midtones_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Highlights_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {19 Midtones R 0 2}
 Midtones {1 1 1 1}
 addUserKnob {6 Midtones_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Midtones_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Midtones_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Midtones_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Midtones_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Midtones_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Midtones_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 MidtonesEnabled l "" -STARTLINE}
 MidtonesEnabled true
 addUserKnob {19 Highlights R 0 2}
 Highlights {1 1 1 1}
 addUserKnob {6 Highlights_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Highlights_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Highlights_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Highlights_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Highlights_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Highlights_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Highlights_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 HighlightsEnabled l "" -STARTLINE}
 HighlightsEnabled true
 addUserKnob {20 endGroup_1 l endGroup n -1}
 addUserKnob {20 PAGE_Secondaries l Secondaries}
 addUserKnob {26 SplitToning_DEVIDER l "<b><font color=#70EE70>Split Toning</font><b>"}
 addUserKnob {22 SplitToning_Clear l Clear T "nuke.thisNode().knob(\"Split_Bright_Hue\").setValue(0.095)\nnuke.thisNode().knob(\"Split_Bright_Sat\").setValue(1)\nnuke.thisNode().knob(\"Split_Dark_Hue\").setValue(0.715)\nnuke.thisNode().knob(\"Split_Dark_Sat\").setValue(1)\nnuke.thisNode().knob(\"Split_Contrast\").setValue(0)\nnuke.thisNode().knob(\"Split_Mix\").setValue(0.17)\nnuke.thisNode().knob(\"Split_Offset\").setValue(0)" +STARTLINE}
 addUserKnob {6 SplitToning_Enable l Enable -STARTLINE}
 addUserKnob {7 Split_Bright_Hue l "Hue White <font color=#E6E6E6>●</font>"}
 Split_Bright_Hue 0.095
 addUserKnob {7 Split_Bright_Sat l "Sat  <font color=#E6E6E6>●</font>" -STARTLINE}
 Split_Bright_Sat 1
 addUserKnob {7 Split_Dark_Hue l "Hue Black <font color=#1A1A1A>●</font>"}
 Split_Dark_Hue 0.715
 addUserKnob {7 Split_Dark_Sat l "Sat <font color=#1A1A1A>●</font>" -STARTLINE}
 Split_Dark_Sat 1
 addUserKnob {7 Split_Contrast l "Contrast ◊"}
 addUserKnob {7 Split_Offset l Offset -STARTLINE R -1 1}
 addUserKnob {7 Split_Mix l "Mix ◌"}
 Split_Mix 0.17
 addUserKnob {26 PrimariesOffset_Devider l "<b><font color=#70EE70>Primaries Offset</font><b>"}
 addUserKnob {22 Primatries_Clear l Clear T "nuke.thisNode().knob(\"Prim_HueRed\").setValue(0)\nnuke.thisNode().knob(\"Prim_HueGreen\").setValue(0)\nnuke.thisNode().knob(\"Prim_HueBlue\").setValue(0)" +STARTLINE}
 addUserKnob {6 Primaries_Enable l Enable -STARTLINE}
 addUserKnob {7 Prim_HueRed l "Offset Red <font color=#FF4040>●</font>" R -1 1}
 addUserKnob {7 Prim_HueGreen l "Offset Green <font color=#40FF40>●</font>" R -1 1}
 addUserKnob {7 Prim_HueBlue l "Offset Blue <font color=#4040FF>●</font>" R -1 1}
 addUserKnob {4 PO_Method l Method M {"Color Overwrite" "Color Shift" "YCbCr Rotation" "" "" "" "" "" "" ""}}
 PO_Method "Color Shift"
 addUserKnob {26 ColorMixer_DEVIDER l "<b><font color=#70EE70>Color Mixer</font><b>"}
 addUserKnob {22 ColorMixer_Clear l Clear T "nuke.thisNode().knob(\"RED\").setValue(\[1,0,0])\nnuke.thisNode().knob(\"Green\").setValue(\[0,1,0])\nnuke.thisNode().knob(\"Blue\").setValue(\[0,0,1])\n\n" +STARTLINE}
 addUserKnob {6 ColorMixer_Enable l Enable -STARTLINE}
 addUserKnob {41 RED T NoOp1.RED}
 addUserKnob {41 Green l GREEN T NoOp1.Green}
 addUserKnob {41 Blue l BLUE T NoOp1.Blue}
 addUserKnob {20 PAGE_HUE l "Hue Corrections"}
 addUserKnob {26 HueShift_DEVIDER l "<b><font color=#70EE70>Hue Shift</font><b>"}
 addUserKnob {22 HueShift_Clear l Clear T "string = \"\"\"HueVsHue \{amount L 0.5 s0 0.5 s-0 t0 0.5 s0 0.5 s0 0.5 s0 0.5 s0 0.5 s0\}\nHueVsSat \{amount L 0.5 s0 0.5 s-0 t0 0.5 s0 0.5 s0 0.5 s0 0.5 s0 0.5 s0\}\nHueVsLum \{amount L 0.5 s0 0.5 s-0 t0 0.5 s0 0.5 s0 0.5 s0 0.5 s0 0.5 s0\}\nSatVsSat \{master L x-1 0.5 0.5 x6 0.5 K x7 0.5\}\nSatVsLum \{master L x-1 0.5 0.5 x6 0.5 K x7 0.5\}\nBlackAndWhite \{amount L 0.5 s0 0.5 s-0 t0 0.5 s0 0.5 s0 0.5 s0 0.5 s0 0.5 s0\}\n\"\"\"\nwith nuke.thisNode():\n    nuke.toNode(\"HueKeyer2\").knob(\"lut\").fromScript(string)" +STARTLINE}
 addUserKnob {6 HueShift_Enable l Enable -STARTLINE}
 addUserKnob {41 lut l "" +STARTLINE T HueKeyer2.lut}
 addUserKnob {26 TEEEEEEEEEEEEEEEEEEEEEEEEEEEEEST l "<b><font color=#70EE70>Settings</font><b>"}
 addUserKnob {6 BW_Enable l "Enable Black and White" +STARTLINE}
 addUserKnob {7 BWSoftFilter l "BW Soft Filter"}
 BWSoftFilter 0.245
 addUserKnob {26 soft_devider l "" +STARTLINE T "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-"}
 addUserKnob {20 Vingette}
 addUserKnob {26 Vingette_DEVIDER l "<b><font color=#70EE70>Vingette Add</font><b>"}
 addUserKnob {22 Vingette_Clear l Clear T "nuke.thisNode().knob(\"Vin_Scale\").setValue(0.7)\nnuke.thisNode().knob(\"Vin_Feather\").setValue(0.8)\nnuke.thisNode().knob(\"Vin_Gain\").setValue(1)" +STARTLINE}
 addUserKnob {6 Vingette_Enable l Enable -STARTLINE}
 addUserKnob {18 Vin_Gain l Gain}
 Vin_Gain 1
 addUserKnob {6 Vin_Gain_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Vin_Gain_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Vin_Gain_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Vin_Gain_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Vin_Gain_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Vin_Gain_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 Vin_Gain_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 Vin_Scale l Scale R 0.5 4}
 Vin_Scale 0.7
 addUserKnob {7 Vin_Feather l Feather}
 Vin_Feather 0.8
 addUserKnob {12 Vin_Offset l Center}
 addUserKnob {6 Vin_HighlightPrio l "Highlight Preservation" +STARTLINE}
 Vin_HighlightPrio true
 addUserKnob {4 Vin_Method l "" -STARTLINE M {Straight Ease Gaussian "" ""}}
 addUserKnob {7 Vin_HilightIn l In R 0 3}
 addUserKnob {7 Vin_HilightOut l Out -STARTLINE R 0.5 3}
 Vin_HilightOut 0.98
 addUserKnob {26 VingetteOver_DEVIDER l "<b><font color=#70EE70>Vingette Over</font><b>"}
 addUserKnob {22 VingetteO_Clear l Clear T "nuke.thisNode().knob(\"VinO_Scale\").setValue(0.5)\nnuke.thisNode().knob(\"VinO_Feather\").setValue(0.5)\nnuke.thisNode().knob(\"VinO_Opacity\").setValue(0)\nnuke.thisNode().knob(\"VinO_Tint\").setValue(0.5,0)\nnuke.thisNode().knob(\"VinO_Tint\").setValue(0.5,1)\nnuke.thisNode().knob(\"VinO_Tint\").setValue(0.5,2)" +STARTLINE}
 addUserKnob {6 VingetteO_Enable l Enable -STARTLINE}
 VingetteO_Enable true
 addUserKnob {7 VinO_Opacity l Opacity}
 addUserKnob {6 VinO_Invert l Inverse -STARTLINE}
 VinO_Invert true
 addUserKnob {7 VinO_Scale l Scale R 0 4}
 VinO_Scale 0.5
 addUserKnob {7 VinO_Feather l Feather}
 VinO_Feather 0.5
 addUserKnob {12 VinO_Offset l Center}
 addUserKnob {18 VinO_Tint l Tint R 0 2}
 VinO_Tint {0.5 0.5 0.5}
 addUserKnob {6 VinO_Tint_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 VinO_Tint_panelDropped true
 addUserKnob {6 VinO_Tint_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 VinO_Tint_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 VinO_Tint_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 VinO_Tint_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 VinO_Tint_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 VinO_Tint_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {20 Effects}
 addUserKnob {26 Sharpen_DEVIDER l "<b><font color=#70EE70>Sharpen</font><b>"}
 addUserKnob {22 Sharpen_Clear l Clear T "nuke.thisNode().knob(\"Grain_Size\").setValue(1)\nnuke.thisNode().knob(\"Grain_Intensity\").setValue(0.25)" +STARTLINE}
 addUserKnob {6 Sharpen_Enable l Enable -STARTLINE}
 addUserKnob {7 Sharpen_1 l Sharpen}
 Sharpen_1 0.4
 addUserKnob {26 Grain_DEVIDER l "<b><font color=#70EE70>Grain</font><b>"}
 addUserKnob {22 Grain_Clear l Clear T "nuke.thisNode().knob(\"Grain_Size\").setValue(1)\nnuke.thisNode().knob(\"Grain_Intensity\").setValue(0.25)" +STARTLINE}
 addUserKnob {6 Grain_Enable l Enable -STARTLINE}
 Grain_Enable true
 addUserKnob {7 Grain_Size l Size R 0 8}
 Grain_Size 1
 addUserKnob {7 Grain_Intensity l Intensity}
 Grain_Intensity 0.25
 addUserKnob {26 Mist_DEVIDER l "<b><font color=#70EE70>Mist</font><b>"}
 addUserKnob {22 Mist_Clear l Clear T "nuke.thisNode().knob(\"Grain_Size\").setValue(1)\nnuke.thisNode().knob(\"Grain_Intensity\").setValue(0.25)" +STARTLINE}
 addUserKnob {6 Mist_Enable l Enable -STARTLINE}
 addUserKnob {7 Mist_Opacity l Opacity}
 Mist_Opacity 0.345
 addUserKnob {7 Mist_Gamma l "Selection Curve"}
 Mist_Gamma 0.465
 addUserKnob {7 Feather}
 Feather 0.28
 addUserKnob {7 Mist_ColorMix l "Color Mix"}
 Mist_ColorMix 0.435
 addUserKnob {6 Mist_Premultiplied l Premult -STARTLINE}
 Mist_Premultiplied true
 addUserKnob {20 Mask}
 addUserKnob {26 Devider_Mask l Mask}
 addUserKnob {41 mix -STARTLINE T Merge18.mix}
 addUserKnob {41 invert_mask l invert -STARTLINE T Merge18.invert_mask}
}
 BackdropNode {
  inputs 0
  name BackdropNode16
  tile_color 0x63c681ff
  label "Hue Curves"
  note_font_size 42
  xpos 455
  ypos 779
  bdwidth 1236
  bdheight 482
  z_order -1
 }
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0xafc663ff
  label Lift/Gain/Gamma
  note_font_size 42
  xpos 467
  ypos -269
  bdwidth 540
  bdheight 583
 }
 BackdropNode {
  inputs 0
  name BackdropNode10
  tile_color 0x6369c6ff
  label "Overlay Vingette"
  note_font_size 42
  xpos 467
  ypos 2846
  bdwidth 445
  bdheight 122
 }
 BackdropNode {
  inputs 0
  name BackdropNode11
  tile_color 0x63c0c6ff
  label "Primaries Offset"
  note_font_size 42
  xpos 462
  ypos 1821
  bdwidth 483
  bdheight 276
 }
 BackdropNode {
  inputs 0
  name BackdropNode12
  tile_color 0x639fc6ff
  label "Two Strip (NYI)"
  note_font_size 42
  xpos 464
  ypos 2154
  bdwidth 452
  bdheight 202
 }
 BackdropNode {
  inputs 0
  name BackdropNode13
  tile_color 0x8863c6ff
  label Mist
  note_font_size 42
  xpos 464
  ypos 3227
  bdwidth 496
  bdheight 179
 }
 BackdropNode {
  inputs 0
  name BackdropNode14
  tile_color 0x9763c6ff
  label Grain
  note_font_size 42
  xpos 464
  ypos 3417
  bdwidth 498
  bdheight 140
 }
 BackdropNode {
  inputs 0
  name BackdropNode15
  tile_color 0x7363c6ff
  label Sharpen
  note_font_size 42
  xpos 468
  ypos 3034
  bdwidth 500
  bdheight 177
 }
 BackdropNode {
  inputs 0
  name BackdropNode17
  tile_color 0xaa5555ff
  label ColorMixer
  note_font_size 42
  xpos 489
  ypos -1823
  bdwidth 515
  bdheight 349
 }
 BackdropNode {
  inputs 0
  name BackdropNode19
  tile_color 0x6dc663ff
  label "Curves (NYI)"
  note_font_size 42
  xpos 464
  ypos 560
  bdwidth 539
  bdheight 152
 }
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0xc67a63ff
  label "Black & White Mix (NYI)"
  note_font_size 42
  xpos 490
  ypos -1447
  bdwidth 517
  bdheight 319
 }
 BackdropNode {
  inputs 0
  name BackdropNode20
  tile_color 0xaaaaaa00
  label REPLACE
  note_font_size 42
  xpos 956
  ypos 1820
  bdwidth 288
  bdheight 275
 }
 BackdropNode {
  inputs 0
  name BackdropNode21
  tile_color 0xaaaaaa00
  label "YCbCr Rotation"
  note_font_size 42
  xpos 1436
  ypos 1822
  bdwidth 313
  bdheight 272
 }
 BackdropNode {
  inputs 0
  name BackdropNode22
  tile_color 0x91c663ff
  label Shadow/Midtone/Highlights
  note_font_size 42
  xpos 465
  ypos 357
  bdwidth 545
  bdheight 155
 }
 BackdropNode {
  inputs 0
  name BackdropNode3
  tile_color 0x63c6a8ff
  label "Split Toning"
  note_font_size 42
  xpos 457
  ypos 1312
  bdwidth 443
  bdheight 365
 }
 BackdropNode {
  inputs 0
  name BackdropNode4
  tile_color 0xaaaaaa00
  label SHIFT
  note_font_size 42
  xpos 1264
  ypos 1821
  bdwidth 158
  bdheight 276
 }
 BackdropNode {
  inputs 0
  name BackdropNode5
  tile_color 0x388e8e00
  label "Used to store curves.\n(Do NOT cut and paste)"
  note_font_size 20
  xpos 1414
  ypos 943
  bdwidth 239
  bdheight 159
 }
 BackdropNode {
  inputs 0
  name BackdropNode6
  tile_color 0xc6bf63ff
  label "Color Boost"
  note_font_size 42
  xpos 499
  ypos -631
  bdwidth 526
  bdheight 261
 }
 BackdropNode {
  inputs 0
  name BackdropNode7
  tile_color 0xc69563ff
  label "Temperature & Tint"
  note_font_size 42
  xpos 499
  ypos -1091
  bdwidth 511
  bdheight 188
 }
 BackdropNode {
  inputs 0
  name BackdropNode8
  tile_color 0xc6aa63ff
  label "Base Color Correction"
  note_font_size 42
  xpos 499
  ypos -859
  bdwidth 516
  bdheight 182
 }
 BackdropNode {
  inputs 0
  name BackdropNode9
  tile_color 0x6387c6ff
  label "Gain Vingette"
  note_font_size 42
  xpos 467
  ypos 2519
  bdwidth 439
  bdheight 265
 }
 Input {
  inputs 0
  name Input
  xpos 509
  ypos -2122
 }
 Dot {
  name Dot47
  xpos 543
  ypos -2059
 }
set Nb4e6e9f0 [stack 0]
 Shuffle {
  alpha white
  name Shuffle21
  xpos 509
  ypos -2007
 }
 Dot {
  name Dot33
  xpos 543
  ypos -1708
 }
set Nb4e7f900 [stack 0]
 Dot {
  name Dot32
  xpos 749
  ypos -1708
 }
 ColorMatrix {
  matrix {
      {{(parent.NoOp1.RED.r/(parent.NoOp1.RED.r+parent.NoOp1.RED.g+parent.NoOp1.RED.b)*(parent.NoOp1.RED.r>=0?parent.NoOp1.RED.r:-parent.NoOp1.RED.r))} {(parent.NoOp1.RED.g/(parent.NoOp1.RED.r+parent.NoOp1.RED.g+parent.NoOp1.RED.b)*(parent.NoOp1.RED.g>=0?parent.NoOp1.RED.g:-parent.NoOp1.RED.g))} {(parent.NoOp1.RED.b/(parent.NoOp1.RED.r+parent.NoOp1.RED.g+parent.NoOp1.RED.b)*(parent.NoOp1.RED.b>=0?parent.NoOp1.RED.b:-parent.NoOp1.RED.b))}}
      {{(parent.NoOp1.Green.r/(parent.NoOp1.Green.r+parent.NoOp1.Green.g+parent.NoOp1.Green.b)*(parent.NoOp1.Green.r>=0?parent.NoOp1.Green.r:-parent.NoOp1.Green.r))} {(parent.NoOp1.Green.g/(parent.NoOp1.Green.r+parent.NoOp1.Green.g+parent.NoOp1.Green.b)*(parent.NoOp1.Green.g>=0?parent.NoOp1.Green.g:-parent.NoOp1.Green.g))} {(parent.NoOp1.Green.b/(parent.NoOp1.Green.r+parent.NoOp1.Green.g+parent.NoOp1.Green.b)*(parent.NoOp1.Green.b>=0?parent.NoOp1.Green.b:-parent.NoOp1.Green.b))}}
      {{(parent.NoOp1.Blue.r/(parent.NoOp1.Blue.r+parent.NoOp1.Blue.g+parent.NoOp1.Blue.b)*(parent.NoOp1.Blue.r>=0?parent.NoOp1.Blue.r:-parent.NoOp1.Blue.r))} {(parent.NoOp1.Blue.g/(parent.NoOp1.Blue.r+parent.NoOp1.Blue.g+parent.NoOp1.Blue.b)*(parent.NoOp1.Blue.g>=0?parent.NoOp1.Blue.g:-parent.NoOp1.Blue.g))} {(parent.NoOp1.Blue.b/(parent.NoOp1.Blue.r+parent.NoOp1.Blue.g+parent.NoOp1.Blue.b)*(parent.NoOp1.Blue.b>=0?parent.NoOp1.Blue.b:-parent.NoOp1.Blue.b))}}
    }
  name ColorMatrix3
  xpos 715
  ypos -1633
 }
 Expression {
  expr0 isnan(r)==1?0:r
  expr1 isnan(g)==1?0:g
  expr2 isnan(b)==1?0:b
  name Expression3
  xpos 715
  ypos -1530
 }
push $Nb4e7f900
 Switch {
  inputs 2
  which {{parent.ColorMixer_Enable}}
  name Switch1
  xpos 509
  ypos -1530
 }
 Dot {
  name Dot12
  xpos 543
  ypos -1354
 }
set Nb48bff10 [stack 0]
 Dot {
  name Dot13
  xpos 814
  ypos -1354
 }
 Saturation {
  saturation 0
  mode Maximum
  name Saturation1
  xpos 780
  ypos -1250
 }
set Nb4c3f540 [stack 0]
 Dot {
  name Dot14
  xpos 814
  ypos -1153
 }
push $Nb4c3f540
 ColorLookup {
  lut {master {curve C x0.008857131004 0 s0.400000006 v1.05014801 L x0.7664735317 1 s0.5 t0 u1.130736947}
    red {}
    green {}
    blue {}
    alpha {}}
  name ColorLookup1
  xpos 678
  ypos -1250
 }
 Shuffle {
  green red
  blue red
  alpha red
  name Shuffle3
  xpos 678
  ypos -1224
 }
push $Nb48bff10
 HueKeyer {
  lut {amount {curve L 0.5 s0 0.5 s-0 t0 0.5 s0 0.5 s0 0.5 s0 0.5 s0 0.5 s0}
    sat_thrsh {curve 0}}
  invert false
  name BlackAndWhite
  xpos 509
  ypos -1331
  disable {{1-parent.BW_Enable}}
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle2
  xpos 509
  ypos -1285
  disable {{1-parent.BW_Enable}}
 }
set Nb4c6e620 [stack 0]
 Shuffle {
  red white
  green white
  blue white
  alpha white
  name Shuffle4
  xpos 619
  ypos -1285
 }
 Dot {
  name Dot15
  xpos 653
  ypos -1252
 }
push $Nb4c6e620
 Blur {
  size {{75*parent.BWSoftFilter}}
  filter box
  quality 2
  name Blur2
  xpos 509
  ypos -1259
  disable {{1-parent.BW_Enable}}
 }
 Merge2 {
  inputs 2+1
  maskChannelMask rgba.red
  name Merge1
  xpos 509
  ypos -1224
  disable {{1-parent.BW_Enable}}
 }
set Nb4c97830 [stack 0]
 Merge2 {
  inputs 2
  operation multiply
  name Merge4
  xpos 509
  ypos -1157
  disable {{1-parent.BW_Enable}}
 }
 Colorspace {
  colorspace_out CIE-XYZ
  name Colorspace3
  xpos 509
  ypos -1011
  disable {{1-parent.General_Enable}}
 }
 Grade {
  white {1 {parent.Tint*0.1+0.9} {parent.Temperature*0.5+0.5} 1}
  black_clamp false
  name Grade2
  xpos 509
  ypos -972
  disable {{parent.Colorspace3.disable}}
 }
set Nb4e985f0 [stack 0]
 Colorspace {
  colorspace_in CIE-XYZ
  name Colorspace7
  xpos 509
  ypos -933
  disable {{parent.Colorspace3.disable}}
 }
 Saturation {
  saturation {{parent.Saturation}}
  name Saturation2
  xpos 509
  ypos -795
  disable {{1-parent.General_Enable}}
 }
 Grade {
  black_clamp false
  name BaseGrade
  xpos 509
  ypos -769
  disable {{1-parent.General_Enable}}
 }
set Nb4ea4be0 [stack 0]
 EXPTool {
  mode Stops
  red 2.046
  green 2.046
  blue 2.046
  name Exposure1
  xpos 509
  ypos -743
  disable {{parent.red==0?1:1-parent.General_Enable}}
 }
 Expression {
  temp_name0 Gamma
  temp_expr0 parent.Contrast
  expr0 "r<1&&r>0?r<0.5?pow(r,Gamma)*pow(0.5, 1-Gamma):1-pow(1-r,Gamma)*pow(0.5, 1-Gamma):r"
  expr1 "g<1&&g>0?g<0.5?pow(g,Gamma)*pow(0.5, 1-Gamma):1-pow(1-g,Gamma)*pow(0.5, 1-Gamma):g"
  expr2 "b<1&&b>0?b<0.5?pow(b,Gamma)*pow(0.5, 1-Gamma):1-pow(1-b,Gamma)*pow(0.5, 1-Gamma):b"
  name Expression9
  xpos 509
  ypos -717
  disable {{parent.Contrast==1?1:1-parent.General_Enable}}
 }
 Expression {
  temp_name0 Gamma
  temp_expr0 parent.Contrast
  expr0 r<1?(r>0?r:1-pow(1-r,1/(pow(Gamma,4)))):pow(r,1/(pow(Gamma,4)))
  expr1 g<1?(g>0?g:1-pow(1-g,1/(pow(Gamma,4)))):pow(g,1/(pow(Gamma,4)))
  expr2 b<1?(b>0?b:1-pow(1-b,1/(pow(Gamma,4)))):pow(b,1/(pow(Gamma,4)))
  name Expression4
  xpos 509
  ypos -691
  disable {{parent.Contrast==1?1:1-parent.General_Enable}}
 }
 Dot {
  name Dot55
  xpos 543
  ypos -576
 }
set Nb4ed4520 [stack 0]
 Colorspace {
  colorspace_out HSV
  name Colorspace1
  xpos 509
  ypos -558
  disable {{parent.ColorBoost==1?1:1-parent.General_Enable}}
 }
 Grade {
  channels {-rgba.red rgba.green -rgba.blue none}
  gamma {{parent.ColorBoost}}
  black_clamp false
  name Grade4
  xpos 509
  ypos -532
  disable {{parent.Colorspace1.disable}}
 }
set Nb4ee97a0 [stack 0]
 Dot {
  name Dot9
  xpos 424
  ypos -528
 }
push $Nb4e985f0
 Dot {
  name Dot11
  xpos 428
  ypos -968
 }
push $Nb4c97830
 Dot {
  name Dot16
  xpos 438
  ypos -1220
 }
 StickyNote {
  inputs 0
  name StickyNote10
  label "<center>Black and White Mix\n"
  xpos 335
  ypos -1233
 }
push $Nb4ed4520
 Dot {
  name Dot56
  xpos 637
  ypos -576
 }
 Colorspace {
  colorspace_out YCbCr
  name Colorspace13
  xpos 603
  ypos -454
  disable {{parent.ColorBoost==1?1:0}}
 }
push $Nb4ee97a0
 Colorspace {
  colorspace_in HSV
  name Colorspace2
  xpos 509
  ypos -506
  disable {{parent.Colorspace1.disable}}
 }
 Colorspace {
  colorspace_out YCbCr
  name Colorspace14
  xpos 509
  ypos -480
  disable {{parent.Colorspace1.disable}}
 }
 ShuffleCopy {
  inputs 2
  red red
  alpha alpha2
  name ShuffleCopy2
  xpos 509
  ypos -454
  disable {{parent.Colorspace1.disable}}
 }
 Colorspace {
  colorspace_in YCbCr
  name Colorspace15
  xpos 509
  ypos -428
  disable {{parent.Colorspace1.disable}}
 }
 Dot {
  name Dot53
  xpos 543
  ypos -195
 }
set Nb5804b20 [stack 0]
 Colorspace {
  colorspace_out SLog1
  name LGGColorspace_in
  xpos 509
  ypos -123
 }
set Nb58087b0 [stack 0]
 Dot {
  name Dot4
  xpos 772
  ypos -119
 }
 Grade {
  black {{parent.LiftEnabled?parent.Lift.a-1:0}}
  white {{parent.GainEnabled?parent.Gain.a:1}}
  gamma {{parent.GammaEnabled?parent.Gamma.a:1}}
  black_clamp false
  name LuminanceMod
  xpos 738
  ypos -17
 }
 Colorspace {
  colorspace_in {{parent.LGGColorspace_in.colorspace_out}}
  name LGGColorspace_OutL
  xpos 738
  ypos 45
 }
 Colorspace {
  colorspace_out YCbCr
  name Colorspace5
  xpos 738
  ypos 100
 }
 Shuffle {
  alpha white
  name Shuffle23
  xpos 738
  ypos 164
 }
push $Nb58087b0
 Grade {
  black {{parent.LiftEnabled?((parent.Lift.r-((parent.Lift.r+parent.Lift.g+parent.Lift.b)/3))*1)+(parent.Lift.a)-1:0} {parent.LiftEnabled?((parent.Lift.g-((parent.Lift.r+parent.Lift.g+parent.Lift.b)/3))*1)+(parent.Lift.a)-1:0} {parent.LiftEnabled?((parent.Lift.b-((parent.Lift.r+parent.Lift.g+parent.Lift.b)/3))*1)+(parent.Lift.a)-1:0} 1}
  white {{parent.GainEnabled?((parent.Gain.r-((parent.Gain.r+parent.Gain.g+parent.Gain.b)/3))*1)+(parent.Gain.a):1} {parent.GainEnabled?((parent.Gain.g-((parent.Gain.r+parent.Gain.g+parent.Gain.b)/3))*1)+(parent.Gain.a):1} {parent.GainEnabled?((parent.Gain.b-((parent.Gain.r+parent.Gain.g+parent.Gain.b)/3))*1)+(parent.Gain.a):1} {curve}}
  gamma {{parent.GammaEnabled?((parent.Gamma.r-((parent.Gamma.r+parent.Gamma.g+parent.Gamma.b)/3))*1)+(parent.Gamma.a):1} {parent.GammaEnabled?((parent.Gamma.g-((parent.Gamma.r+parent.Gamma.g+parent.Gamma.b)/3))*1)+(parent.Gamma.a):1} {parent.GammaEnabled?((parent.Gamma.b-((parent.Gamma.r+parent.Gamma.g+parent.Gamma.b)/3))*1)+(parent.Gamma.a):1} {curve}}
  black_clamp false
  name Grade1
  xpos 510
  ypos -18
 }
 Colorspace {
  colorspace_in {{parent.LGGColorspace_in.colorspace_out}}
  name LGGColorspace_Out
  xpos 510
  ypos 54
 }
 Colorspace {
  colorspace_out YCbCr
  name Colorspace4
  xpos 510
  ypos 101
  disable {{parent.LumaMix==0?1:0}}
 }
 Merge2 {
  inputs 2
  Achannels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  Bchannels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  output {rgba.red -rgba.green -rgba.blue rgba.alpha}
  mix {{parent.LumaMix}}
  name Merge2
  xpos 510
  ypos 158
 }
 Colorspace {
  colorspace_in YCbCr
  name Colorspace6
  xpos 510
  ypos 216
  disable {{parent.LumaMix==0?1:0}}
 }
push $Nb5804b20
 Dot {
  name Dot54
  xpos 481
  ypos -195
 }
 Dot {
  name Dot52
  xpos 481
  ypos 294
 }
 Switch {
  inputs 2
  which {{parent.liftgammagain_Enable}}
  name Switch4
  xpos 509
  ypos 290
 }
 ColorCorrect {
  shadows.gain {{((parent.Shadows.r-((parent.Shadows.r+parent.Shadows.g+parent.Shadows.b)/3))*2)+(parent.Shadows.a)} {((parent.Shadows.g-((parent.Shadows.r+parent.Shadows.g+parent.Shadows.b)/3))*2)+(parent.Shadows.a)} {((parent.Shadows.b-((parent.Shadows.r+parent.Shadows.g+parent.Shadows.b)/3))*2)+(parent.Shadows.a)} 1}
  midtones.gain {{((parent.Midtones.r-((parent.Midtones.r+parent.Midtones.g+parent.Midtones.b)/3))*1)+(parent.Midtones.a)} {((parent.Midtones.g-((parent.Midtones.r+parent.Midtones.g+parent.Midtones.b)/3))*1)+(parent.Midtones.a)} {((parent.Midtones.b-((parent.Midtones.r+parent.Midtones.g+parent.Midtones.b)/3))*1)+(parent.Midtones.a)} 1}
  highlights.gain {{((parent.Highlights.r-((parent.Highlights.r+parent.Highlights.g+parent.Highlights.b)/3))*2)+(parent.Highlights.a)} {((parent.Highlights.g-((parent.Highlights.r+parent.Highlights.g+parent.Highlights.b)/3))*2)+(parent.Highlights.a)} {((parent.Highlights.b-((parent.Highlights.r+parent.Highlights.g+parent.Highlights.b)/3))*2)+(parent.Highlights.a)} 1}
  lookup {shadow {curve 1 s0 x0.5 0 s0}
    midtone {1-shadow-highlight}
    highlight {}}
  name BaseColorCorrect
  knobChanged RunNodeC()
  xpos 509
  ypos 434
  disable {{1-parent.SMH_Enable}}
  addUserKnob {20 User}
  addUserKnob {22 RunThis T "def RunNodeC():\n\tif nuke.thisKnob().Class() == \"Array_Knob\":\n\t\t\tthisNode = nuke.thisNode().fullName().split(\".\")\[-2]\n\t\t\twith nuke.Root():\n\t\t\t\tinputNode = nuke.toNode(thisNode)\n\t\t\t#nuke.message( inputNode)\n\t\t\twith inputNode:\n\t\t\t\tshadowval = nuke.toNode(inputNode.name()+\".BaseColorCorrect\").knob(\"low\").value()\n\t\t\t\thighlightval = nuke.toNode(inputNode.name()+\".BaseColorCorrect\").knob(\"High\").value()\n\t\t\t\tcurve = nuke.toNode(inputNode.name()+\".BaseColorCorrect\").knob(\"lookup\").toScript()\n\t\t\t\tmyCurve = curve.splitlines()\[0]\n\t\t\t\tmyCurve = \"shadow \{curve 1 s0 x0.5 0 s0\}\"\n\t\t\t\tmyCurve = myCurve.replace(myCurve.split(\" \")\[4]\[1:],str(shadowval))\n\t\t\t\tnuke.toNode(inputNode.name()+\".BaseColorCorrect\").knob(\"lookup\").editCurve(\"shadow\",myCurve.replace(\"shadow\",\"curve\")\[7:-1])\n\t\t\t\tmyCurve = curve.splitlines()\[2]\n\t\t\t\tmyCurve = \"highlight \{curve x0.5 0 s0 x1 1 s0\}\"\n\t\t\t\tmyCurve = myCurve.replace(myCurve.split(\" \")\[2]\[1:],str(highlightval))\n\t\t\t\tnuke.toNode(inputNode.name()+\".BaseColorCorrect\").knob(\"lookup\").editCurve(\"highlight\",myCurve.replace(\"highlight\",\"curve\")\[7:-1])\nnuke.toNode(\"BaseColorCorrect\").knob('knobChanged').setValue(\"RunNodeC()\")\n" +STARTLINE}
  addUserKnob {7 low l Low}
  low 0.5
  addUserKnob {7 High}
  High 0.5
 }
 ColorLookup {
  name ColorLookup2
  xpos 509
  ypos 660
  disable true
 }
 Dot {
  name Dot34
  xpos 543
  ypos 857
 }
set Nb58d2740 [stack 0]
 Dot {
  name Dot5
  xpos 694
  ypos 857
 }
set Nb58d6350 [stack 0]
 Colorspace {
  colorspace_out HSL
  name Hue_HSL_To
  xpos 660
  ypos 888
 }
set Nb58d9f90 [stack 0]
 Grade {
  multiply 6
  black_clamp false
  name Grade8
  xpos 1064
  ypos 888
 }
 Dot {
  name Dot39
  xpos 1174
  ypos 892
 }
set Nb58f6c90 [stack 0]
 Dot {
  name Dot40
  xpos 1284
  ypos 892
 }
 Shuffle {
  red blue
  green blue
  alpha blue
  name Shuffle17
  xpos 1250
  ypos 934
 }
 ColorLookup {
  lut {master {curve L x-1 0.5 0.5 x6 0.5 K x7 0.5}
    red {}
    green {}
    blue {}
    alpha {}}
  name SatVsLum
  xpos 1250
  ypos 960
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle18
  xpos 1250
  ypos 986
 }
 Grade {
  channels rgba
  multiply 2
  black_clamp false
  name Grade9
  xpos 1250
  ypos 1012
 }
 Dot {
  name Dot38
  xpos 1284
  ypos 1164
 }
push $Nb58f6c90
 Shuffle {
  red green
  blue green
  alpha green
  name Shuffle16
  xpos 1140
  ypos 934
 }
 ColorLookup {
  lut {master {curve L x-1 0.5 0.5 x6 0.5 K x7 0.5}
    red {}
    green {}
    blue {}
    alpha {}}
  name SatVsSat
  xpos 1140
  ypos 960
 }
 Shuffle {
  green red
  blue red
  alpha red
  name Shuffle19
  xpos 1140
  ypos 986
 }
 Grade {
  channels rgba
  multiply 2
  black_clamp false
  name Grade11
  xpos 1140
  ypos 1012
 }
 Dot {
  name Dot41
  xpos 1174
  ypos 1138
 }
push $Nb58d6350
 Dot {
  name Dot36
  xpos 804
  ypos 857
 }
set Nb596f250 [stack 0]
 Dot {
  name Dot42
  xpos 914
  ypos 857
 }
set Nb5972e90 [stack 0]
 Dot {
  name Dot43
  xpos 1024
  ypos 857
 }
 HueKeyer {
  lut {amount {curve i L 0.5 s0 0.5 s-0 t0 0.5 s0 0.5 s0 0.5 s0 0.5 s0 0.5 s0}
    sat_thrsh {curve 0 x6 0 s0}}
  invert false
  name HueVsLum
  xpos 990
  ypos 939
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle20
  xpos 990
  ypos 977
 }
 Grade {
  multiply 2
  black_clamp false
  name Grade12
  xpos 990
  ypos 1003
 }
 Dot {
  name Dot45
  xpos 1024
  ypos 1106
 }
push $Nb5972e90
 HueKeyer {
  lut {amount {curve L 0.5 s0 0.5 s-0 t0 0.5 s0 0.5 s0 0.5 s0 0.5 s0 0.5 s0}
    sat_thrsh {}}
  invert false
  name HueVsSat
  xpos 880
  ypos 939
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle15
  xpos 880
  ypos 977
 }
 Grade {
  multiply 2
  black_clamp false
  name Grade10
  xpos 880
  ypos 1003
 }
 Dot {
  name Dot44
  xpos 914
  ypos 1068
 }
push $Nb58d9f90
push $Nb596f250
 HueKeyer {
  lut {amount {curve L 0.5 s0 0.5 s-0 t0 0.5 s0 0.5 s0 0.5 s0 0.5 s0 0.5 s0}
    sat_thrsh {curve 0 x6 0 s0}}
  invert false
  name HueVsHue
  xpos 770
  ypos 913
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle14
  xpos 770
  ypos 951
 }
 MergeExpression {
  inputs 2
  expr0 ((B.Red-0.5)*((A.Blue*2)-0.5))+0.5
  name MergeExpression1
  xpos 770
  ypos 977
  disable true
 }
 Grade {
  channels rgba
  add 0.5
  black_clamp false
  name Grade7
  xpos 770
  ypos 1003
 }
 Dot {
  name Dot46
  xpos 804
  ypos 1036
 }
push $Nb58d9f90
 Merge2 {
  inputs 2
  operation plus
  Achannels {rgba.red -rgba.green -rgba.blue -rgba.alpha}
  Bchannels {rgba.red -rgba.green -rgba.blue -rgba.alpha}
  output {rgba.red -rgba.green -rgba.blue -rgba.alpha}
  name Merge13
  xpos 660
  ypos 1032
 }
 Merge2 {
  inputs 2
  operation multiply
  Achannels {-rgba.red rgba.green -rgba.blue rgba.alpha}
  Bchannels {-rgba.red rgba.green -rgba.blue rgba.alpha}
  output {-rgba.red rgba.green -rgba.blue rgba.alpha}
  name Merge16
  xpos 660
  ypos 1058
 }
 Merge2 {
  inputs 2
  operation multiply
  Achannels {-rgba.red -rgba.green rgba.blue rgba.alpha}
  Bchannels {-rgba.red -rgba.green rgba.blue rgba.alpha}
  output {-rgba.red -rgba.green rgba.blue rgba.alpha}
  name Merge17
  xpos 660
  ypos 1096
 }
 Merge2 {
  inputs 2
  operation multiply
  Achannels {-rgba.red rgba.green -rgba.blue -rgba.alpha}
  Bchannels {-rgba.red rgba.green -rgba.blue -rgba.alpha}
  output {-rgba.red rgba.green -rgba.blue -rgba.alpha}
  name Merge15
  xpos 660
  ypos 1134
 }
 Merge2 {
  inputs 2
  operation multiply
  Achannels {-rgba.red rgba.green -rgba.blue -rgba.alpha}
  Bchannels {-rgba.red rgba.green -rgba.blue -rgba.alpha}
  output {-rgba.red rgba.green -rgba.blue -rgba.alpha}
  name Merge14
  xpos 660
  ypos 1160
 }
 Colorspace {
  colorspace_in HSL
  name Hue_HSL_From
  xpos 660
  ypos 1186
 }
 Dot {
  name Dot37
  xpos 694
  ypos 1223
 }
push $Nb58d2740
 Switch {
  inputs 2
  which {{parent.HueShift_Enable}}
  name Switch3
  xpos 509
  ypos 1219
 }
 Dot {
  name Dot17
  xpos 543
  ypos 1372
 }
set Nb5a505f0 [stack 0]
 Colorspace {
  colorspace_out HSL
  name Colorspace8
  xpos 709
  ypos 1368
 }
set Nb5a542b0 [stack 0]
 Dot {
  name Dot18
  xpos 837
  ypos 1459
 }
 Grade {
  white {{1+(parent.Split_Contrast/2)}}
  add {{parent.Split_Offset}}
  gamma {{1-(parent.Split_Contrast/2)}}
  black_clamp false
  name Grade3
  xpos 803
  ypos 1631
 }
 Shuffle {
  name Shuffle9
  xpos 711
  ypos 1631
 }
push $Nb5a542b0
 Expression {
  expr0 parent.Split_Bright_Hue
  expr1 parent.Split_Bright_Sat
  name Expression5
  xpos 709
  ypos 1434
 }
 Colorspace {
  colorspace_in HSL
  name Colorspace9
  xpos 709
  ypos 1513
 }
 Shuffle {
  alpha white
  name Shuffle1
  xpos 709
  ypos 1539
 }
push $Nb5a542b0
 Expression {
  expr0 parent.Split_Dark_Hue
  expr1 parent.Split_Dark_Sat
  name Expression6
  xpos 601
  ypos 1435
 }
 Colorspace {
  colorspace_in HSL
  name Colorspace10
  xpos 601
  ypos 1514
 }
 Shuffle {
  alpha white
  name Shuffle5
  xpos 601
  ypos 1540
 }
 Merge2 {
  inputs 2+1
  maskChannelMask rgba.blue
  name Merge5
  xpos 601
  ypos 1631
 }
push $Nb5a505f0
 Merge2 {
  inputs 2
  mix {{parent.Split_Mix}}
  name Merge6
  xpos 509
  ypos 1631
  disable {{1-parent.SplitToning_Enable}}
 }
set Nb5ae3870 [stack 0]
 Dot {
  name Dot19
  xpos 391
  ypos 1635
 }
 StickyNote {
  inputs 0
  name StickyNote11
  label "<center>Split Toning\n"
  xpos 322
  ypos 1621
 }
push $Nb5ae3870
 Dot {
  name Dot20
  xpos 543
  ypos 1900
 }
set Nb5af8170 [stack 0]
 Dot {
  name Dot58
  xpos 1059
  ypos 1900
 }
set Nb5b00000 [stack 0]
 Dot {
  name Dot21
  xpos 1177
  ypos 1900
 }
set Nb5b03930 [stack 0]
 Dot {
  name Dot57
  xpos 1349
  ypos 1900
 }
set Nb5b07570 [stack 0]
 Dot {
  name Dot60
  xpos 1588
  ypos 1900
 }
 Colorspace {
  colorspace_out YCbCr
  name Colorspace16
  xpos 1554
  ypos 1931
 }
 Expression {
  temp_name0 cosThetaB
  temp_expr0 "cos((RotationB+180) * (PI / 180))"
  temp_name1 sinThetaB
  temp_expr1 "sin((RotationB+180) * (PI / 180))"
  temp_name2 cosTheta
  temp_expr2 "cos(Rotation * (PI / 180))"
  temp_name3 sinTheta
  temp_expr3 "sin(Rotation * (PI / 180))"
  expr1 "(cosTheta * (g - 0.5) - sinTheta * (b - 0.5) + 0.5)"
  expr2 "(sinThetaB * (g - 0.5) - cosThetaB * (b - 0.5) + 0.5)"
  name Expression7
  xpos 1554
  ypos 1957
  addUserKnob {20 User}
  addUserKnob {7 Rotation R -180 180}
  Rotation {{180*parent.Prim_HueRed}}
  addUserKnob {7 RotationB R -180 180}
  RotationB {{180*parent.Prim_HueGreen}}
 }
 Colorspace {
  colorspace_in YCbCr
  name Colorspace17
  xpos 1554
  ypos 1983
 }
 Dot {
  name Dot61
  xpos 1588
  ypos 2063
 }
push $Nb5b07570
 ColorMatrix {
  matrix {
      {{(1+(parent.Prim_HueBlue))+(parent.Prim_HueGreen)} {-parent.Prim_HueGreen} {-parent.Prim_HueBlue}}
      {{parent.Prim_HueRed} {(1+(-parent.Prim_HueBlue))-(parent.Prim_HueRed)} {parent.Prim_HueBlue}}
      {{-parent.Prim_HueRed} {parent.Prim_HueGreen} {(1+(-parent.Prim_HueGreen))+parent.Prim_HueRed}}
    }
  name ShiftMatrix
  label "Custom Recipe \nBy Mads Hagbarth Lund"
  note_font "Verdana Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold"
  note_font_size 9
  xpos 1315
  ypos 1965
 }
 Dot {
  name Dot59
  xpos 1349
  ypos 2025
 }
push $Nb5b03930
 Keyer {
  invert true
  operation "luminance key"
  range {0.5795876367 1 1 1}
  name Keyer1
  xpos 1143
  ypos 1971
 }
push $Nb5b00000
 ColorMatrix {
  inputs 1+1
  matrix {
      {1 {parent.Prim_HueGreen} {-parent.Prim_HueBlue}}
      {{-parent.Prim_HueRed} 1 {parent.Prim_HueBlue}}
      {{parent.Prim_HueRed} {-parent.Prim_HueGreen} 1}
    }
  name ReplaceMatrix
  label "Custom Recipe \nBy Mads Hagbarth Lund"
  note_font "Verdana Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold"
  note_font_size 9
  xpos 1025
  ypos 1964
 }
 Switch {
  inputs 3
  which {{parent.PO_Method}}
  name Switch7
  xpos 722
  ypos 2059
 }
push $Nb5af8170
 Switch {
  inputs 2
  which {{parent.Primaries_Enable}}
  name Switch6
  xpos 511
  ypos 2059
 }
set Nb4f0ed40 [stack 0]
 Dot {
  name Dot23
  xpos 543
  ypos 2218
 }
set Nb4f15450 [stack 0]
 Dot {
  name Dot24
  xpos 643
  ypos 2218
 }
set Nb4f19110 [stack 0]
 Shuffle {
  blue green
  alpha white
  name Shuffle6
  xpos 719
  ypos 2214
 }
push $Nb4f19110
 Shuffle {
  green blue
  alpha white
  name Shuffle7
  xpos 609
  ypos 2256
 }
 Merge2 {
  inputs 2
  mix 0.445
  name Merge7
  xpos 719
  ypos 2256
 }
push $Nb4f19110
 Merge2 {
  inputs 2
  mix 0.6
  name Merge8
  selected true
  xpos 719
  ypos 2299
 }
push $Nb4f15450
 AddMix {
  inputs 2
  mix {{parent.Split_Mix}}
  name AddMix1
  xpos 509
  ypos 2299
  disable true
 }
set Nb48e6740 [stack 0]
 Dot {
  name Dot25
  xpos 374
  ypos 2303
 }
 StickyNote {
  inputs 0
  name StickyNote13
  label "<center>Two Strip\n"
  xpos 305
  ypos 2289
 }
 StickyNote {
  inputs 0
  name StickyNote9
  label "<center>Converting to CIE-XYZ\nfor control.\nWill disable if values are default"
  xpos 268
  ypos -979
 }
push $Nb4f0ed40
 Dot {
  name Dot22
  xpos 379
  ypos 2063
 }
 StickyNote {
  inputs 0
  name StickyNote12
  label "<center>Prim Offset\nFor post balancing\n"
  xpos 310
  ypos 2049
 }
push $Nb4e6e9f0
 Dot {
  name Dot49
  xpos 95
  ypos -2059
 }
 Dot {
  name Dot48
  xpos 95
  ypos 3790
 }
 Dot {
  name Dot50
  xpos 453
  ypos 3790
 }
set Nb5c0c3d0 [stack 0]
 Input {
  inputs 0
  name Mask
  xpos 748
  ypos 3786
  number 1
 }
push $Nb48e6740
 Dot {
  name Dot26
  xpos 543
  ypos 2455
 }
set Nb5c13bc0 [stack 0]
 Shuffle {
  red black
  green black
  blue black
  alpha black
  name Shuffle8
  xpos 742
  ypos 2451
 }
 Dot {
  name Dot27
  xpos 924
  ypos 2455
 }
 Dot {
  name Dot28
  xpos 924
  ypos 2718
 }
set Nb5c287a0 [stack 0]
 Dot {
  name Dot29
  xpos 924
  ypos 2915
 }
 Radial {
  invert {{parent.VinO_Invert}}
  area {{((width/2)-(width*parent.VinO_Scale))+(width*((VinO_Offset.x)/1000))} {((height/2)-(height*parent.VinO_Scale))+(height*((VinO_Offset.y)/1000))} {((width/2)+(width*parent.VinO_Scale))+(width*((VinO_Offset.x)/1000))} {((height/2)+(height*parent.VinO_Scale))+(height*((VinO_Offset.y)/1000))}}
  softness {{parent.VinO_Feather}}
  color {{parent.VinO_Tint} {parent.VinO_Tint} {parent.VinO_Tint} {parent.VinO_Tint}}
  name Radial2
  xpos 737
  ypos 2911
 }
push $Nb5c13bc0
 Dot {
  name Dot30
  xpos 543
  ypos 2596
 }
set Nb5c3cae0 [stack 0]
 Keyer {
  invert true
  operation "luminance key"
  range {{parent.Vin_HilightIn} {parent.Vin_HilightOut} 999999 999999}
  name Keyer2
  xpos 636
  ypos 2586
 }
set Nb5c40750 [stack 0]
 Expression {
  expr3 "( 1- exp( -4 * pow2(a)) ) * 1.018657"
  name Expression1
  xpos 713
  ypos 2634
 }
push $Nb5c40750
 Expression {
  expr3 "0.5 - 0.5 * cos( a * pi )"
  name Expression2
  xpos 565
  ypos 2629
 }
push $Nb5c40750
 Switch {
  inputs 3
  which {{parent.Vin_Method}}
  name Switch2
  xpos 636
  ypos 2672
 }
push $Nb5c287a0
 Radial {
  invert true
  area {{((width/2)-(width*parent.Vin_Scale))+(width*((Vin_Offset.x)/1000))} {((height/2)-(height*parent.Vin_Scale))+(width*((Vin_Offset.y)/1000))} {((width/2)+(width*parent.Vin_Scale))+(width*((Vin_Offset.x)/1000))} {((height/2)+(height*parent.Vin_Scale))+(width*((Vin_Offset.y)/1000))}}
  softness {{parent.Vin_Feather}}
  name Radial1
  xpos 740
  ypos 2714
 }
 Merge2 {
  inputs 2
  operation multiply
  mix 0.085
  name Merge9
  xpos 636
  ypos 2714
  disable {{1-parent.Vin_HighlightPrio}}
 }
push $Nb5c3cae0
 Grade {
  inputs 1+1
  white {{parent.Vin_Gain}}
  black_clamp false
  name Grade5
  xpos 509
  ypos 2714
  disable {{1-parent.Vingette_Enable x1 1}}
 }
 Merge2 {
  inputs 2
  mix {{parent.VinO_Opacity/5}}
  name Merge10
  xpos 509
  ypos 2911
  disable {{1-parent.VingetteO_Enable}}
 }
 Clamp {
  maximum_enable false
  name Clamp1
  xpos 509
  ypos 3049
  disable {{parent.Sharpen1.disable}}
 }
 Colorspace {
  colorspace_out Cineon
  name Colorspace18
  xpos 509
  ypos 3087
  disable {{parent.Sharpen1.disable}}
 }
 Colorspace {
  colorspace_out YCbCr
  name Colorspace11
  xpos 509
  ypos 3113
  disable {{parent.Sharpen1.disable}}
 }
 Sharpen {
  channels {rgba.red -rgba.green -rgba.blue none}
  amount {{parent.Sharpen_1*6}}
  name Sharpen1
  xpos 509
  ypos 3139
  disable {{1-parent.Sharpen_Enable}}
 }
 Colorspace {
  colorspace_in YCbCr
  name Colorspace12
  xpos 509
  ypos 3165
  disable {{parent.Sharpen1.disable}}
 }
 Colorspace {
  colorspace_in Cineon
  name Colorspace19
  xpos 509
  ypos 3191
  disable {{parent.Sharpen1.disable}}
 }
 Dot {
  name Dot35
  xpos 543
  ypos 3257
 }
set Nb5d1a860 [stack 0]
 Keyer {
  operation "luminance key"
  name Keyer3
  xpos 636
  ypos 3247
 }
 Premult {
  name Premult1
  xpos 636
  ypos 3281
  disable {{1-parent.Mist_Premultiplied}}
 }
 Grade {
  channels rgba
  gamma {{parent.Mist_Gamma}}
  black_clamp false
  name Grade6
  xpos 636
  ypos 3307
 }
 Blur {
  size {{(parent.Feather+0.3)*1000}}
  name Blur1
  xpos 636
  ypos 3332
 }
 Expression {
  expr0 a
  expr1 a
  expr2 a
  mix {{1-parent.Mist_ColorMix}}
  name Expression8
  xpos 636
  ypos 3370
 }
push $Nb5d1a860
 Merge2 {
  inputs 2
  Achannels {rgba.red rgba.green rgba.blue -rgba.alpha}
  Bchannels {rgba.red rgba.green rgba.blue -rgba.alpha}
  output {rgba.red rgba.green rgba.blue -rgba.alpha}
  mix {{parent.Mist_Opacity}}
  name Merge12
  xpos 509
  ypos 3370
  disable {{1-parent.Mist_Enable}}
 }
 Group {
  name Grain
  help "Adds synthetic grain. Push \"presets\" to get predefined types of grain, these are the correct size for 2K scans.\n\nYou can also adjust the sliders to match a sample piece of grain. Find a sample with a rather constant background, blur it to remove the grain, and use as input to this. View with a wipe in the viewer so you can make a match. It helps to view and match each of the red, green, blue separately."
  xpos 509
  ypos 3487
  disable {{1-parent.Grain_Enable}}
  addUserKnob {20 "" l User}
  addUserKnob {3 seed t "Change this value to make different instances of this operator produce different noise"}
  seed 134
  addUserKnob {35 presets l "" -STARTLINE M {"presets/Kodak 5248" "knobs this \{red_size 3.30 green_size 2.90 blue_size 2.5 red_i 0.60 green_i 0.60 blue_i 0.60 red_m 0.42 green_m 0.46 blue_m 0.85 black 0.00 label \{Kodak 5248\}\}" "presets/Kodak 5279" "knobs this \{red_size 2.70 green_size 2.60 blue_size 2.40 red_i 1.00 green_i 0.76 blue_i 0.65 red_m 0.37 green_m 0.60 blue_m 1.65 black 0.00 label \{Kodak 5279\}\}" "presets/Kodak FX214" "knobs this \{red_size 1.87 green_size 2.60 blue_size 2.44 red_i 1 green_i 0.76 blue_i 0.79 red_m 0.41 green_m 0.60 blue_m 1.80 black 0.00 label \{Kodak FX214\}\}" "presets/Kodak GT5274" "knobs this \{red_size 0.04 green_size 0.10 blue_size 0.90 red_i 0.90 green_i 0.76 blue_i 0.81 red_m 0.49 green_m 0.50 blue_m 1.55 black 0.00 label \{Kodak GT5274\}\}" "presets/Kodak 5217" "knobs this \{red_size 0.23 green_size 1.20 blue_size 1.40 red_i 0.60 green_i 0.86 blue_i 0.60 red_m 0.48 green_m 0.42 blue_m 0.87 black 0.00 label \{Kodak 5217\}\}" "presets/Kodak 5218" "knobs this \{red_size 0.10 green_size 1.60 blue_size 1.91 red_i 0.60 green_i 0.86 blue_i 0.73 red_m 0.38 green_m 0.17 blue_m 0.87 black 0.00 label \{Kodak 5218\}\}" presets/other "knobs this \{label other\}"}}
  addUserKnob {26 "" l "@b;Size"}
  addUserKnob {14 red_size l red R 0 100}
  red_size {{parent.Grain_Size}}
  addUserKnob {14 green_size l green R 0 100}
  green_size {{parent.Grain_Size}}
  addUserKnob {14 blue_size l blue R 0 100}
  blue_size {{parent.Grain_Size}}
  addUserKnob {26 "" l "@b;Irregularity"}
  addUserKnob {7 red_i l red}
  red_i 0.6
  addUserKnob {7 green_i l green}
  green_i 0.6
  addUserKnob {7 blue_i l blue}
  blue_i 0.6
  addUserKnob {26 "" l "@b;Intensity"}
  addUserKnob {7 red_m l red t "Amount of grain to add to a white pixel"}
  red_m {{parent.Grain_Intensity}}
  addUserKnob {7 green_m l green}
  green_m {{parent.Grain_Intensity}}
  addUserKnob {7 blue_m l blue}
  blue_m {{parent.Grain_Intensity}}
  addUserKnob {18 black t "Amount of grain to add everywhere"}
  black {0 0 0}
  addUserKnob {6 black_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 black_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 black_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 black_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 black_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 black_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 black_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {18 minimum t "Minimum black level" R 0 0.01}
  minimum {0 0 0}
  addUserKnob {6 minimum_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 minimum_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 minimum_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 minimum_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 minimum_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 minimum_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 minimum_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {26 "" l "@b;Mask"}
  addUserKnob {6 maskgrain l "Apply only through alpha" -STARTLINE}
  addUserKnob {41 maskinvert l "Invert alpha" -STARTLINE T Copy1.invert_mask}
 }
  Input {
   inputs 0
   name Input1
   xpos 0
  }
set Nb4f92a70 [stack 0]
  Noise {
   output {rgba.red -rgba.green -rgba.blue -rgba.alpha}
   cliptype none
   replace true
   size {{parent.red_size.w} {parent.red_size.h}}
   zoffset {{frame+seed+red_i/2}}
   octaves 2
   gamma 1
   xrotate {{red_i*45}}
   yrotate {{red_i*45}}
   name red
   xpos 220
  }
  Noise {
   output {-rgba.red rgba.green -rgba.blue -rgba.alpha}
   cliptype none
   replace true
   size {{parent.green_size.w} {parent.green_size.h}}
   zoffset {{frame+2*seed+green_i/2}}
   octaves 2
   gamma 1
   xrotate {{green_i*45}}
   yrotate {{green_i*45}}
   name green
   xpos 220
   ypos 43
  }
  Noise {
   output {-rgba.red -rgba.green rgba.blue -rgba.alpha}
   cliptype none
   replace true
   size {{parent.blue_size.w} {parent.blue_size.h}}
   zoffset {{frame+3*seed+blue_i/2}}
   octaves 2
   gamma 1
   xrotate {{blue_i*45}}
   yrotate {{blue_i*45}}
   name blue
   xpos 220
   ypos 86
  }
  Saturation {
   saturation 0
   name Saturation1
   xpos 220
   ypos 112
  }
push $Nb4f92a70
  MergeExpression {
   inputs 2
   expr0 max(minimum.r,r+(2*Ar-1)*(r*red_m+black.r))
   expr1 max(minimum.g,g+(2*Ag-1)*(g*green_m+black.g))
   expr2 max(minimum.b,b+(2*Ab-1)*(b*blue_m+black.b))
   name MergeExpression1
   xpos 220
   ypos 208
  }
set Nb5d33c40 [stack 0]
push $Nb4f92a70
  Copy {
   inputs 2
   channels rgb
   maskChannelInput rgba.alpha
   name Copy1
   xpos 0
   ypos 154
  }
push $Nb5d33c40
  Switch {
   inputs 2
   which {{maskgrain}}
   name Switch1
   xpos 0
   ypos 241
  }
  Output {
   name Output1
   xpos 0
   ypos 286
  }
 end_group
 Shuffle {
  alpha white
  name Shuffle22
  xpos 509
  ypos 3714
 }
push $Nb5c0c3d0
 Merge2 {
  inputs 2+1
  name Merge18
  xpos 509
  ypos 3786
 }
 ShuffleCopy {
  inputs 2
  name ShuffleCopy1
  xpos 509
  ypos 3855
 }
 Dot {
  name Dot31
  xpos 543
  ypos 3969
 }
 Output {
  name Output1
  xpos 509
  ypos 4133
 }
 StickyNote {
  inputs 0
  name StickyNote15
  tile_color 0xff3100ff
  gl_color 0xff0000ff
  label "<center>IS THIS CORRECT?"
  note_font "Verdana Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold"
  note_font_size 20
  xpos 804
  ypos -940
 }
push $Nb4ea4be0
 Dot {
  name Dot10
  xpos 428
  ypos -765
 }
 StickyNote {
  inputs 0
  name StickyNote8
  label "<center>Base Color Correction\nfor normalizing shot."
  xpos 318
  ypos -776
 }
 NoOp {
  inputs 0
  name NoOp1
  xpos 815
  ypos -1634
  addUserKnob {20 User}
  addUserKnob {6 Green_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  Green_panelDropped true
  addUserKnob {18 RED}
  RED {1 0 0}
  addUserKnob {6 RED_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  RED_panelDropped true
  addUserKnob {6 RED_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 RED_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 RED_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 RED_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 RED_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 RED_panelDropped_1_1_1_1_1_1 l "panel dropped state" +HIDDEN +STARTLINE}
  addUserKnob {18 Green}
  Green {0 1 0}
  addUserKnob {6 Green_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 Green_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 Green_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 Green_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 Green_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 Green_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 Green_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {18 Blue}
  Blue {0 0 1}
  addUserKnob {6 Blue_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  Blue_panelDropped true
  addUserKnob {6 Blue_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 Blue_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 Blue_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 Blue_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 Blue_panelDropped_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 Blue_panelDropped_1_1_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 }
 HueKeyer {
  inputs 0
  name HueKeyer2
  knobChanged RunNode()
  xpos 1499
  ypos 1036
 }
 StickyNote {
  inputs 0
  name StickyNote1
  label "Temporary, remove later->"
  xpos 330
  ypos 3054
 }
 StickyNote {
  inputs 0
  name StickyNote7
  label "<center>Color Boost\nIntroduce saturation in\nless saturated areas\n(should be reduced)"
  xpos 313
  ypos -540
 }
 StickyNote {
  inputs 0
  name StickyNote16
  tile_color 0xff3100ff
  gl_color 0xff0000ff
  label "<center>REDO THIS"
  note_font "Verdana Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold"
  note_font_size 20
  xpos 771
  ypos 1310
 }
end_group
Viewer {
 inputs 0
 frame_range 1-150
 frame_range_lock true
 colour_sample_bbox {0.129687503 -0.1328125 0.131249994 -0.131249994}
 samplepoints {{0.2843750119 -0.137500003}
   }
 name Viewer1
 selected true
 xpos -100
 ypos 245
}
