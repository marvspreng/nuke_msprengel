Group {
 inputs 0
 name Point_Lighning
 tile_color 0x434343ff
 note_font_color 0x7dadf9ff
 addUserKnob {20 User}
 addUserKnob {26 _1 l "" +STARTLINE T "Lightning Generator v1.1\nBy Erwan Leroy\n"}
 addUserKnob {26 _2 l "<b><font color=#7DADF9>General</font><b>"}
 addUserKnob {13 start l "Starting Point" t "3D position for the starting point of the lighning."}
 start {0.5 0.5 0}
 addUserKnob {13 end l "Ending Point" t "3D position for the ending point of the lighning."}
 end {-0.5 -0.5 0}
 addUserKnob {26 shape_div l "<b><font color=#7DADF9>Shape</font><b>"}
 addUserKnob {3 branches l Branches t "Choose the number of branches for the lighning bolt."}
 branches 10
 addUserKnob {3 seed l Seed t "Random seed to generate an entirely new bolt." -STARTLINE}
 seed 35
 addUserKnob {3 points l "Points per Branch" t "Control how many points are generated per branch. This allows more details in the main shape of the bolt, but increases processing time.\n\nBranches can also be upsampled which allows for fine details with less processing overhead."}
 points 40
 addUserKnob {3 upsample l Upsample t "Multiply the number of points in the bolt AFTER generation. \n\nWill add visual details to the bolt, but will not be used for the generation." -STARTLINE}
 upsample 30
 addUserKnob {7 branch_min l "Spawn min" t "Each branch of the bolt is generated from a random point on another pre-existing branch.\n\nThis setting contrains the range from which a bolt may be spawned.\n\n0 Is the \"root\" of a branch, while 1 is the \"tip\"."}
 addUserKnob {7 branch_max l max t "Each branch of the bolt is generated from a random point on another pre-existing branch.\n\nThis setting contrains the range from which a bolt may be spawned.\n\n0 Is the \"root\" of a branch, while 1 is the \"tip\"." -STARTLINE}
 branch_max 0.65
 addUserKnob {7 branches_distribution l "Spawn Distribution" t "Affect the distribution of new branches.\n\nAt value 1, branches will have an equal chance to spawn from any existing branch.\n\nWith lower values, earier branches will have more chances to spawn new branches.\n\nWith higher values, newer branches will be more likely to spawn new branches." R 0 2}
 branches_distribution 0.75
 addUserKnob {7 scale_min l "Scale min" t "The minimum random length a branch may be."}
 scale_min 0.5
 addUserKnob {7 scale_max l max t "The maximum random length a branch may be." -STARTLINE R 0.5 1.5}
 scale_max 1
 addUserKnob {7 scale_distribution l "Scale Distribution" t "Affects the scale distribution.\n\nA value of 1 will randomly pick between the min and max scale.\n\nLower values will favor shorter branches.\nHigher values will favor longer branches." R 0 2}
 scale_distribution 1
 addUserKnob {6 absolute l Absolute t "When this box is checked, the scale of each branch will be based on the scale of the parent branch, and how close from the tip this branch has spawned.\n\nWhen it is off, the scale will be truly random, based on the scale range. You will most likely have to adjust the max scale accordingly. " -STARTLINE}
 addUserKnob {7 spread l Spread t "Control how far apart the branches are spreading.\n\nAt value 0, all branches will try to follow the main direction. At value 1, each branch will go in a random direction."}
 spread 0.4
 addUserKnob {6 main_noise_panelDropped l "panel dropped state" +HIDDEN +STARTLINE}
 addUserKnob {6 color_panelDropped l "panel dropped state" +HIDDEN +STARTLINE}
 addUserKnob {26 noises_div l "<b><font color=#7DADF9>Turbulences</font><b>"}
 addUserKnob {18 main_noise l "Main Shape Noise" t "This noise should be used to define the overall shape of the lighning. It doesn't affect the root or tip of each branch.\n\nAmount of detail that can be optained with this noise is dependent on number of Points per Branch." R 0 10}
 main_noise 1
 addUserKnob {6 main_noise_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 main_frequency l Frequency t "Adjust the frequency (size) of main shape noise" R 0 3}
 main_frequency 1
 addUserKnob {7 main_anim l Animation t "Animation of the main shape noise." R 0 100}
 addUserKnob {18 secondary_noise l "Turbulence Noise" t "Adds a secondary noise to the shape AFTER the upsampling is done, resulting in a more detailed noise.\n\nThis is meant to be a high frequency, low amplitude noise (compared to main), but go wild if you want to.\n\nNote: this noise does affect the root and tips of branches, so it may shift the start and end point." R 0 10}
 secondary_noise 1
 addUserKnob {6 secondary_noise_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 secondary_frequency l Frequency t "Frequency for the secondary noise" R 0 3}
 secondary_frequency 1.62
 addUserKnob {7 secondary_anim l Animation t "Control the animation of the secondary noise" R 0 100}
 addUserKnob {26 growth_div l "<b><font color=#7DADF9>Growth</font><b>" +INVISIBLE}
 addUserKnob {7 progress l Amount t "Can be used to animate the progress of the lighning, for example to make a super slow motion lighning bolt." +INVISIBLE}
 progress 1
 addUserKnob {7 progress_random l Randomness t "Without randomness, all branches will finish growing exactly at the same time.\n\nWith randomness, some will finish earlier.\nWith too much randomness, there is a chance some branches may start to appear before their parent branch is fully created, making some branches seemingly appear out of nowhere." +INVISIBLE}
 addUserKnob {20 tab_Shadin l Shading}
 addUserKnob {26 divider_growth l "<b><font color=#7DADF9>Growth</font><b>"}
 addUserKnob {7 evolution l Evolution t "The growth of the lightning"}
 evolution 1
 addUserKnob {7 Randomize t "Some branches will spawn later than others"}
 addUserKnob {6 tipCutOff l "Don't Cut Off" t "Don't use evolution to cut off the lightning. (You always see the full lightning bolt)" +STARTLINE}
 addUserKnob {26 divider_color l "<b><font color=#7DADF9>General Look</font><b>"}
 addUserKnob {18 color l Color t "Choose the main color of the bolt."}
 color {1 1 1}
 addUserKnob {7 brighness_noise l "Brightness Noise" t "Adding some brighness noise will make the bolt less uniform looking."}
 addUserKnob {7 brighness_frequency l "Noise Frequency" t "Adjust the frequency of the brighness noise (high frequency = small size, low frequency = large size)" R 0.1 5}
 brighness_frequency 1
 addUserKnob {7 brighness_anim l "Noise Animation" t "The brightness noise can be animated. Use this knob to control time..\n\nGreat Scott!" R 0 100}
 addUserKnob {26 divider_General l "<b><font color=#7DADF9>Branches</font><b>"}
 addUserKnob {18 generalLookGain l Gain t "Control the color of the branches and core"}
 generalLookGain 1
 addUserKnob {6 generalLookGain_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 color_rgb_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 generalLookFadeEven l "Even Fade" t "When disabled the Fade in and Fade out will have their fade point fixed at the full length of the lightning bolt. \nWhen enabled the fade point will be att the current evolution step.\n\nSo when you have the evolution set to 0.5 the fade out will be brightest at 0.5 rather than 1.0" +STARTLINE}
 generalLookFadeEven true
 addUserKnob {7 generalLookFadein l "Fade In" t "Fade color from the start position of the light towards the end"}
 generalLookFadein 1
 addUserKnob {7 generalLookFadeout l "Fade Out" t "Fade color from the end position of the light towards the start"}
 addUserKnob {7 fadeoffset l "Fade Offset" t "Offset the Fade In and Fade Out." R -1 1}
 fadeoffset 0.1
 addUserKnob {7 generalLookBranchFade l "Branch Fade" t "Control how many of the branches are affected by this."}
 addUserKnob {7 generalLookFradeSigma l "Branch Fade Sigma" t "Control the distribution of the branch fade control"}
 generalLookFradeSigma 0.5
 addUserKnob {6 color_rgba_panelDropped l "panel dropped state" +HIDDEN +STARTLINE}
 addUserKnob {26 divider_Tip l "<b><font color=#7DADF9>Tip</font><b>"}
 addUserKnob {18 tipGain l Gain t "The very tip (current evolution) of the lightning will receive this color"}
 tipGain 1
 addUserKnob {6 tipGain_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 tipExponent l Exponent t "The exponent of the tip fade"}
 tipExponent 1
 addUserKnob {7 tipBranchFade l "Branch Fade" t "Control how many of the branches are affected by this."}
 tipBranchFade 0.5
 addUserKnob {7 tipBranchFadeSigma l "Branch Fade Sigma" t "Control the distribution of the branch fade control"}
 tipBranchFadeSigma 0.5
 addUserKnob {26 divider_Core l "<b><font color=#7DADF9>Core</font><b>"}
 addUserKnob {18 mainBranchColor l Gain t "The core lightning bolt will get this color. (Usefull when lightning finally connect with the ground)" R 0 100}
 addUserKnob {6 mainBranchColor_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 coreOverwriteAffection l "Affect Branches" t "Should the branches be affected?"}
 addUserKnob {7 coreOverwriteAffectionSigma l Sigma t "How should the branch affection be distributed?"}
 coreOverwriteAffectionSigma 0.905
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0xaaaaaa00
  label Tip
  note_font_size 42
  xpos -2850
  ypos 144
  bdwidth 468
  bdheight 374
 }
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x7171c600
  label General
  note_font_size 42
  xpos -1870
  ypos 206
  bdwidth 202
  bdheight 378
 }
 BackdropNode {
  inputs 0
  name BackdropNode3
  tile_color 0xaaaaaa00
  label Core
  note_font_size 42
  xpos -2317
  ypos 178
  bdheight 215
 }
 BackdropNode {
  inputs 0
  name BackdropNode4
  tile_color 0xaaaaaaff
  label "branch blink"
  note_font_size 42
  xpos -3180
  ypos 148
  bdwidth 275
  bdheight 239
 }
 Constant {
  inputs 0
  channels rgb
  name Constant1
  xpos -578
  ypos -599
 }
 Reformat {
  type "to box"
  box_width {{"max(parent.branches, 2)"}}
  box_height {{"max(parent.points, 1)"}}
  box_fixed true
  resize fill
  name Reformat1
  xpos -578
  ypos -428
 }
 BlinkScript {
  recompileCount 69
  ProgramGroup 1
  KernelDescription "2 \"PointLighning\" iterate pixelWise 5e0e49e055b186dea0cc6c5c87cb9f407cb8dd55ac09a072668e611add35ced6 2 \"format\" Read Random \"dst\" Write Random 19 \"seed\" Int 1 AAAAAA== \"relative_scale\" Int 1 AAAAAA== \"format\" Int 2 CgAAAAoAAAA= \"start\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"end\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"spread\" Float 1 AAAAAA== \"branch_min\" Float 1 AAAAAA== \"branch_max\" Float 1 AAAAAA== \"scale_min\" Float 1 AAAAAA== \"scale_max\" Float 1 AAAAAA== \"scale_distribution\" Float 1 AAAAAA== \"distribution\" Float 1 AAAAAA== \"noise_frequency\" Float 1 AAAAAA== \"noise_time\" Float 1 AAAAAA== \"noise_amount\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"octaves\" Int 1 AAAAAA== \"lacunarity\" Float 1 AAAAAA== \"amplitude\" Float 1 AAAAAA== \"gain\" Float 1 AAAAAA== 19 \"seed\" 1 1 \"relative_scale\" 1 1 \"WHformat\" 2 1 \"start\" 3 1 \"end\" 3 1 \"spread\" 1 1 \"branch_min\" 1 1 \"branch_max\" 1 1 \"scale_min\" 1 1 \"scale_max\" 1 1 \"scale_distribution\" 1 1 \"distribution\" 1 1 \"noise_frequency\" 1 1 \"noise_time\" 1 1 \"noise_amount\" 3 1 \"octaves\" 1 1 \"lacunarity\" 1 1 \"amplitude\" 1 1 \"gain\" 1 1 0"
  kernelSource "/* Lightning Kernel by Erwan Leroy 2020\n *\n * Simplex Noise based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n * Ported by Mads Hagbarth Lund 2014\n *\n * Modifications (fBm) by Erwan Leroy 2018 at Spin VFX\n *\n * Simplex license:\n * Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\n\ninline float raw_noise_4d(const float4 coord)\n\{\n  int simplex\[64]\[4] =\n  \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n  \};\n\n  int perm\[512] =\n  \{\n    151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n    8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n    35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n    134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n    55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n    18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n    250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n    189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n    172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n    228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n    107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n    151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n    8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n    35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n    134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n    55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n    18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n    250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n    189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n    172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n    228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n    107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n  \};\n\n  int grad4\[32]\[4]=\n  \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n  \};\n  float x = coord.x;\n  float y = coord.y;\n  float z = coord.z;\n  float w = coord.w;\n  float F4 = (sqrt(5.0f)-1.0)/4.0;\n  float G4 = (5.0-sqrt(5.0f))/20.0;\n  float n0, n1, n2, n3, n4;\n  float s = (x + y + z + w) * F4;\n  int i = fastfloor(x + s);\n  int j = fastfloor(y + s);\n  int k = fastfloor(z + s);\n  int l = fastfloor(w + s);\n  float t = (i + j + k + l) * G4;\n  float X0 = i - t;\n  float Y0 = j - t;\n  float Z0 = k - t;\n  float W0 = l - t;\n  float x0 = x - X0;\n  float y0 = y - Y0;\n  float z0 = z - Z0;\n  float w0 = w - W0;\n  int c1 = (x0 > y0) ? 32 : 0;\n  int c2 = (x0 > z0) ? 16 : 0;\n  int c3 = (y0 > z0) ? 8 : 0;\n  int c4 = (x0 > w0) ? 4 : 0;\n  int c5 = (y0 > w0) ? 2 : 0;\n  int c6 = (z0 > w0) ? 1 : 0;\n  int c = c1 + c2 + c3 + c4 + c5 + c6;\n  int i1, j1, k1, l1;\n  int i2, j2, k2, l2;\n  int i3, j3, k3, l3;\n  i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n  j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n  k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n  l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n  i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n  j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n  k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n  l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n  i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n  j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n  k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n  l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n  float x1 = x0 - i1 + G4;\n  float y1 = y0 - j1 + G4;\n  float z1 = z0 - k1 + G4;\n  float w1 = w0 - l1 + G4;\n  float x2 = x0 - i2 + 2.0*G4;\n  float y2 = y0 - j2 + 2.0*G4;\n  float z2 = z0 - k2 + 2.0*G4;\n  float w2 = w0 - l2 + 2.0*G4;\n  float x3 = x0 - i3 + 3.0*G4;\n  float y3 = y0 - j3 + 3.0*G4;\n  float z3 = z0 - k3 + 3.0*G4;\n  float w3 = w0 - l3 + 3.0*G4;\n  float x4 = x0 - 1.0 + 4.0*G4;\n  float y4 = y0 - 1.0 + 4.0*G4;\n  float z4 = z0 - 1.0 + 4.0*G4;\n  float w4 = w0 - 1.0 + 4.0*G4;\n  int ii = i & 255;\n  int jj = j & 255;\n  int kk = k & 255;\n  int ll = l & 255;\n  int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n  int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n  int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n  int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n  int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n\n  float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n\n  if(t0<0) \{\n    n0 = 0.0;\n  \}\n  else\n  \{\n    t0 *= t0;\n    n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n  \}\n\n  float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n\n  if(t1<0) \{\n    n1 = 0.0;\n  \}\n  else \{\n    t1 *= t1;\n    n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n  \}\n\n  float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n\n  if(t2<0) \{\n    n2 = 0.0;\n  \}\n  else \{\n    t2 *= t2;\n    n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n  \}\n\n  float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n\n  if(t3<0) \{\n    n3 = 0.0;\n  \}\n  else \{\n    t3 *= t3;\n    n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n  \}\n\n  float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n\n  if(t4<0) \{\n    n4 = 0.0;\n  \}\n  else \{\n    t4 *= t4;\n    n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n  \}\n  return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\n\n\ninline float remap(float val, float ori_min, float ori_max, float new_min, float new_max)\n\{\n  float ori_range = ori_max-ori_min;\n  float new_range = new_max-new_min;\n  return (((val - ori_min) * new_range) / ori_range) + new_min;\n\n\}\n\ninline float3 mix(float3 _X,float3 _Y,float _A)\{\n  return _X*(1.0f-_A)+_Y*_A;\n\}\ninline float mix(float _X,float _Y,float _A)\{\n  return _X*(1.0f-_A)+_Y*_A;\n\}\n\n\n// Random number generator algorithm from https://www.shadertoy.com/view/Xt23Ry\ninline float fract (float x) \{return x-floor(x);\}\ninline float random(float co) \{ return fract(sin(co*(91.3458f)) * 47453.5453f); \}\n\ninline float3 randomv(float3 seed)\n\{\n  float scramble = random(seed.x + seed.y * seed.z);\n  float3 rand;\n  rand.x = random(seed.x + scramble + 0.14557f + 0.47917f * seed.z)*2-1;\n  rand.y = random(seed.y * 0.214447f + scramble * 47.241f * seed.x)*2-1;\n  rand.z = random(seed.z * scramble + 3.147855f + 0.2114f * seed.y)*2-1;\n  return normalize(rand);\n\}\n\nkernel PointLighning : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom> format;\n  Image<eWrite, eAccessRandom> dst;\n\n  param: //Parameters available to the user\n    int seed, relative_scale;\n    int2 WHformat;\n    float3 start, end;\n    float spread, branch_min, branch_max, scale_min, scale_max, scale_distribution;\n    float distribution, noise_frequency, noise_time;\n    float3 noise_amount;\n    int octaves;\n    float lacunarity;\n    float amplitude;\n    float gain;\n\n  void define() \{\n    defineParam(WHformat, \"format\", int2(10,10));\n  \}\n\nfloat fBm_4d(const float octaves, const float lacunarity, const float gain, const float4 coord, float amplitude)\n\{\n  float total = 0;\n  float4 frequency = coord;\n  for( int i=0; i < octaves; i++ ) \{\n    total += (float)raw_noise_4d(frequency) * amplitude;\n    frequency *= lacunarity;\n    amplitude *= gain;\n  \}\n  return float(total);\n\}\n\nfloat3 fBm_4d_3d(const float octaves, const float lacunarity, const float gain, const float4 coord, float amplitude)\n\{\n  float3 sample;\n  sample.x = fBm_4d(octaves, lacunarity, gain, coord, amplitude);\n  sample.y = fBm_4d(octaves, lacunarity, gain, coord + 100.0f, amplitude);\n  sample.z = fBm_4d(octaves, lacunarity, gain, coord + 200.0f, amplitude);\n  return sample;\n\}\n\n  void process(int2 pos) \{\n    // this is highly inneficient, but for the algoritm to work, it needs to be single threaded.\n    if (pos.x || pos.y ) \{\n      return;\n    \}\n    float3 main_vector = end-start;\n    float2 random_source;\n    int2 sample_source;\n\n    float progress = 0.0f;\n    float3 branch_start;\n    float3 branch_end;\n    float branch_length;\n    float branch_progress;\n    float3 position;\n    float4 noise_source;\n    float3 noise;\n    for (int x = 0; x < WHformat.x; x++) \{\n      // For the first branch, we use interpolate between the start and end, otherwise from fork to random point\n      if (x==0) \{\n        branch_start = start;\n        branch_end = end;\n        branch_length = 1.0f;\n      \} else \{\n        // Pick from another random point\n        random_source = float2(random(seed+12.5f+x), random(seed+3.14f+x));\n        random_source.x = pow(random_source.x, 1/distribution); // Gamma the random value to change distribution\n        random_source.x = remap(random_source.x, 0, 1, 0, x);\n        random_source.y = remap(random_source.y, 0, 1, WHformat.y*branch_min, WHformat.y*branch_max) + 0.5f;\n        random_source.y = max(0.0f, min(float(WHformat.y-1), random_source.y));\n        sample_source = int2(random_source);\n        float4 sample = dst(sample_source.x, sample_source.y);\n        branch_start = float3(sample.x, sample.y, sample.z);\n        progress = sample.w;\n        if (relative_scale) \{\n          branch_length = length(main_vector) * (1.0f-progress);\n        \} else \{\n          branch_length = length(main_vector);\n        \}\n        branch_length = branch_length * remap(random(branch_length*x), 0.0f, 1.0f, scale_min, scale_max);  // randomize\n        branch_length = branch_length * mix(1.0f - float(x)/WHformat.x, 1.0f, scale_distribution);\n        branch_end = normalize(mix(normalize(main_vector), randomv(float3(x)), spread)) * branch_length + branch_start;\n      \}\n        \n      // Iterate along the branch\n      for (int y = 0; y < WHformat.y; y++) \{\n        branch_progress = y/(WHformat.y-1.0f);\n        position = mix(branch_start, branch_end, branch_progress);\n        noise_source = float4(position.x, position.y, position.z, 1.0f) * noise_frequency;\n        noise_source.w = x*100.0f + noise_time;\n        noise = fBm_4d_3d(octaves,lacunarity, gain, noise_source, amplitude);\n        position = position + (noise * branch_length * (1.0f - fabs(branch_progress * 2.0f - 1.0f))) * noise_amount;\n        float global_progress = remap(branch_progress, 0.0f, 1.0f, progress, 1.0f);\n        dst(x,y) = float4(position.x, position.y, position.z, global_progress); \n      \}\n    \}\n  \}\n\};"
  useGPUIfAvailable false
  rebuild ""
  PointLighning_seed {{parent.seed}}
  PointLighning_relative_scale {{!parent.absolute}}
  PointLighning_format {{actual_format.width} {actual_format.height}}
  PointLighning_start {{parent.start} {parent.start} {parent.start}}
  PointLighning_end {{parent.end} {parent.end} {parent.end}}
  PointLighning_spread {{parent.spread}}
  PointLighning_branch_min {{parent.branch_min}}
  PointLighning_branch_max {{parent.branch_max}}
  PointLighning_scale_min {{parent.scale_min+0.001}}
  PointLighning_scale_max {{parent.scale_max}}
  PointLighning_scale_distribution {{parent.scale_distribution}}
  PointLighning_distribution {{parent.branches_distribution}}
  PointLighning_noise_frequency {{parent.main_frequency}}
  PointLighning_noise_time {{parent.main_anim}}
  PointLighning_noise_amount {{parent.main_noise/2} {parent.main_noise/2} {parent.main_noise/2}}
  PointLighning_octaves 5
  PointLighning_lacunarity 2
  PointLighning_amplitude 0.5
  PointLighning_gain 0.5
  rebuild_finalise ""
  maxTileLines 100
  name BlinkScript1
  xpos -578
  ypos -326
 }
 Reformat {
  type scale
  scale {1 {"max(parent.upsample, 1)"}}
  resize distort
  name Reformat3
  xpos -578
  ypos -243
 }
 Dot {
  name Dot1
  tile_color 0xa57aaa00
  xpos -544
  ypos -217
 }
set Nc0163000 [stack 0]
 Dot {
  name Dot4
  tile_color 0xa57aaa00
  xpos -641
  ypos -217
 }
set Nc0162c00 [stack 0]
 Dot {
  name Dot10
  tile_color 0xa57aaa00
  xpos -935
  ypos -217
 }
set Nc0162800 [stack 0]
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle2
  xpos -969
  ypos -168
 }
 Invert {
  channels rgba
  name Invert1
  xpos -969
  ypos -134
 }
set Nc0162000 [stack 0]
 Expression {
  temp_name0 seed
  temp_expr0 1
  temp_name1 grad
  temp_expr1 y/height
  channel0 {-rgba.red -rgba.green -rgba.blue rgba.alpha}
  expr0 random(x+seed)*grad+(1-grad)
  channel1 {-rgba.red -rgba.green -rgba.blue none}
  channel2 {-rgba.red -rgba.green -rgba.blue none}
  name Expression2
  xpos -867
  ypos -111
 }
push $Nc0162000
 ChannelMerge {
  inputs 2
  operation multiply
  mix {{parent.progress_random}}
  name ChannelMerge1
  xpos -969
  ypos -78
 }
 Dot {
  name Dot18
  xpos -935
  ypos -4
 }
set N2228b400 [stack 0]
 Add {
  value {{-(1-parent.evolution)}}
  name Add1
  label "animation Control"
  xpos -1756
  ypos -16
 }
 Expression {
  channel0 rgb
  expr0 r-(x/10)
  channel1 {-rgba.red -rgba.green -rgba.blue none}
  mix {{parent.Randomize i}}
  name Expression3
  label "Randomize Offset"
  xpos -1935
  ypos -11
 }
set Na0326c00 [stack 0]
 Dot {
  name Dot13
  xpos -2011
  ypos -4
 }
 Dot {
  name Dot5
  xpos -2011
  ypos 164
 }
set Na0326400 [stack 0]
 Dot {
  name Dot19
  xpos -1786
  ypos 164
 }
 Grade {
  add {{parent.fadeoffset i}}
  white_clamp true
  name Grade1
  xpos -1820
  ypos 237
 }
 Dot {
  name Dot14
  xpos -1786
  ypos 279
 }
set Nb4ba1c00 [stack 0]
 Grade {
  white {{parent.evolution}}
  reverse true
  black_clamp false
  name Grade19
  xpos -1860
  ypos 299
  disable {{!parent.generalLookFadeEven}}
 }
set Nb4ba1800 [stack 0]
 Expression {
  channel0 rgb
  expr0 1-r
  channel1 {-rgba.red -rgba.green -rgba.blue none}
  channel2 {-rgba.red -rgba.green -rgba.blue none}
  name Expression28
  label "Back Distance"
  xpos -1860
  ypos 323
 }
push $N2228b400
 Grade {
  channels rgba
  blackpoint {{"clamp(1-parent.progress, 0, 1)"}}
  add 0.001
  unpremult -rgba.alpha
  name Grade4
  xpos -969
  ypos 577
 }
 Expression {
  expr0 x==1?0:r
  expr1 x==1?0:g
  expr2 x==1?0:b
  expr3 x==1?0:a
  name Expression1
  xpos -969
  ypos 603
  disable {{parent.branches!=1 x1027 1}}
 }
 Dot {
  name Dot9
  tile_color 0xcccccc00
  xpos -935
  ypos 668
 }
push $Nc0162c00
 Multiply {
  channels rgba
  value {{parent.secondary_frequency*5} {parent.secondary_frequency*5} {parent.secondary_frequency*5} {parent.secondary_anim}}
  name Multiply1
  xpos -675
  ypos -180
 }
 BlinkScript {
  kernelSourceFile /Users/madshagbarth/Github/Nuke-Private/Blink/PointRender/Modify/Fractal_v06.cpp
  recompileCount 61
  ProgramGroup 1
  KernelDescription "2 \"Noise4D\" iterate pixelWise d32ddf73d710301044f07e5ab3c70d05a63934d4228d345b13c7fd2d2efe8ee2 2 \"src\" Read Point \"dst\" Write Point 17 \"absNoise\" Bool 1 AA== \"curveNoise\" Bool 1 AA== \"curveInvert\" Bool 1 AA== \"curveGain\" Float 1 AACAPw== \"curveOffset\" Float 1 AACAPw== \"Octaves\" Int 1 CgAAAA== \"Gain\" Float 1 AAAAPw== \"Lacunarity\" Float 1 AAAAQA== \"Gamma\" Float 1 AAAAPw== \"amplitude\" Float 3 AAAAPwAAAD8AAAA/AAAAAA== \"itterations\" Int 1 AQAAAA== \"Offset\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== \"Scale\" Float 4 AACAPwAAgD8AAIA/AACAPw== \"suboffset\" Float 4 AACAPwAAgD8AAIA/AACAPw== \"topoffset\" Float 4 AACAPwAAgD8AAIA/AACAPw== \"subscale\" Float 4 AACAPwAAgD8AAIA/AACAPw== \"topscale\" Float 4 AACAPwAAgD8AAIA/AACAPw== 17 \"absNoise\" 1 1 \"curveNoise\" 1 1 \"curveInvert\" 1 1 \"curveGain\" 1 1 \"curveOffset\" 1 1 \"octaves\" 1 1 \"gain\" 1 1 \"lacunarity\" 1 1 \"gamma\" 1 1 \"amplitude\" 3 1 \"itterations\" 1 1 \"offset\" 4 1 \"scale\" 4 1 \"suboffset\" 4 1 \"topoffset\" 4 1 \"subscale\" 4 1 \"topscale\" 4 1 0"
  kernelSource "//Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n//Ported by Mads Hagbarth Lund 2014\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n   int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n   \};\n    float F4 = (sqrt(5.0f)-1.0f)/4.0f;\n    float G4 = (5.0f-sqrt(5.0f))/20.0f;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\n\n\n\n\nkernel Noise4D : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src;\n  Image<eWrite, eAccessPoint> dst;\nparam:\n    bool absNoise;\n    bool curveNoise;\n    bool curveInvert;\n    float curveGain;\n    float curveOffset;\n    int octaves;\n    float gain;\n    float lacunarity;\n    float gamma;\n    float3 amplitude;\n    int itterations;\n    float4 offset;\n    float4 scale;\n    float4 suboffset;\n    float4 topoffset;\n    float4 subscale;\n    float4 topscale;\n\n\n  void define() \{\n        defineParam (absNoise, \"absNoise\", false);    \n        defineParam (curveNoise, \"curveNoise\", false);    \n        defineParam (curveInvert, \"curveInvert\", false);   \n        defineParam (curveGain, \"curveGain\", 1.0f);\n        defineParam (curveOffset, \"curveOffset\", 1.0f);\n        defineParam (octaves, \"Octaves\", 10);\n        defineParam (gain, \"Gain\", 0.5f);\n        defineParam (lacunarity, \"Lacunarity\", 2.0f);\n        defineParam (gamma, \"Gamma\", 0.5f);\n        defineParam (amplitude, \"amplitude\", float3(0.5f));\n        defineParam (itterations, \"itterations\", 1);\n        defineParam(offset, \"Offset\", float4(0.0f, 0.0f, 0.0f,0.0f));\n        defineParam(scale, \"Scale\", float4(1.0f, 1.0f, 1.0f,1.0f));\n        defineParam(suboffset, \"suboffset\", float4(1.0f, 1.0f, 1.0f,1.0f));\n        defineParam(topoffset, \"topoffset\", float4(1.0f, 1.0f, 1.0f,1.0f));\n        defineParam(subscale, \"subscale\", float4(1.0f, 1.0f, 1.0f,1.0f));\n        defineParam(topscale, \"topscale\", float4(1.0f, 1.0f, 1.0f,1.0f));        \n  \}\n\nfloat octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w ) \n\{\n    float total = 0.0f;\n    float current;\n    float last = 1.0f;\n    float frequency = scale;\n    float amplitude = 1.0f;\n    float maxAmplitude = 0.0f;\n    float4 Tempoffset;\n    float4 Tempscale;\n\n\n    for( int i=0; i < octaves; i++ ) \{\n\n        /*\n        if (i == 0) \{\n            total += (float)raw_noise_4d( (x+suboffset.x) * frequency, (y+suboffset.y) * frequency, (z+suboffset.z) * frequency, (w+suboffset.w) * frequency ) * amplitude;\n        \}\n        else if (i == octaves-1) \{\n            total += (float)raw_noise_4d( (x+topoffset.x) * frequency, (y+topoffset.y) * frequency, (z+topoffset.z) * frequency, (w+topoffset.w) * frequency ) * amplitude;\n        \}\n        else \{\n            total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;\n        \}\n        */\n\n\n        Tempscale = (topscale * (i/(octaves-1.0f)))+(subscale * (1-(i/(octaves-1.0f))));       \n        Tempoffset = (topoffset * (i/(octaves-1.0f)))+(suboffset * (1-(i/(octaves-1.0f))));\n        current = (float)raw_noise_4d(   ((x*Tempscale.x)+Tempoffset.x) * frequency, \n                                        ((y*Tempscale.y)+Tempoffset.y) * frequency, \n                                        ((z*Tempscale.z)+Tempoffset.z) * frequency, \n                                        ((w*Tempscale.w)+Tempoffset.w) * frequency \n                                        ) * amplitude;\n        if (i == 0 && curveNoise)\{\n            if (curveInvert)\{\n                last = 0.5f-current;  \n            \}\n            else\{\n                last = current;  \n            \}\n               \n        \}\n        current = curveNoise?current*((last+curveOffset)*curveGain):current;\n        total += absNoise?fabs(current):current;\n        frequency *= 2.0f;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n\n    \}\n    return float(total / maxAmplitude);\n\}\n\n\n\n\n  void process() \{\n    float4 srcSample = float4(src(0),src(1),src(2),src(3));\n    float sampleR,sampleG,sampleB;\n    for( int i=0; i < itterations; i++ ) \{\n        sampleR = (float)octave_noise_4d(float(octaves), gain, lacunarity, ( srcSample.x * scale.x ) + offset.x, ( srcSample.y * scale.y ) + offset.y,  ( srcSample.z * scale.z ) + offset.z, ( srcSample.w * scale.w ) + offset.w) * amplitude.x;\n        sampleG = (float)octave_noise_4d(float(octaves), gain, lacunarity, ( srcSample.x * scale.x ) + offset.x, ( srcSample.y * scale.y ) + offset.y,  ( srcSample.z * scale.z ) + offset.z, ( srcSample.w * scale.w ) + offset.w - 100.0f) * amplitude.y;\n        sampleB = (float)octave_noise_4d(float(octaves), gain, lacunarity, ( srcSample.x * scale.x ) + offset.x, ( srcSample.y * scale.y ) + offset.y,  ( srcSample.z * scale.z ) + offset.z, ( srcSample.w * scale.w ) + offset.w + 200.0f) * amplitude.z;\n    \}\n    dst() = float4(sampleR,sampleG,sampleB,1.0f);\n\}\n\};"
  rebuild ""
  Noise4D_curveGain 3
  Noise4D_curveOffset 0
  Noise4D_Octaves 8
  Noise4D_Gain 0.18
  Noise4D_Lacunarity 0.72
  Noise4D_Gamma 0.79
  Noise4D_amplitude {-1.3 -1.3 -1.3}
  Noise4D_Offset {0.5 0 0 0}
  Noise4D_Scale {0.35 0.35 0.35 0.35}
  Noise4D_suboffset {10.09 0 0 0}
  Noise4D_topoffset {0 0 0 0}
  Noise4D_subscale {0.475 16.475 0.475 0.475}
  Noise4D_topscale {10 3 12 3}
  rebuild_finalise ""
  name Noise4D1
  xpos -675
  ypos -134
 }
 Multiply {
  channels rgba
  value {{parent.secondary_noise/50} {parent.secondary_noise/50} {parent.secondary_noise/50} {parent.secondary_noise/50}}
  name Multiply2
  xpos -675
  ypos -67
 }
 Dot {
  name Dot7
  tile_color 0x7aa9ff00
  xpos -641
  ypos 602
 }
push $Nc0163000
 Merge2 {
  inputs 2
  operation plus
  output rgb
  name Merge1
  xpos -578
  ypos 598
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy2
  xpos -578
  ypos 658
 }
 Dot {
  name Dot2
  tile_color 0x9e3c6300
  xpos -544
  ypos 712
 }
set Nfb44ac00 [stack 0]
 Dot {
  name Dot8
  tile_color 0x9e3c6300
  xpos -544
  ypos 792
 }
push $Nfb44ac00
 Dot {
  name Dot11
  xpos -801
  ypos 713
 }
set N84ea0c00 [stack 0]
 Expression {
  expr0 r(x,height)
  expr1 g(x,height)
  expr2 b(x,height)
  name Expression32
  xpos -984
  ypos 710
 }
push $N84ea0c00
 Expression {
  expr0 r(x,0)
  expr1 g(x,0)
  expr2 b(x,0)
  name Expression31
  selected true
  xpos -835
  ypos 738
 }
 Group {
  inputs 2
  name Vector_Math_Ops1
  tile_color 0x434343ff
  note_font_color 0x7dadf9ff
  xpos -984
  ypos 738
  addUserKnob {20 User}
  addUserKnob {26 info l "" +STARTLINE T "Vector Math Ops v1.0\n"}
  addUserKnob {26 devidergeneral l "<b><font color=#7DADF9>General</font><b>"}
  addUserKnob {4 Operation M {"Dot Product 3D" "Dot Product 2D" "Vector Length 3D (Input 1)" "Vector Length 2D (Input 1)" "Reflect Vector" "Normalize (Input 1)" "Cross Product" Substract Add Distance "" "" ""}}
  Operation Distance
  addUserKnob {6 Normalise_Output l "Normalize Output" t "If this is checked, all outputs will be normalised." +STARTLINE}
  addUserKnob {6 Saturate_Output l "Saturate Output" t "This will move vectors from -1:1 space to 0:1 space" +STARTLINE}
  addUserKnob {26 ""}
  addUserKnob {41 in l "Input 1 Channal" T Shuffle1.in}
  addUserKnob {41 in_1 l "Input 2 Channal" T Shuffle2.in}
  addUserKnob {4 AlphaChanal l "Keep Alpha From" M {1 2 "" ""}}
  addUserKnob {26 ""}
  addUserKnob {26 Info l "" +STARTLINE T "For Reflect Vector A=Normal, B=Velocity"}
  addUserKnob {20 Help}
  addUserKnob {26 HelpText l "" +STARTLINE T "This node will let you do common vector math operations on One or Two input streams.\n\nThe input will be the channals that you select in the User section and the output will be in the RGBA channal."}
 }
  BackdropNode {
   inputs 0
   name BackdropNode1
   tile_color 0x8e388e00
   label DotProduct2D
   note_font_size 25
   xpos 652
   ypos -4
   bdwidth 178
   bdheight 166
  }
  BackdropNode {
   inputs 0
   name BackdropNode2
   tile_color 0x7171c600
   label "Vector Length 3D"
   note_font_size 25
   xpos 861
   ypos 2
   bdwidth 213
   bdheight 159
  }
  BackdropNode {
   inputs 0
   name BackdropNode3
   tile_color 0x7171c600
   label "Vector Length 2D"
   note_font_size 25
   xpos 1106
   ypos 2
   bdwidth 213
   bdheight 159
  }
  BackdropNode {
   inputs 0
   name BackdropNode4
   tile_color 0x388e8e00
   label Normalize
   note_font_size 25
   xpos 1570
   ypos 1
   bdwidth 183
   bdheight 159
  }
  BackdropNode {
   inputs 0
   name BackdropNode5
   tile_color 0x7171c600
   label "Cross Product"
   note_font_size 25
   xpos 1816
   ypos -3
   bdwidth 203
   bdheight 168
  }
  BackdropNode {
   inputs 0
   name DotProduct3D
   tile_color 0x8e8e3800
   label DotProduct3D
   note_font_size 25
   xpos 423
   ypos -6
   bdwidth 158
   bdheight 164
  }
  BackdropNode {
   inputs 0
   name Reflect_Vecor
   tile_color 0x8e388e00
   label "Reflect Vector 3D\nA=normal\nB = Velocity"
   note_font_size 25
   xpos 1339
   ypos -1
   bdwidth 197
   bdheight 163
  }
  BackdropNode {
   inputs 0
   name Substract
   tile_color 0x7171c600
   label Substract
   note_font_size 25
   xpos 2102
   ypos -3
   bdwidth 203
   bdheight 168
  }
  BackdropNode {
   inputs 0
   name Substract1
   tile_color 0x7171c600
   label Add
   note_font_size 25
   xpos 2350
   ypos -3
   bdwidth 203
   bdheight 168
  }
  BackdropNode {
   inputs 0
   name Substract2
   tile_color 0x7171c600
   label Dist
   note_font_size 25
   xpos 2607
   ypos -3
   bdwidth 203
   bdheight 168
  }
  Input {
   inputs 0
   name Input2
   xpos 1000
   ypos -246
   number 1
  }
  Dot {
   name B
   label B
   xpos 1034
   ypos -206
  }
  Shuffle {
   in rgb
   in2 rgba
   alpha alpha2
   name Shuffle2
   xpos 1000
   ypos -165
  }
  Dot {
   name Dot13
   xpos 1034
   ypos -38
  }
set Nc4de4800 [stack 0]
  Dot {
   name Dot21
   xpos 778
   ypos -38
  }
set Nc4de4400 [stack 0]
  Dot {
   name Dot19
   xpos 525
   ypos -38
  }
set Nc4de4000 [stack 0]
  Dot {
   name Dot30
   xpos 271
   ypos -38
  }
  Dot {
   name Dot32
   xpos 271
   ypos 706
  }
  Input {
   inputs 0
   name Input1
   xpos 905
   ypos -244
  }
  Dot {
   name A
   label A
   xpos 939
   ypos -204
  }
  Shuffle {
   in rgb
   in2 rgba
   alpha alpha2
   name Shuffle1
   xpos 905
   ypos -164
  }
  Dot {
   name Dot12
   xpos 939
   ypos -89
  }
set Neeb5c800 [stack 0]
  Dot {
   name Dot15
   xpos 662
   ypos -89
  }
set Neeb5c400 [stack 0]
  Dot {
   name Dot14
   xpos 433
   ypos -89
  }
set Neeb5c000 [stack 0]
  Dot {
   name Dot31
   xpos 336
   ypos -89
  }
  Dot {
   name Dot33
   xpos 336
   ypos 584
  }
  Switch {
   inputs 2
   which {{parent.AlphaChanal}}
   name Switch2
   xpos 872
   ypos 703
  }
push $Nc4de4800
  Dot {
   name Dot4
   xpos 1374
   ypos -38
  }
set N81da7400 [stack 0]
  Dot {
   name Dot1
   xpos 1867
   ypos -38
  }
set N81da7000 [stack 0]
  Dot {
   name Dot28
   xpos 2153
   ypos -38
  }
set N81da6c00 [stack 0]
  Dot {
   name Dot35
   xpos 2401
   ypos -38
  }
set N81da6800 [stack 0]
  Dot {
   name Dot42
   xpos 2658
   ypos -38
  }
  Dot {
   name Dot43
   xpos 2658
   ypos 137
  }
push $Neeb5c800
  Dot {
   name Dot17
   xpos 1215
   ypos -89
  }
set N187efc00 [stack 0]
  Dot {
   name Dot16
   xpos 1452
   ypos -89
  }
set N187ef800 [stack 0]
  Dot {
   name Dot18
   xpos 1665
   ypos -89
  }
set N187ef400 [stack 0]
  Dot {
   name Dot2
   xpos 1924
   ypos -89
  }
set N187ef000 [stack 0]
  Dot {
   name Dot29
   xpos 2210
   ypos -89
  }
set N187eec00 [stack 0]
  Dot {
   name Dot37
   xpos 2458
   ypos -89
  }
set N187ee800 [stack 0]
  Dot {
   name Dot44
   xpos 2715
   ypos -89
  }
  MergeExpression {
   inputs 2
   temp_name0 xd
   temp_expr0 A.red-B.red
   temp_name1 yd
   temp_expr1 A.green-B.green
   temp_name2 zd
   temp_expr2 A.blue-B.blue
   temp_name3 Distance
   temp_expr3 "sqrt(xd*xd + yd*yd + zd*zd)"
   expr0 Distance
   expr1 Distance
   expr2 Distance
   name Distance
   selected true
   xpos 2681
   ypos 134
  }
  Dot {
   name Dot45
   xpos 2715
   ypos 264
  }
push $N81da6800
  Dot {
   name Dot36
   xpos 2401
   ypos 137
  }
push $N187ee800
  MergeExpression {
   inputs 2
   expr0 A.red+B.red
   expr1 A.green+B.green
   expr2 A.blue+B.blue
   name Cross_Product2
   xpos 2424
   ypos 134
  }
  Dot {
   name Dot38
   xpos 2458
   ypos 264
  }
push $N81da6c00
  Dot {
   name Dot27
   xpos 2153
   ypos 137
  }
push $N187eec00
  MergeExpression {
   inputs 2
   expr0 A.red-B.red
   expr1 A.green-B.green
   expr2 A.blue-B.blue
   name Cross_Product1
   xpos 2176
   ypos 134
  }
  Dot {
   name Dot34
   xpos 2210
   ypos 236
  }
push $N81da7000
  Dot {
   name Dot25
   xpos 1867
   ypos 137
  }
push $N187ef000
  MergeExpression {
   inputs 2
   expr0 "A.green*B.blue - A.blue*B.green"
   expr1 "A.blue*B.red - A.red*B.blue"
   expr2 "A.red*B.green - A.green*B.red"
   name Cross_Product
   xpos 1890
   ypos 134
  }
  Dot {
   name Dot26
   xpos 1924
   ypos 225
  }
push $N187ef400
  Expression {
   temp_name3 Length
   temp_expr3 sqrt(Red*Red+Green*Green+Blue*Blue)+0.000000001
   expr0 Red/Length
   expr1 Green/Length
   expr2 Blue/Length
   name Normalize_Vector
   xpos 1631
   ypos 125
  }
  Dot {
   name Dot11
   xpos 1665
   ypos 214
  }
push $N187ef800
push $N81da7400
  Dot {
   name Dot5
   xpos 1374
   ypos 129
  }
  MergeExpression {
   inputs 2
   temp_expr0 "A = Normal, B = Velocity Vector!"
   temp_name3 dot
   temp_expr3 (A.red*B.red+A.green*B.green+A.blue*B.blue)
   expr0 "-2*(dot)*A.red + B.red"
   expr1 "-2*(dot)*A.green + B.green"
   expr2 "-2*(dot)*A.blue + B.blue"
   name Reflect3D
   xpos 1418
   ypos 126
  }
  Dot {
   name Dot20
   xpos 1452
   ypos 201
  }
push $N187efc00
  Expression {
   temp_name3 VectorLength_2D
   temp_expr3 sqrt(Red*Red+Green*Green)
   expr0 VectorLength_2D
   expr1 VectorLength_2D
   expr2 VectorLength_2D
   name Vector_Length2D
   xpos 1181
   ypos 124
  }
  Dot {
   name Dot22
   xpos 1215
   ypos 175
  }
push $Neeb5c800
  Expression {
   temp_name3 VectorLength_3D
   temp_expr3 sqrt(Red*Red+Green*Green+Blue*Blue)
   expr0 VectorLength_3D
   expr1 VectorLength_3D
   expr2 VectorLength_3D
   name Vector_Length3D
   xpos 905
   ypos 128
  }
  Dot {
   name Dot23
   xpos 939
   ypos 186
  }
push $Neeb5c400
  Dot {
   name Dot6
   xpos 662
   ypos 130
  }
push $Nc4de4400
  MergeExpression {
   inputs 2
   temp_name3 dot_product_2d
   temp_expr3 (A.red*B.red+A.green*B.green)
   expr0 dot_product_2d
   expr1 dot_product_2d
   expr2 dot_product_2d
   name Dot_Product2D
   xpos 744
   ypos 127
  }
  Dot {
   name Dot10
   xpos 778
   ypos 204
  }
push $Neeb5c000
  Dot {
   name Dot3
   xpos 433
   ypos 133
  }
push $Nc4de4000
  MergeExpression {
   inputs 2
   temp_name3 dot_product_3d
   temp_expr3 (A.red*B.red+A.green*B.green+A.blue*B.blue)
   expr0 dot_product_3d
   expr1 dot_product_3d
   expr2 dot_product_3d
   name Dot_Product3D
   xpos 491
   ypos 130
  }
  Dot {
   name Dot9
   xpos 525
   ypos 250
  }
  Switch {
   inputs 10
   which {{parent.Operation}}
   name Switch1
   xpos 1023
   ypos 291
  }
  Dot {
   name Dot7
   xpos 1057
   ypos 332
  }
set N8d17800 [stack 0]
  Dot {
   name Dot8
   xpos 1192
   ypos 332
  }
  Expression {
   temp_name3 Length
   temp_expr3 "sqrt((Red*Red) + (Green*Green) + (Blue*Blue))+0.00000001"
   expr0 Red/Length
   expr1 Green/Length
   expr2 Blue/Length
   expr3 Length
   name Normalize_Vector_out
   xpos 1158
   ypos 373
  }
  Dot {
   name Dot24
   xpos 1192
   ypos 444
  }
push $N8d17800
  Switch {
   inputs 2
   which {{parent.Normalise_Output}}
   name Normalise
   xpos 1023
   ypos 441
  }
  Dot {
   name Dot39
   xpos 1057
   ypos 550
  }
set N8d16800 [stack 0]
  Dot {
   name Dot40
   xpos 1192
   ypos 550
  }
  Expression {
   expr0 r/2+0.5
   expr1 g/2+0.5
   expr2 b/2+0.5
   name Saturate_Vector_out
   xpos 1158
   ypos 597
  }
  Dot {
   name Dot41
   xpos 1192
   ypos 662
  }
push $N8d16800
  Switch {
   inputs 2
   which {{parent.Saturate_Output}}
   name Saturate
   xpos 1023
   ypos 659
  }
  ShuffleCopy {
   inputs 2
   name ShuffleCopy1
   xpos 1023
   ypos 703
  }
  Dot {
   name Out
   label Out
   xpos 1057
   ypos 744
  }
  Output {
   name Output1
   xpos 1023
   ypos 770
  }
 end_group
push $Nc0162800
 Dot {
  name Dot3
  tile_color 0xa57aaa00
  xpos -1086
  ypos -217
 }
 Shuffle {
  alpha white
  name Shuffle3
  xpos -1120
  ypos -155
 }
 Multiply {
  channels rgba
  value {{parent.brighness_frequency} {parent.brighness_frequency} {parent.brighness_frequency} {parent.brighness_anim}}
  name Multiply3
  xpos -1120
  ypos -129
 }
 BlinkScript {
  recompileCount 27
  ProgramGroup 1
  KernelDescription "2 \"Noise4D\" iterate pixelWise d60f21004827daf93cc7aae3c8a9d35a464dc4075e83f5304202d888c93a31ad 2 \"src\" Read Point \"dst\" Write Point 5 \"octaves\" Int 1 CAAAAA== \"lacunarity\" Float 1 AAAAQA== \"amplitude\" Float 1 mpkZPw== \"gain\" Float 1 AAAAPw== \"mode\" Int 1 AAAAAA== 5 \"octaves\" 1 1 \"lacunarity\" 1 1 \"amplitude\" 1 1 \"gain\" 1 1 \"mode\" 1 1 0"
  kernelSource "//Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n//Ported by Mads Hagbarth Lund 2014\n//Modifications (fBm and Turbulence) by Erwan Leroy 2018 at Spin VFX\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\n\ninline float raw_noise_4d(const float4 coord)\n\{\n  int simplex\[64]\[4] =\n  \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n  \};\n\n  int perm\[512] =\n  \{\n    151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n    8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n    35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n    134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n    55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n    18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n    250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n    189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n    172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n    228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n    107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n    151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n    8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n    35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n    134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n    55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n    18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n    250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n    189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n    172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n    228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n    107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n  \};\n\n  int grad4\[32]\[4]=\n  \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n  \};\n  float x = coord.x;\n  float y = coord.y;\n  float z = coord.z;\n  float w = coord.w;\n  float F4 = (sqrt(5.0f)-1.0)/4.0;\n  float G4 = (5.0-sqrt(5.0f))/20.0;\n  float n0, n1, n2, n3, n4;\n  float s = (x + y + z + w) * F4;\n  int i = fastfloor(x + s);\n  int j = fastfloor(y + s);\n  int k = fastfloor(z + s);\n  int l = fastfloor(w + s);\n  float t = (i + j + k + l) * G4;\n  float X0 = i - t;\n  float Y0 = j - t;\n  float Z0 = k - t;\n  float W0 = l - t;\n  float x0 = x - X0;\n  float y0 = y - Y0;\n  float z0 = z - Z0;\n  float w0 = w - W0;\n  int c1 = (x0 > y0) ? 32 : 0;\n  int c2 = (x0 > z0) ? 16 : 0;\n  int c3 = (y0 > z0) ? 8 : 0;\n  int c4 = (x0 > w0) ? 4 : 0;\n  int c5 = (y0 > w0) ? 2 : 0;\n  int c6 = (z0 > w0) ? 1 : 0;\n  int c = c1 + c2 + c3 + c4 + c5 + c6;\n  int i1, j1, k1, l1;\n  int i2, j2, k2, l2;\n  int i3, j3, k3, l3;\n  i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n  j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n  k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n  l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n  i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n  j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n  k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n  l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n  i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n  j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n  k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n  l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n  float x1 = x0 - i1 + G4;\n  float y1 = y0 - j1 + G4;\n  float z1 = z0 - k1 + G4;\n  float w1 = w0 - l1 + G4;\n  float x2 = x0 - i2 + 2.0*G4;\n  float y2 = y0 - j2 + 2.0*G4;\n  float z2 = z0 - k2 + 2.0*G4;\n  float w2 = w0 - l2 + 2.0*G4;\n  float x3 = x0 - i3 + 3.0*G4;\n  float y3 = y0 - j3 + 3.0*G4;\n  float z3 = z0 - k3 + 3.0*G4;\n  float w3 = w0 - l3 + 3.0*G4;\n  float x4 = x0 - 1.0 + 4.0*G4;\n  float y4 = y0 - 1.0 + 4.0*G4;\n  float z4 = z0 - 1.0 + 4.0*G4;\n  float w4 = w0 - 1.0 + 4.0*G4;\n  int ii = i & 255;\n  int jj = j & 255;\n  int kk = k & 255;\n  int ll = l & 255;\n  int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n  int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n  int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n  int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n  int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n\n  float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n\n  if(t0<0) \{\n    n0 = 0.0;\n  \}\n  else\n  \{\n    t0 *= t0;\n    n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n  \}\n\n  float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n\n  if(t1<0) \{\n    n1 = 0.0;\n  \}\n  else \{\n    t1 *= t1;\n    n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n  \}\n\n  float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n\n  if(t2<0) \{\n    n2 = 0.0;\n  \}\n  else \{\n    t2 *= t2;\n    n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n  \}\n\n  float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n\n  if(t3<0) \{\n    n3 = 0.0;\n  \}\n  else \{\n    t3 *= t3;\n    n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n  \}\n\n  float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n\n  if(t4<0) \{\n    n4 = 0.0;\n  \}\n  else \{\n    t4 *= t4;\n    n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n  \}\n  return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\n\ninline float fBm_4d(const float octaves, const float lacunarity, const float gain, const float4 coord, float amplitude)\n\{\n  float total = 0;\n  float4 frequency = coord;\n  for( int i=0; i < octaves; i++ ) \{\n    total += (float)raw_noise_4d(frequency) * amplitude;\n    frequency *= lacunarity;\n    amplitude *= gain;\n  \}\n  return float(total)*0.5f+0.5f;\n\}\n\ninline float turbulence_4d(const float octaves, const float lacunarity, const float gain, const float4 coord, float amplitude)\n\{\n  float total = 0;\n  float4 frequency = coord;\n  for( int i=0; i < octaves; i++ ) \{\n    total += fabs((float)raw_noise_4d(frequency)) * amplitude;\n    frequency *= lacunarity;\n    amplitude *= gain;\n  \}\n  return float(total);\n\}\n\nkernel Noise4D : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src;\n  Image<eWrite, eAccessPoint> dst;\nparam:\n  int octaves;\n  float lacunarity;\n  float amplitude;\n  float gain;\n  int mode;\n\n  void define() \{\n    defineParam(octaves, \"octaves\", 8);\n    defineParam(lacunarity, \"lacunarity\",  2.0f);\n    defineParam(amplitude, \"amplitude\", 0.6f);\n    defineParam(gain, \"gain\", 0.5f);\n  \}\n  void process() \{\n    float sample;\n    if (mode == 0)\{\n      sample = (float)fBm_4d(float(octaves),lacunarity,gain,src(), amplitude);\n    \} else \{\n      sample = (float)turbulence_4d(float(octaves),lacunarity,gain,src(), amplitude);\n    \}\n    dst() = float4(sample,sample,sample,sample);\n\}\n\};"
  rebuild ""
  Noise4D_octaves 5
  Noise4D_amplitude 0.5
  Noise4D_mode 1
  rebuild_finalise ""
  name BlinkScript2
  xpos -1120
  ypos -93
 }
 Multiply {
  channels rgba
  value {{parent.brighness_noise*5}}
  name Multiply4
  xpos -1120
  ypos -55
 }
 Dot {
  name Dot12
  tile_color 0x7aa9ff00
  xpos -1086
  ypos 604
 }
 Grade {
  add -0.9
  name Grade3
  xpos -1120
  ypos 622
  disable true
 }
push $Na0326400
 Dot {
  name Dot31
  tile_color 0xff
  label "input not used"
  xpos -2011
  ypos 217
 }
set Na0326000 [stack 0]
 Expression {
  channel0 rgb
  expr0 1-(x/width)
  channel1 {-rgba.red -rgba.green -rgba.blue none}
  channel2 {-rgba.red -rgba.green -rgba.blue none}
  channel3 {none none none -rgba.alpha}
  name Expression24
  label "Branch Offset\t"
  xpos -2182
  ypos 299
 }
 Dot {
  name Dot25
  xpos -2148
  ypos 417
 }
set N1307d800 [stack 0]
 Gamma {
  value {{parent.generalLookFradeSigma}}
  name Gamma3
  label Threshold
  xpos -2182
  ypos 705
 }
push $Na0326c00
 Expression {
  channel0 {rgba.red rgba.green rgba.blue none}
  expr0 max(0,sign(r))
  channel1 {-rgba.red -rgba.green -rgba.blue none}
  channel2 {-rgba.red -rgba.green -rgba.blue none}
  name Expression26
  label Mask
  xpos -1935
  ypos 94
  addUserKnob {20 User}
  addUserKnob {7 diddle}
  diddle {{1-parent.evolution}}
 }
set N1307d000 [stack 0]
 Dot {
  name Dot16
  xpos -2354
  ypos 101
 }
set N1307cc00 [stack 0]
 Dot {
  name Dot20
  xpos -2354
  ypos 368
 }
set N1307c800 [stack 0]
push $Na0326000
 Dot {
  name Dot28
  xpos -2273
  ypos 217
 }
set N1307c400 [stack 0]
 Expression {
  channel0 rgb
  expr0 x==0?1:(x/width)*parent.coreOverwriteAffection
  channel1 {-rgba.red -rgba.green -rgba.blue none}
  channel2 {-rgba.red -rgba.green -rgba.blue none}
  channel3 {none none none -rgba.alpha}
  name Expression22
  label Core
  xpos -2307
  ypos 257
 }
 Gamma {
  value {{parent.coreOverwriteAffectionSigma}}
  name Gamma5
  xpos -2307
  ypos 289
 }
 Grade {
  white {{parent.mainBranchColor} {parent.mainBranchColor} {parent.mainBranchColor} {parent.mainBranchColor}}
  name Grade21
  xpos -2307
  ypos 324
 }
 Merge2 {
  inputs 2
  operation multiply
  name Merge17
  xpos -2307
  ypos 365
  disable {{parent.tipCutOff}}
 }
 Dot {
  name Dot27
  xpos -2273
  ypos 677
 }
push $Na0326000
 Noise {
  replace true
  size 2.2
  zoffset 4.12
  octaves 2
  lacunarity 1.54
  gain 1.4
  gamma 0.215
  scale {0.001 1}
  center {1024 778}
  name Noise3
  xpos -2045
  ypos 420
 }
 Grade {
  white 4
  add -0.14
  name Grade20
  xpos -2045
  ypos 444
 }
push $N1307d800
 Gamma {
  value {{parent.tipBranchFadeSigma}}
  name Gamma4
  label Threshold
  xpos -2520
  ypos 405
 }
push $N1307cc00
 Dot {
  name Dot21
  xpos -2563
  ypos 101
 }
set Nbef00000 [stack 0]
 Dot {
  name Dot22
  xpos -2563
  ypos 367
 }
push $Na0326400
 Dot {
  name Dot30
  xpos -2655
  ypos 172
 }
set N241cd800 [stack 0]
 Grade {
  blackpoint 0.05
  whitepoint 0
  white_clamp true
  name Grade23
  xpos -3170
  ypos 169
 }
 Expression {
  channel0 rgb
  expr0 y==0?r*100:0
  channel1 {-rgba.red -rgba.green -rgba.blue none}
  channel2 {-rgba.red -rgba.green -rgba.blue none}
  name Expression33
  xpos -3170
  ypos 252
 }
push $Nbef00000
 Dot {
  name Dot24
  xpos -2720
  ypos 101
 }
 Dot {
  name Dot23
  xpos -2720
  ypos 323
 }
 Merge2 {
  inputs 2
  operation multiply
  name Merge20
  xpos -3170
  ypos 320
  disable {{parent.tipCutOff}}
 }
 Grade {
  white 979
  name Grade24
  xpos -3170
  ypos 342
 }
push $N241cd800
 Expression {
  temp_name0 exponent
  temp_expr0 1/(parent.tipExponent*100000)
  channel0 rgb
  expr0 1/((r*r)+exponent)
  channel1 {-rgba.red -rgba.green -rgba.blue none}
  channel2 {-rgba.red -rgba.green -rgba.blue none}
  name Expression25
  label Exponential
  xpos -2689
  ypos 286
  addUserKnob {20 User}
 }
 Grade {
  white {{parent.tipGain/1000} {parent.tipGain/1000} {parent.tipGain/1000} {parent.tipGain/1000}}
  name Grade14
  xpos -2689
  ypos 318
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge21
  xpos -2689
  ypos 342
  disable true
 }
 Merge2 {
  inputs 2
  operation multiply
  name Merge8
  xpos -2689
  ypos 364
  disable {{parent.tipCutOff}}
 }
push $N1307c800
push $N1307c400
 Dot {
  name Dot29
  xpos -2486
  ypos 217
 }
 Fill {
  name Fill1
  xpos -2520
  ypos 271
 }
 Merge2 {
  inputs 2
  operation multiply
  name Merge9
  xpos -2520
  ypos 365
  disable {{parent.tipCutOff}}
 }
 Grade {
  white 0
  black_clamp false
  name Grade16
  xpos -2520
  ypos 385
 }
 Merge2 {
  inputs 2
  operation max
  name Merge10
  xpos -2689
  ypos 385
 }
 Merge2 {
  inputs 2
  operation multiply
  mix {{parent.tipBranchFade}}
  name Merge18
  xpos -2689
  ypos 414
 }
 Merge2 {
  inputs 2
  operation multiply
  name Merge14
  xpos -2689
  ypos 444
  disable true
 }
 Dot {
  name Dot26
  xpos -2655
  ypos 615
 }
push $N1307d000
 Dot {
  name Dot17
  xpos -1611
  ypos 101
 }
 Dot {
  name Dot15
  xpos -1611
  ypos 524
 }
push $Nb4ba1800
 Grade {
  blackpoint 1
  whitepoint 0
  black_clamp false
  name Grade2
  xpos -1958
  ypos 330
 }
 Gamma {
  name Gamma1
  label Threshold
  xpos -1860
  ypos 355
 }
 Clamp {
  name Clamp2
  xpos -1860
  ypos 397
 }
 Grade {
  white {{parent.generalLookFadeout}}
  name Grade15
  xpos -1860
  ypos 433
 }
push $Nb4ba1c00
 Grade {
  white {{parent.evolution}}
  reverse true
  black_clamp false
  name Grade18
  xpos -1766
  ypos 299
  disable {{!parent.generalLookFadeEven}}
 }
 Gamma {
  name Gamma2
  label Threshold
  xpos -1766
  ypos 355
 }
 Clamp {
  name Clamp1
  xpos -1766
  ypos 397
 }
 Grade {
  white {{parent.generalLookFadein}}
  name Grade17
  xpos -1766
  ypos 434
 }
 Merge2 {
  inputs 2
  operation max
  name Merge11
  xpos -1805
  ypos 493
 }
 Merge2 {
  inputs 2
  operation multiply
  name Merge12
  label cutoff
  xpos -1805
  ypos 517
  disable {{parent.tipCutOff}}
 }
 Multiply {
  value {{parent.generalLookGain i} {parent.generalLookGain i} {parent.generalLookGain i} {parent.generalLookGain i}}
  name Multiply6
  xpos -1805
  ypos 549
 }
 Merge2 {
  inputs 2
  operation max
  name Merge15
  xpos -1805
  ypos 612
 }
 Merge2 {
  inputs 2
  operation max
  name Merge16
  xpos -1805
  ypos 674
 }
 Merge2 {
  inputs 2
  operation multiply
  mix {{parent.generalLookBranchFade}}
  name Merge13
  xpos -1805
  ypos 714
 }
 Merge2 {
  inputs 2
  operation multiply
  mix {{parent.brighness_noise}}
  name Merge6
  xpos -1387
  ypos 714
 }
 Multiply {
  channels rgba
  value {{parent.color} {parent.color} {parent.color} 1}
  name Multiply5
  xpos -1239
  ypos 714
 }
 Merge2 {
  inputs 2
  operation multiply
  name Merge4
  xpos -1239
  ypos 738
 }
add_layer {pos pos.red pos.green pos.blue pos.alpha}
 Copy {
  inputs 2
  from0 rgba.red
  to0 pos.red
  from1 rgba.green
  to1 pos.green
  from2 rgba.blue
  to2 pos.blue
  from3 rgba.alpha
  to3 pos.alpha
  name Copy1
  xpos -1239
  ypos 762
 }
 Shuffle {
  alpha white
  name Shuffle4
  xpos -1239
  ypos 847
 }
 Dot {
  name Dot6
  tile_color 0x9e3c6300
  xpos -1205
  ypos 923
 }
 Output {
  name Output1
  xpos -1239
  ypos 1010
 }
end_group
