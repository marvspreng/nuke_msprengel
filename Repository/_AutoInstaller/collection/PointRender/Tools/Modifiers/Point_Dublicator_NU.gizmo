Group {
 name Point_Dublicator
 tile_color 0x434343ff
 note_font_color 0x7dadf9ff
 addUserKnob {20 User}
 addUserKnob {26 info l "" +STARTLINE T "Point Dublicator v1.0"}
 addUserKnob {26 divider_general l "<b><font color=#7DADF9>General</font><b>"}
 addUserKnob {3 copies l Copies}
 copies 2
 addUserKnob {6 Offset l Disconnect t "If this option is enabled a every copy will be sepeated with 1 pixel meaning that wire-render mode won't connect the copies with eachother." -STARTLINE}
 addUserKnob {26 divider_translate l "<b><font color=#7DADF9>Transform</font><b>"}
 addUserKnob {41 translate T Axis1.translate}
 addUserKnob {41 rotate T Axis1.rotate}
 addUserKnob {41 scaling l scale T Axis1.scaling}
 addUserKnob {41 uniform_scale l "uniform scale" T Axis1.uniform_scale}
 addUserKnob {41 skew T Axis1.skew}
 addUserKnob {41 pivot T Axis1.pivot}
}
 Input {
  inputs 0
  name InputAxis
  xpos 720
  ypos -170
  number 1
 }
 Axis2 {
  translate {0 0.2 0}
  name Axis1
  xpos 730
  ypos -131
 }
 Input {
  inputs 0
  name Input1
  xpos 249
  ypos -523
 }
 Crop {
  box {0 0 {input.width} {input.height}}
  name Crop2
  xpos 249
  ypos -439
 }
set N46973400 [stack 0]
 Crop {
  box {{curve} {curve} {Input1.bbox.width} {(Input1.bbox.height+parent.Offset)*parent.copies}}
  reformat true
  crop false
  name Crop1
  xpos 249
  ypos -393
 }
 Expression {
  expr0 x+.5
  expr1 fmod(y,Input1.bbox.height+parent.Offset)+.5
  expr2 y+parent.Offset
  name Expression1
  xpos 249
  ypos -348
 }
 Expression {
  expr0 (r/width)
  expr1 g/Input1.height
  expr3 fmod(y,Input1.height+parent.Offset)==Input1.height?1:0
  name Expression2
  xpos 249
  ypos -310
 }
push $N46973400
 Dot {
  name Dot2
  xpos 423
  ypos -436
 }
 STMap {
  inputs 2
  uv rgb
  filter Impulse
  name STMap1
  xpos 389
  ypos -314
 }
add_layer {id id.r}
add_layer {pos pos.red pos.green pos.blue pos.alpha}
 Expression {
  channel0 id
  expr0 int(y/(Input1.bbox.height+parent.Offset))
  channel2 {-pos.red -pos.green -pos.blue pos.alpha}
  expr2 fmod(y,Input1.bbox.height+parent.Offset)==Input1.bbox.height?0:pos.alpha
  expr3 fmod(y,Input1.bbox.height+parent.Offset)==Input1.bbox.height?0:a
  name Expression3
  xpos 389
  ypos -282
 }
 Expression {
  channel1 {-pos.red pos.green -pos.blue -pos.alpha}
  expr1 id.r*.01
  name Expression4
  xpos 389
  ypos -235
  disable true
 }
 Dot {
  name Dot1
  xpos 423
  ypos -182
 }
set N469a3400 [stack 0]
 Dot {
  name Dot3
  xpos 535
  ypos -182
 }
set N469a3000 [stack 0]
 Shuffle {
  in pos
  in2 id
  alpha red2
  name Shuffle14
  xpos 501
  ypos -138
 }
 BlinkScript {
  kernelSourceFile /Users/madshagbarth/Github/Nuke-Private/Blink/PointRender/Modify/PointRender_Transform.cpp
  recompileCount 91
  ProgramGroup 1
  KernelDescription "2 \"SaturationKernel\" iterate pixelWise 8d377e4ceff6f5f8c790408d6fb99bb84fd346b2355d084e2fcebb8e490604e4 2 \"src\" Read Point \"dst\" Write Point 6 \"Samples\" Int 1 AQAAAA== \"Rotation\" Float 1 AADgQA== \"Offset\" Float 1 AAAAAA== \"AxisCenter\" Float 3 AAAAPwAAAD8AAAA/AAAAAA== \"RotationAxis\" Int 1 AAAAAA== \"cam_Matrix\" Float 16 AACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPw== 6 \"samples\" 1 1 \"inputRot\" 1 1 \"pOffset\" 1 1 \"AxisCenter\" 3 1 \"pRotateAxis\" 1 1 \"rm\" 16 1 0"
  kernelSource "kernel SaturationKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eWrite> dst; // the output image\n\n  param:\n    int samples;\n    float inputRot; // This parameter is made available to the user.\n    float pOffset;\n    float3 AxisCenter;\n    int pRotateAxis;\n    float4x4 rm;\n\n  void define() \{\n    defineParam(samples, \"Samples\", 1);\n    defineParam(inputRot, \"Rotation\", 7.0f);\n    defineParam(pOffset, \"Offset\", 0.0f);\n    defineParam(AxisCenter, \"AxisCenter\", float3(0.5f,0.5f,0.5f));\n    defineParam(pRotateAxis, \"RotationAxis\", 0);\n    defineParam(rm, \"cam_Matrix\", float4x4( 1.0f,0.0f,0.0f,0.0f,\n                                                    0.0f,1.0f,0.0f,0.0f,\n                                                    0.0f,0.0f,1.0f,0.0f,\n                                                    0.0f,0.0f,0.0f,1.0f));    \n  \}\n\n  void process() \{\n    // Read the input image\n    float percent = inputRot / (2*PI) ;\n    float4 sample = src();\n    float sub_index = sample.w / (float)samples;\n    float over_index = sample.w;\n\n    float3 Input = float3(sample.x,sample.y,sample.z);\n    float4x4 rotMatrix = \{1.0f,0.0f,0.0f,0.0f, 0.0f,1.0f,0.0f,0.0f, 0.0f,0.0f,1.0f,0.0f, 0.0f,0.0f,0.0f,1.0f\};\n    rotMatrix.setElements(rm\[0]\[0],rm\[0]\[1],rm\[0]\[2],rm\[0]\[3],rm\[1]\[0],rm\[1]\[1],rm\[1]\[2],rm\[1]\[3],rm\[2]\[0],rm\[2]\[1],rm\[2]\[2],rm\[2]\[3],rm\[3]\[0],rm\[3]\[1],rm\[3]\[2],rm\[3]\[3]);\n    //rotMatrix.translate(float4(-AxisCenter.x,-AxisCenter.y,-AxisCenter.z,1.0f));\n    if (pRotateAxis == 1) \{\n      rotMatrix.rotateY((sample.y-.5+pOffset)*-inputRot); //\n    \}\n    else if (pRotateAxis == 2) \{\n      rotMatrix.rotateZ((sample.z-.5+pOffset)*-inputRot); //\n    \}\n    else \{\n      rotMatrix.rotateX((sample.x-.5+pOffset)*-inputRot); //\n    \}\n\n    //rotMatrix.translate(float4(AxisCenter.x,AxisCenter.y,AxisCenter.z,-1.0f));\n    sample.w = 1.0f;\n\n    float4 rotation = sample;\n    for (int i=1;i<max(int(over_index)+1,1);i++)\{\n      rotation = rotMatrix*rotation;\n    \}\n\n    dst() = float4(rotation.x, rotation.y, rotation.z, over_index);\n  \}\n\};\n\n\n"
  rebuild ""
  SaturationKernel_Samples {{parent.copies}}
  SaturationKernel_Rotation 0
  SaturationKernel_AxisCenter {0 0 0}
  SaturationKernel_cam_Matrix {
      {{parent.Axis1.world_matrix} {parent.Axis1.world_matrix} {parent.Axis1.world_matrix} {parent.Axis1.world_matrix}}
      {{parent.Axis1.world_matrix} {parent.Axis1.world_matrix} {parent.Axis1.world_matrix} {parent.Axis1.world_matrix}}
      {{parent.Axis1.world_matrix} {parent.Axis1.world_matrix} {parent.Axis1.world_matrix} {parent.Axis1.world_matrix}}
      {{parent.Axis1.world_matrix} {parent.Axis1.world_matrix} {parent.Axis1.world_matrix} {parent.Axis1.world_matrix}}
    }
  rebuild_finalise ""
  name BlinkScript1
  selected true
  xpos 501
  ypos -57
 }
push $N469a3000
 Dot {
  name Dot4
  xpos 632
  ypos -182
 }
 ShuffleCopy {
  inputs 2
  in2 pos
  red red
  green green
  blue blue
  alpha alpha2
  name ShuffleCopy1
  xpos 598
  ypos -53
 }
 Shuffle {
  out pos
  name Shuffle13
  xpos 598
  ypos 34
 }
push $N469a3400
 Merge2 {
  inputs 2
  operation copy
  bbox B
  Achannels pos
  Bchannels pos
  output pos
  name Merge1
  xpos 389
  ypos 30
 }
 Output {
  name Output1
  xpos 389
  ypos 130
 }
end_group
