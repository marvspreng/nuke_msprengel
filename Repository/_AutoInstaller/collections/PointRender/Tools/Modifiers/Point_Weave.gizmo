Group {
 name Point_Weave
 tile_color 0x434343ff
 note_font_color 0x7dadf9ff
 addUserKnob {20 User}
 addUserKnob {26 info l "" +STARTLINE T "Point Weave v1.0"}
 addUserKnob {6 useGPU l "Use GPU if available" +STARTLINE}
 useGPU true
 addUserKnob {26 divider_general l "<b><font color=#7DADF9>General</font><b>"}
 addUserKnob {3 copies l Copies}
 copies 2
 addUserKnob {3 substeps l "Sub Steps" t "How many fractal calculations should be done per copy?" -STARTLINE}
 substeps 1
 addUserKnob {6 Offset l Disconnect t "If this option is enabled a every copy will be sepeated with 1 pixel meaning that wire-render mode won't connect the copies with eachother." +STARTLINE}
 addUserKnob {6 rowStacking l "Row Stacking (for y wire rendering)" -STARTLINE}
 addUserKnob {6 blocky l Blocky +STARTLINE}
 addUserKnob {6 normalized l Normalized -STARTLINE}
 addUserKnob {26 divider_translate l "<b><font color=#7DADF9>Noise Settings</font><b>"}
 addUserKnob {3 octaves l Octaves}
 octaves 2
 addUserKnob {7 gain l Gain}
 gain 0.4
 addUserKnob {7 lagunarity l Lagunarity}
 lagunarity 0.5
 addUserKnob {6 color_rgba_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {18 amplitude l Amplitude}
 amplitude 0.068
 addUserKnob {6 amplitude_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 color_rgb_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {13 transform l Transform}
 addUserKnob {26 freq_control l "<b><font color=#7DADF9>Freq Control</font><b>"}
 addUserKnob {19 general_offset l "General Offset"}
 general_offset {0 0 0 0}
 addUserKnob {6 general_offset_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {19 general_scale l "General Scale"}
 general_scale 1
 addUserKnob {6 general_scale_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 color_rgba_1_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 text l " " T " "}
 addUserKnob {19 evolvelow l "Evolve Low"}
 evolvelow {0 0 0 0}
 addUserKnob {6 evolvelow_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 color_rgba_2_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {19 evolve_heigh l "Evolve High"}
 evolve_heigh {0 0 0 0}
 addUserKnob {6 evolve_heigh_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 color_rgba_3_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 text_1 l " " T " "}
 addUserKnob {19 scale_low l "Scale Low"}
 scale_low 1
 addUserKnob {6 scale_low_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 color_rgba_4_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {19 scale_high l "Scale High"}
 scale_high 1
 addUserKnob {6 scale_high_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 color_rgba_5_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
 Input {
  inputs 0
  name Input1
  xpos 385
  ypos -725
 }
set N8a3f1800 [stack 0]
 Crop {
  box {0 0 {input.width*input.height} 1}
  reformat true
  crop false
  name Crop3
  xpos 565
  ypos -664
 }
 Expression {
  temp_name0 formats
  temp_expr0 Input1.width
  temp_name1 formatw
  temp_expr1 Input1.height
  expr0 fmod(x,formats)/Input1.width
  expr1 ((x-fmod(x,formats))/formats)/formatw
  expr2 0
  name Expression5
  xpos 565
  ypos -625
 }
push $N8a3f1800
 STMap {
  inputs 2
  uv rgb
  filter Impulse
  name STMap2
  xpos 565
  ypos -600
 }
 Crop {
  box {0 0 30000 30000}
  intersect true
  crop false
  name Crop4
  xpos 565
  ypos -568
  disable {{input.width<30000}}
 }
push $N8a3f1800
 Switch {
  inputs 2
  which 1
  name Switch1
  label "Packed Stacking"
  xpos 385
  ypos -572
  disable {{!parent.rowStacking}}
 }
 Dot {
  name FormatController
  xpos 419
  ypos -503
 }
 Crop {
  box {0 0 {input.width} {input.height}}
  name Crop2
  xpos 249
  ypos -439
 }
set N8b31b800 [stack 0]
 Crop {
  box {{curve} {curve} {FormatController.bbox.width} {(FormatController.bbox.height+parent.Offset)*parent.copies}}
  reformat true
  crop false
  name Crop1
  xpos 249
  ypos -393
 }
 Expression {
  expr0 x+.5
  expr1 fmod(y,FormatController.bbox.height+parent.Offset)+.5
  expr2 y+parent.Offset
  name Expression1
  xpos 249
  ypos -348
 }
 Expression {
  expr0 (r/width)
  expr1 g/FormatController.height
  expr3 fmod(y,FormatControllerut1.height+parent.Offset)==FormatController.height?1:0
  name Expression2
  xpos 249
  ypos -310
 }
push $N8b31b800
 Dot {
  name Dot2
  xpos 423
  ypos -436
 }
 STMap {
  inputs 2
  uv rgb
  filter Impulse
  name STMap1
  xpos 389
  ypos -314
 }
add_layer {id id.r}
add_layer {pos pos.red pos.green pos.blue pos.alpha}
 Expression {
  channel0 id
  expr0 int(y/(FormatController.bbox.height+parent.Offset))
  channel2 {-pos.red -pos.green -pos.blue pos.alpha}
  expr2 fmod(y,FormatController.bbox.height+parent.Offset)==FormatController.bbox.height?0:pos.alpha
  expr3 fmod(y,FormatController.bbox.height+parent.Offset)==FormatController.bbox.height?0:a
  name Expression3
  xpos 389
  ypos -272
 }
 Expression {
  channel1 {-pos.red pos.green -pos.blue -pos.alpha}
  expr1 id.r*.01
  name Expression4
  xpos 389
  ypos -235
  disable true
 }
 Dot {
  name Dot1
  xpos 423
  ypos -182
 }
set N8b319800 [stack 0]
 Dot {
  name Dot3
  xpos 535
  ypos -182
 }
set N8b319400 [stack 0]
 Shuffle {
  in pos
  in2 id
  alpha red2
  name Shuffle14
  xpos 501
  ypos -138
 }
 BlinkScript {
  kernelSourceFile /Users/madshagbarth/Github/Nuke-Private/Blink/PointRender/Modify/PointRender_DublicatorModula.cpp
  recompileCount 168
  ProgramGroup 1
  KernelDescription "2 \"SaturationKernel\" iterate pixelWise ffddc7f536162aab35d452074b0bd5e3bfd37b7e0d24c273af121e2a99c819b0 2 \"src\" Read Point \"dst\" Write Point 32 \"Samples\" Int 1 AQAAAA== \"Rotation\" Float 1 AADgQA== \"Offset\" Float 1 AAAAAA== \"AxisCenter\" Float 3 AAAAAAAAAAAAAAA/AAAAAA== \"RotationAxis\" Int 1 AAAAAA== \"cam_Matrix\" Float 16 AACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPw== \"absNoise\" Bool 1 AA== \"curveNoise\" Bool 1 AA== \"curveInvert\" Bool 1 AA== \"curveGain\" Float 1 AACAPw== \"curveOffset\" Float 1 AACAPw== \"Octaves\" Int 1 CgAAAA== \"Gain\" Float 1 AAAAPw== \"Lacunarity\" Float 1 AAAAQA== \"Gamma\" Float 1 AAAAPw== \"amplitude\" Float 3 AAAAPwAAAD8AAAA/AAAAAA== \"itterations\" Int 1 AQAAAA== \"Offset\" Float 4 AAAAAA== \"Scale\" Float 4 AACAPwAAgD8AAIA/AACAPw== \"suboffset\" Float 4 AACAPwAAgD8AAIA/AACAPw== \"topoffset\" Float 4 AACAPwAAgD8AAIA/AACAPw== \"subscale\" Float 4 AACAPwAAgD8AAIA/AACAPw== \"topscale\" Float 4 AACAPwAAgD8AAIA/AACAPw== \"slowCurlModula\" Float 1 AAAAAA== \"noise_normalize\" Bool 1 AA== \"noise_round\" Bool 1 AA== \"noise_cossin\" Bool 1 AA== \"particleDrag\" Float 1 AAAAAA== \"flowspeed\" Float 1 AAAAAA== \"direction\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"offsetB\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== \"substeps\" Int 1 AAAAAA== 32 \"samples\" 1 1 \"inputRot\" 1 1 \"pOffset\" 1 1 \"AxisCenter\" 3 1 \"pRotateAxis\" 1 1 \"rm\" 16 1 \"absNoise\" 1 1 \"curveNoise\" 1 1 \"curveInvert\" 1 1 \"curveGain\" 1 1 \"curveOffset\" 1 1 \"octaves\" 1 1 \"gain\" 1 1 \"lacunarity\" 1 1 \"gamma\" 1 1 \"amplitude\" 3 1 \"itterations\" 1 1 \"offsetS\" 4 1 \"scale\" 4 1 \"suboffset\" 4 1 \"topoffset\" 4 1 \"subscale\" 4 1 \"topscale\" 4 1 \"slowCurlModula\" 1 1 \"noise_normalize\" 1 1 \"noise_round\" 1 1 \"noise_cossin\" 1 1 \"particleDrag\" 1 1 \"flowspeed\" 1 1 \"direction\" 3 1 \"offsetB\" 4 1 \"substeps\" 1 1 0"
  kernelSource "//Based on https://github.com/Draradech/csworldgen/blob/master/simplexnoise.cpp\n//Ported by Mads Hagbarth Lund 2014\n\n/* Copyright (c) 2007-2012 Eliot Eshelman\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n\n\ninline float Frac(float a_X)\n\{\n    return a_X-floor(a_X);\n\}\n\n//New noise algorithm\nfloat hash( float n ) \{ return Frac(sin(n)*753.5453123f); \}\n\n\n//Noise Only Code\ninline float cheap_noise( float x ,float y, float z )\n\{\n    float3 p = floor(float3(x,y,z));\n    float3 f = float3(Frac(x),Frac(y),Frac(z));\n    f = f*f*(3.0f-2.0f*f);\n    \n    float n = p.x + p.y*157.0f + 113.0f*p.z;\n    return _fc_lerp(_fc_lerp(_fc_lerp( hash(n+  0.0f), hash(n+  1.0f),f.x),\n                   _fc_lerp( hash(n+157.0f), hash(n+158.0f),f.x),f.y),\n               _fc_lerp(_fc_lerp( hash(n+113.0f), hash(n+114.0f),f.x),\n                   _fc_lerp( hash(n+270.0f), hash(n+271.0f),f.x),f.y),f.z);\n\}\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n   int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n   \};\n    float F4 = (sqrt(5.0f)-1.0f)/4.0f;\n    float G4 = (5.0f-sqrt(5.0f))/20.0f;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\n\n\n\n\n\n\nkernel SaturationKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eWrite> dst; // the output image\n\n  param:\n    int samples;\n    float inputRot; // This parameter is made available to the user.\n    float pOffset;\n    float3 AxisCenter;\n    int pRotateAxis;\n    float4x4 rm;\n    //-------------\n    bool absNoise;\n    bool curveNoise;\n    bool curveInvert;\n    float curveGain;\n    float curveOffset;\n    int octaves;\n    float gain;\n    float lacunarity;\n    float gamma;\n    float3 amplitude;\n    int itterations;\n    float4 offsetS;\n    float4 scale;\n    float4 suboffset;\n    float4 topoffset;\n    float4 subscale;\n    float4 topscale;\n    float slowCurlModula;\n    bool noise_normalize;\n    bool noise_round;\n    bool noise_cossin;\n    float particleDrag;\n    float flowspeed;\n    float3 direction;\n    float4 offsetB;\n    int substeps;\n\n\n  void define() \{\n    defineParam(samples, \"Samples\", 1);\n    defineParam(inputRot, \"Rotation\", 7.0f);\n    defineParam(pOffset, \"Offset\", 0.0f);\n    defineParam(AxisCenter, \"AxisCenter\", float3(0.5f,0.5f,0.5f));\n    defineParam(pRotateAxis, \"RotationAxis\", 0);\n    defineParam(rm, \"cam_Matrix\", float4x4( 1.0f,0.0f,0.0f,0.0f,\n                                                    0.0f,1.0f,0.0f,0.0f,\n                                                    0.0f,0.0f,1.0f,0.0f,\n                                                    0.0f,0.0f,0.0f,1.0f));  \n    defineParam (absNoise, \"absNoise\", false);    \n    defineParam (curveNoise, \"curveNoise\", false);    \n    defineParam (curveInvert, \"curveInvert\", false);   \n    defineParam (curveGain, \"curveGain\", 1.0f);\n    defineParam (curveOffset, \"curveOffset\", 1.0f);\n    defineParam (octaves, \"Octaves\", 10);\n    defineParam (gain, \"Gain\", 0.5f);\n    defineParam (lacunarity, \"Lacunarity\", 2.0f);\n    defineParam (gamma, \"Gamma\", 0.5f);\n    defineParam (amplitude, \"amplitude\", float3(0.5f));\n    defineParam (itterations, \"itterations\", 1);\n    defineParam(offsetS, \"Offset\", float4(0.0f, 0.0f, 0.0f,0.0f));\n    defineParam(scale, \"Scale\", float4(1.0f, 1.0f, 1.0f,1.0f));\n    defineParam(suboffset, \"suboffset\", float4(1.0f, 1.0f, 1.0f,1.0f));\n    defineParam(topoffset, \"topoffset\", float4(1.0f, 1.0f, 1.0f,1.0f));\n    defineParam(subscale, \"subscale\", float4(1.0f, 1.0f, 1.0f,1.0f));\n    defineParam(topscale, \"topscale\", float4(1.0f, 1.0f, 1.0f,1.0f));   \n    defineParam(direction, \"direction\", float3(0.0f,0.0f,0.0f));    \n  \}\n\n\n\n\n\nfloat octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w ) \n\{\n    float total = 0.0f;\n    float current;\n    float last = 1.0f;\n    float frequency = scale;\n    float amplitude = 1.0f;\n    float maxAmplitude = 0.0f;\n    float4 Tempoffset;\n    float4 Tempscale;\n\n\n    for( int i=0; i < octaves; i++ ) \{\n\n        /*\n        if (i == 0) \{\n            total += (float)raw_noise_4d( (x+suboffset.x) * frequency, (y+suboffset.y) * frequency, (z+suboffset.z) * frequency, (w+suboffset.w) * frequency ) * amplitude;\n        \}\n        else if (i == octaves-1) \{\n            total += (float)raw_noise_4d( (x+topoffset.x) * frequency, (y+topoffset.y) * frequency, (z+topoffset.z) * frequency, (w+topoffset.w) * frequency ) * amplitude;\n        \}\n        else \{\n            total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;\n        \}\n        */\n\n\n        Tempscale = (topscale * (i/(octaves+0.5-1.0f)))+(subscale * (1-(i/(octaves+0.5-1.0f))));       \n        Tempoffset = (topoffset * (i/(octaves+0.5-1.0f)))+(suboffset * (1-(i/(octaves+0.5-1.0f))));\n        current = (float)raw_noise_4d(   ((x*Tempscale.x)+Tempoffset.x) * frequency, \n                                        ((y*Tempscale.y)+Tempoffset.y) * frequency, \n                                        ((z*Tempscale.z)+Tempoffset.z) * frequency, \n                                        ((w*Tempscale.w)+Tempoffset.w) * frequency \n                                        ) * amplitude;\n        if (i == 0 && curveNoise)\{\n            if (curveInvert)\{\n                last = 0.5f-current;  \n            \}\n            else\{\n                last = current;  \n            \}\n               \n        \}\n        current = curveNoise?current*((last+curveOffset)*curveGain):current;\n        total += absNoise?fabs(current):current;\n        frequency *= 2.0f;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n\n    \}\n    return float(total / maxAmplitude);\n\}\n\nfloat3 ComputeCurlFast(float   x,  float   y,  float   z)  \n\{   \n                float   eps =   1.0f;    \n                float   n1, n2, a,  b;  \n                float3 curl;   \n                n1  =   cheap_noise(x,    y   +   eps,    z); \n                n2  =   cheap_noise(x,    y   -   eps,    z); \n                a   =   (n1 -   n2)/(2.0f   *   eps);   \n                    \n                n1  =   cheap_noise(x,    y,  z   +   eps);   \n                n2  =   cheap_noise(x,    y,  z   -   eps);   \n                b   =   (n1 -   n2)/(2.0f   *   eps);   \n                    \n                curl.x  =   a   -   b;  \n                    \n                n1  =   cheap_noise(x,    y,  z   +   eps);   \n                n2  =   cheap_noise(x,    y,  z   -   eps);   \n                a   =   (n1 -   n2)/(2.0f   *   eps);   \n                    \n                n1  =   cheap_noise(x +   eps,    y,  z); \n                n2  =   cheap_noise(x +   eps,    y,  z); \n                b   =   (n1 -   n2)/(2.0f   *   eps);   \n                    \n                curl.y  =   a   -   b;  \n                n1  =   cheap_noise(x +   eps,    y,  z); \n                n2  =   cheap_noise(x -   eps,    y,  z); \n                a   =   (n1 -   n2)/(2.0f   *   eps);   \n        \n                n1  =   cheap_noise(x,    y   +   eps,    z); \n                n2  =   cheap_noise(x,    y   -   eps,    z); \n                b   =   (n1 -   n2)/(2.0f  *   eps);   \n                    \n                curl.z  =   a   -   b;    \n                return  curl;   \n\}  \n\nfloat3 ComputeCurlSlow(float   x,  float   y,  float   z, float w)  \n\{   \n                float   eps =   1.0f;    \n                float   n1, n2, a,  b;  \n                float3 curl;   \n                n1  =   raw_noise_4d(x,    y   +   eps,    z,w); \n                n2  =   raw_noise_4d(x,    y   -   eps,    z,w); \n                a   =   (n1 -   n2)/(2.0f   *   eps);   \n                    \n                n1  =   raw_noise_4d(x,    y,  z   +   eps,w);   \n                n2  =   raw_noise_4d(x,    y,  z   -   eps,w);   \n                b   =   (n1 -   n2)/(2.0f   *   eps);   \n                    \n                curl.x  =   a   -   b;  \n                    \n                n1  =   raw_noise_4d(x,    y,  z   +   eps,w);   \n                n2  =   raw_noise_4d(x,    y,  z   -   eps,w);   \n                a   =   (n1 -   n2)/(2.0f   *   eps);   \n                    \n                n1  =   raw_noise_4d(x +   eps,    y,  z,w); \n                n2  =   raw_noise_4d(x +   eps,    y,  z,w); \n                b   =   (n1 -   n2)/(2.0f   *   eps);   \n                    \n                curl.y  =   a   -   b;  \n                n1  =   raw_noise_4d(x +   eps,    y,  z,w); \n                n2  =   raw_noise_4d(x -   eps,    y,  z,w); \n                a   =   (n1 -   n2)/(2.0f   *   eps);   \n        \n                n1  =   raw_noise_4d(x,    y   +   eps,    z,w); \n                n2  =   raw_noise_4d(x,    y   -   eps,    z,w); \n                b   =   (n1 -   n2)/(2.0f  *   eps);   \n                    \n                curl.z  =   a   -   b;    \n                return  curl;   \n\} \n\n\nfloat3 regularNoise(float   x,  float   y,  float   z, float w) \{\n  float sampleR,sampleG,sampleB;\n  sampleR = (float)octave_noise_4d(float(octaves), gain, lacunarity, ( x * scale.x ) + offsetB.x, ( y * scale.y ) + offsetB.y,  ( z * scale.z ) + offsetB.z, ( w * scale.w ) + offsetB.w) * amplitude.x;\n  sampleG = (float)octave_noise_4d(float(octaves), gain, lacunarity, ( x * scale.x ) + offsetB.x, ( y * scale.y ) + offsetB.y,  ( z * scale.z ) + offsetB.z, ( w * scale.w ) + offsetB.w - 100.0f) * amplitude.y;\n  sampleB = (float)octave_noise_4d(float(octaves), gain, lacunarity, ( x * scale.x ) + offsetB.x, ( y * scale.y ) + offsetB.y,  ( z * scale.z ) + offsetB.z, ( w * scale.w ) + offsetB.w + 200.0f) * amplitude.z;\n  return float3(sampleR,sampleG,sampleB);\n\}\n\nfloat3 cutrlNoise(float3 srcSample, float w, int i) \{\n        float sampleR,sampleG,sampleB;\n        float3 noiseSmaple = ComputeCurlSlow(( srcSample.x * scale.x ) + offsetB.x, ( srcSample.y * scale.y ) + offsetB.y,  ( srcSample.z * scale.z ) + offsetB.z,float(i)*slowCurlModula);\n        noiseSmaple = noiseSmaple / length(noiseSmaple); \n        sampleR = noiseSmaple.x*amplitude.x;\n        sampleG = noiseSmaple.y*amplitude.x;\n        sampleB = noiseSmaple.z*amplitude.x;\n  return float3(sampleR,sampleG,sampleB);\n\}\n\n  void process() \{\n    // Read the input image\n    float4 sample = src();\n    float sub_index = sample.w / (float)samples;\n    float over_index = sample.w;\n\n    \n    float4 srcSample = sample;\n    srcSample.w = 1.0f;\n    float4 dstSample =float4(0.0f);\n    float sampleR,sampleG,sampleB;\n\n    float3 velocity = float3(0.0f);\n\n    for( int i=0; i < int(over_index)*substeps; i++ ) \{\n        float3 tempVector = regularNoise( srcSample.x, srcSample.y, srcSample.z,srcSample.w+(float(i)*flowspeed));\n\n        if (noise_cossin) \{\n          //tempVector.x = tempVector.y;\n          //tempVector.y = tempVector.z;\n          //tempVector.z = tempVector.x;\n        \}\n        \n        if (noise_round) \{\n          tempVector = normalize(tempVector);\n          tempVector = float3(round(tempVector.x),round(tempVector.y),round(tempVector.z))*amplitude; \n        \}\n        if (noise_normalize) \{\n          tempVector = normalize(tempVector)*amplitude;\n        \}\n\n        if (noise_cossin) \{\n          velocity += tempVector;\n          velocity *= (1.0f-(particleDrag)); \n          tempVector = velocity;\n        \}\n\n        tempVector += direction;\n\n        srcSample = float4(srcSample.x+tempVector.x,srcSample.y+tempVector.y,srcSample.z+tempVector.z,srcSample.w);\n    \}\n\n    dst() = float4(srcSample.x, srcSample.y, srcSample.z, over_index);\n  \}\n\};\n\n\n"
  useGPUIfAvailable {{parent.useGPU}}
  rebuild ""
  SaturationKernel_Samples 12
  SaturationKernel_Rotation 6.25
  SaturationKernel_curveGain 0
  SaturationKernel_Octaves {{parent.octaves}}
  SaturationKernel_Gain {{parent.gain}}
  SaturationKernel_Lacunarity {{parent.lagunarity}}
  SaturationKernel_Gamma 0.505
  SaturationKernel_amplitude {{parent.amplitude.r} {parent.amplitude.g} {parent.amplitude.b}}
  SaturationKernel_Scale {{parent.general_scale} {parent.general_scale} {parent.general_scale} {parent.general_scale}}
  SaturationKernel_suboffset {{parent.evolvelow} {parent.evolvelow} {parent.evolvelow} {parent.evolvelow}}
  SaturationKernel_topoffset {{parent.evolve_heigh} {parent.evolve_heigh} {parent.evolve_heigh} {parent.evolve_heigh}}
  SaturationKernel_subscale {{parent.scale_low} {parent.scale_low} {parent.scale_low} {parent.scale_low}}
  SaturationKernel_topscale {{parent.scale_high} {parent.scale_high} {parent.scale_high} {parent.scale_high}}
  SaturationKernel_noise_normalize {{parent.normalized}}
  SaturationKernel_noise_round {{parent.blocky}}
  SaturationKernel_particleDrag 0.39
  SaturationKernel_direction {{parent.transform} {parent.transform} {parent.transform}}
  SaturationKernel_offsetB {{parent.general_offset} {parent.general_offset} {parent.general_offset} {parent.general_offset}}
  SaturationKernel_substeps {{parent.substeps}}
  rebuild_finalise ""
  name BlinkScript1
  xpos 501
  ypos -59
 }
push $N8b319400
 Dot {
  name Dot4
  xpos 632
  ypos -182
 }
 ShuffleCopy {
  inputs 2
  in2 pos
  red red
  green green
  blue blue
  alpha alpha2
  name ShuffleCopy1
  xpos 598
  ypos -53
 }
 Shuffle {
  out pos
  name Shuffle13
  xpos 598
  ypos 34
 }
push $N8b319800
 Merge2 {
  inputs 2
  operation copy
  bbox B
  Achannels pos
  Bchannels pos
  output pos
  name Merge1
  xpos 389
  ypos 30
 }
 Output {
  name Output1
  xpos 389
  ypos 130
 }
end_group
